<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2015-10-10T19:46:59+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[tips][Java]CodeCache領域使用状況の確認方法]]></title>
    <link href="http://luozengbin.github.io/blog/2015-09-01-%5Btips%5D%5Bjava%5Dcodecache%E9%A0%98%E5%9F%9F%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%B3%81%E3%81%AE%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95.html"/>
    <updated>2015-09-01T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][java]codecache領域使用状況の確認方法</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">1. CodeCacheについて</a></li>
<li><a href="#orgheadline6">2. CodeCache使用状況の確認方法</a>
<ul>
<li><a href="#orgheadline2">2.1. JVM Printフラグで確認する</a></li>
<li><a href="#orgheadline3">2.2. JConsoleからの確認方法</a></li>
<li><a href="#orgheadline4">2.3. VisualVMからのからの確認方法</a></li>
<li><a href="#orgheadline5">2.4. Java8のNTM(Native Memory Tracking)で確認する</a></li>
</ul>
</li>
<li><a href="#orgheadline7">3. CodeCahe溢れた時の出力</a></li>
<li><a href="#orgheadline8">4. CodeCahe溢れた時の対応</a></li>
<li><a href="#orgheadline9">5. 参考</a></li>
</ul>
</div>
</div>
<p>
先日CodeCacheによる性能問題が発生したのですが、問題を突き止めるには時間が掛かりました。
そのわけは、
</p>

<ol class="org-ol">
<li>全体が遅いではなく、一部処理のみ遅い</li>
<li>スレッドダンプから遅い箇所の特定が出来ない</li>
<li>プロファイリングからホットメソットの特定が出来ない</li>
<li>性能劣化時間帯に同期化によるロック待ちが発生していない</li>
<li>性能劣化時間帯のシステムコールコストは平時と変わらない</li>
<li>性能劣化時間帯にメジャーGCが起きていない、マイナーGCの時間も正常数値範囲ないである</li>
</ol>

<p>
JVM性能に影響するよく言われている方法や要素を一通り確認しても、問題特出が来ない。
つまりCodeCacheによる性能劣化は気づきにくい場合があります。
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> CodeCacheについて</h2>
<div class="outline-text-2" id="text-1">
<p>
CodeCacheについてJava Magazineに <a href="https://twitter.com/kittylyst">BEN EVANS</a> さんの記事が分かりやすいと思います。
</p>

<ul class="org-ul">
<li><a href="http://www.oracle.com/webfolder/technetwork/jp/javamagazine/Java-JA13-Architect-evans.pdf">Java HotSpot VM コード・キャッシュについて</a></li>
<li><a href="http://www.oracle.com/webfolder/technetwork/jp/javamagazine/Java-MJ12-architect.pdf">Java HotSpot VMにおけるJITコンパイルの概要</a></li>
<li><a href="http://www.oracle.com/webfolder/technetwork/jp/javamagazine/Java-SO12-Architect-evans.pdf">Java HotSpot VMの内部を探る(2): パフォーマンス解析のための統計情報</a></li>
<li><a href="http://www.oracle.com/webfolder/technetwork/jp/javamagazine/Java-JA14-Architect-Evans.pdf">JITWatchを使用したJava JITコンパイルの理解</a></li>
</ul>

<p>
以下は自分のまとめです。
</p>

<ul class="org-ul">
<li>JITコンパイラーの結果がCodeCacheに格納される</li>
<li>CodeCacheが一杯になるとJITコンパイラーが停止してしまう</li>
<li>JITコンパイラーが停止すると性能が劣化する（事例: 本来6秒で終わる処理が40秒かかる）</li>
<li>アプリを振り返し再デプロイするとCodeCache領域が溢れる可能性がある</li>
<li>SpringやJPAのような実行時にClassを動的生成するアプリに置いてCodeCache領域を大量に消費する場合がある</li>
<li>JDK7で階層型コンパイラーを有効化するとCodeCache領域の消費が増加する</li>
<li>ミドルウェア／アプリケーションサーバのCodeCache領域をチューニングスべき</li>
<li>ミドルウェア／アプリケーションサーバのCodeCache領域常時監視しておくべき</li>
</ul>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6"><span class="section-number-2">2</span> CodeCache使用状況の確認方法</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">2.1</span> JVM Printフラグで確認する</h3>
<div class="outline-text-3" id="text-2-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">フラグ</th>
<th scope="col" class="org-left">説明</th>
<th scope="col" class="org-left">JDKバージョン</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">-XX:+PrintCodeCache</td>
<td class="org-left">JVM終了時に出力する</td>
<td class="org-left">JDK 8から利用可能</td>
</tr>

<tr>
<td class="org-left">-XX:+PrintCodeCacheOnCompilation</td>
<td class="org-left">JITコンパイル動作時に出力する</td>
<td class="org-left">JDK 8から利用可能</td>
</tr>
</tbody>
</table>

<p>
OpenJDK8で <code>-XX:+PrintCodeCache</code> フラグの出力サンプル
</p>
<pre class="example">
$ java -XX:+PrintCodeCache -version
openjdk version "1.8.0_51"
OpenJDK Runtime Environment (build 1.8.0_51-b16)
OpenJDK 64-Bit Server VM (build 25.51-b03, mixed mode)
CodeCache: size=245760Kb used=1057Kb max_used=1068Kb free=244702Kb
 bounds [0x00007f79a5000000, 0x00007f79a5270000, 0x00007f79b4000000]
 total_blobs=220 nmethods=2 adapters=135
 compilation: enabled
</pre>

<p>
各項目について
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">項目名</th>
<th scope="col" class="org-left">値</th>
<th scope="col" class="org-left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">size</td>
<td class="org-left">245760Kb</td>
<td class="org-left">CodeCache領域予約サイズ(最大サイズ)</td>
</tr>

<tr>
<td class="org-left">used</td>
<td class="org-left">1057Kb</td>
<td class="org-left">現在の使用量</td>
</tr>

<tr>
<td class="org-left">max_used</td>
<td class="org-left">1068Kb</td>
<td class="org-left">最高水標(High Water Mark)</td>
</tr>

<tr>
<td class="org-left">free</td>
<td class="org-left">244702Kb</td>
<td class="org-left">未使用分のサイズ</td>
</tr>

<tr>
<td class="org-left">bounds</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">CodeCache領域のメモリアドレス</td>
</tr>

<tr>
<td class="org-left">total_blobs</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">★TODO調査</td>
</tr>

<tr>
<td class="org-left">nmethods</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">★TODO調査</td>
</tr>

<tr>
<td class="org-left">adapters</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">★TODO調査</td>
</tr>

<tr>
<td class="org-left">compilation</td>
<td class="org-left">enabled</td>
<td class="org-left">JITコンパイラーの状態</td>
</tr>
</tbody>
</table>
<ul class="org-ul">
<li><code>size</code> の値は <code>-XX:ReservedCodeCacheSize</code> オプションで指定可能です。</li>
<li><code>compilation</code> の値がJITコンパイラーの状態を示しているため、重要な指標と考えます。</li>
</ul>

<p>
OpenJDK8で <code>-XX:+PrintCodeCacheOnCompilation</code> フラグの出力サンプル
</p>
<pre class="example">
$ java -XX:+PrintCodeCacheOnCompilation -jar sample.jar
CodeCache: size=245760Kb used=1022Kb max_used=1031Kb free=244737Kb
CodeCache: size=245760Kb used=1056Kb max_used=1065Kb free=244703Kb
CodeCache: size=245760Kb used=1060Kb max_used=1070Kb free=244699Kb
CodeCache: size=245760Kb used=1067Kb max_used=1072Kb free=244692Kb
CodeCache: size=245760Kb used=1069Kb max_used=1072Kb free=244690Kb
（中略）
</pre>

<p>
この出力からrunning状態のJVMのCacheCode領域の変化を見ることができる。
</p>

<p>
TODO: 図形にplotする
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">2.2</span> JConsoleからの確認方法</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>グラフで確認する
メモリータブビュー「メモリー・プール&#8221;Code Cache&#8221;」チャートからリアルタイムで確認でき
る。下部の縦棒グラフに青で囲んでいる部分から空き領域との比例が分かりやすい。
<img src="img/20150826111416_jconsole_cache_code.png" alt="20150826111416_jconsole_cache_code.png" /></li>
<li>MBeanで確認する
<img src="img/20150826111416_jconsole_mbean.png" alt="20150826111416_jconsole_mbean.png" /></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">2.3</span> VisualVMからのからの確認方法</h3>
<div class="outline-text-3" id="text-2-3">
<p>
JConsoleと同じくMBeanで確認できる、<a href="https://java.net/projects/memorypoolview/downloads">MEMORY POOL VIEW</a> プラグインで視覚的なビューでも確
認が可能です。しかし、MEMORY POOL VIEWプラグインはプラグインセンターから直接ダウンロー
ドが出来ず、手動でダウンロードし、インストールが必要となります。
</p>

<ul class="org-ul">
<li>プラグイン
<img src="img/20150826111416_jvisual_plugins.png" alt="20150826111416_jvisual_plugins.png" /></li>

<li>CodeCache利用状況
<img src="img/20150826112544_jvisualvm_memorypool.png" alt="20150826112544_jvisualvm_memorypool.png" /></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5"><span class="section-number-3">2.4</span> Java8のNTM(Native Memory Tracking)で確認する</h3>
<div class="outline-text-3" id="text-2-4">
<p>
<code>-XX:NativeMemoryTracking=detail</code> でJVMの起動すると、jcmdからNativeメモリの割り当て状
況を追跡することができるようになります。
</p>

<p>
以下summaryモードの出力に20〜22行がCodeCache割り当ての概要となります。
</p>
<pre class="example">
$ jcmd $JAVA_PID VM.native_memory summary
 1|29354:
 2| 
 3|Native Memory Tracking:
 4| 
 5|Total:  reserved=1366991KB,  committed=347155KB
 6| 
 7|-                 Java Heap (reserved=1069056KB, committed=102400KB)
 8|                            (mmap: reserved=1069056KB, committed=102400KB)
 9| 
10|-                     Class (reserved=661KB, committed=661KB)
11|                            (classes #5558)
12|                            (malloc=661KB, #4626)
13| 
14|-                    Thread (reserved=41318KB, committed=41318KB)
15|                            (thread #40)
16|                            (stack: reserved=41120KB, committed=41120KB)
17|                            (malloc=121KB, #167)
18|                            (arena=77KB, #80)
19| 
20|-                      Code (reserved=50209KB, committed=2825KB)
21|                            (malloc=289KB, #1084)
22|                            (mmap: reserved=49920KB, committed=2536KB)
23| 
24|-                        GC (reserved=179288KB, committed=173556KB)
25|                            (malloc=139596KB, #776)
26|                            (mmap: reserved=39692KB, committed=33960KB)
27| 
28|-                  Compiler (reserved=130KB, committed=130KB)
29|                            (malloc=32KB, #68)
30|                            (arena=98KB, #2)
31| 
32|-                  Internal (reserved=1646KB, committed=1582KB)
33|                            (malloc=1582KB, #1631)
34|                            (mmap: reserved=64KB, committed=0KB)
35| 
36|-                    Symbol (reserved=8541KB, committed=8541KB)
37|                            (malloc=6551KB, #66839)
38|                            (arena=1990KB, #1)
39| 
40|-           Memory Tracking (reserved=5169KB, committed=5169KB)
41|                            (malloc=5169KB, #166)
42| 
43|-                   Tracing (reserved=10436KB, committed=10436KB)
44|                            (malloc=10436KB, #91)
45| 
46|-        Pooled Free Chunks (reserved=539KB, committed=539KB)
47|                            (malloc=539KB)
</pre>

<p>
detailモードに&#8221;reserved xxxxxKB for Code&#8221;部分がCodeCacheの割り当て詳細となります。
</p>
<pre class="example">
（中略）

[0x00007f2691000000 - 0x00007f2694000000] reserved 49152KB for Code
		from [ReservedSpace::initialize(unsigned long, unsigned long, bool, char*, unsigned long, bool)+0x266]
	[0x00007f2691000000 - 0x00007f2691270000] committed 2496KB from [VirtualSpace::expand_by(unsigned long, bool)+0x1c9]

（中略）

[0x00007f26985af000 - 0x00007f269866f000] reserved 768KB for Code
		from [ReservedSpace::initialize(unsigned long, unsigned long, bool, char*, unsigned long, bool)+0x266]
	[0x00007f26985af000 - 0x00007f26985b9000] committed 40KB from [VirtualSpace::expand_by(unsigned long, bool)+0x1c9]

（中略）
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7"><span class="section-number-2">3</span> CodeCahe溢れた時の出力</h2>
<div class="outline-text-2" id="text-3">
<p>
通常CodeCahe領域が溢れた時にJVMの標準出力に警告ログが出される。しかしJDK7一部バージョ
ンではこのログが出力されない場合があります。
</p>

<pre class="example">
Java HotSpot(TM) Server VM warning: CodeCache is full. Compiler has been disabled.
Java HotSpot(TM) Server VM warning: Try increasing the code cache size using -XX:ReservedCodeCacheSize=
</pre>

<p>
<span class="underline">事例</span>
</p>

<ul class="org-ul">
<li><a href="http://www.albinsblog.com/2012/09/codecache-is-full-compiler-has-been.html#.Vd5t4zKcrRY">CodeCache is full. Compiler has been disabled - Oracle SOA Suite 11g</a></li>
<li><a href="http://xmlandmore.blogspot.jp/2014/08/jdk-8-revisiting-reservedcodecachesize.html">JDK 8: Revisiting ReservedCodeCacheSize and CompileThreshold</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-2">
<h2 id="orgheadline8"><span class="section-number-2">4</span> CodeCahe溢れた時の対応</h2>
<div class="outline-text-2" id="text-4">
<p>
未完成続く
</p>
</div>
</div>

<div id="outline-container-orgheadline9" class="outline-2">
<h2 id="orgheadline9"><span class="section-number-2">5</span> 参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="https://docs.oracle.com/javase/8/embedded/develop-apps-platforms/codecache.htm">Oracle Java SE Embedded: Developer&#8217;s Guide - 15 Codecache Tuning</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr007.html">Java Platform, Standard Edition Troubleshooting Guide - 2.7 Native Memory Tracking</a></li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java道具]jstat -gcの出力を見やすくする]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-30-%5Bjava%E9%81%93%E5%85%B7%5Djstat--gc%E3%81%AE%E5%87%BA%E5%8A%9B%E3%82%92%E8%A6%8B%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B.html"/>
    <updated>2015-08-30T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[java道具]jstat&#8211;gcの出力を見やすくする</id>
    <content type="html"><![CDATA[<p>
<code>jstat -gc</code> でJVMのメモリ使用状況を確認する際によく使うのですが、少し見づらいと感じま
したので、整形用のオレオレスクリプトを作成しました。
</p>

<p>
jstat出力見づらい要因として
</p>
<ul class="org-ul">
<li>出力単位がbyteとなっています、数字長い時目視でメガバイト(mb)への換算が大変</li>
<li>ヘッダ行と値行がズレる時があります</li>
</ul>

<p>
デフォルトの出力形式は以下の通り
</p>
<pre class="example">
$ jstat -gc 10901
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT
55296.0 55296.0  0.0    0.0   334336.0 157179.1  890368.0   23266.0   35748.0 32020.9 5248.0 4068.9      3    0.124   2      0.195    0.320
</pre>

<p>
次は自作スクリプトで整形後の出力形式(JDK8の場合)
</p>
<pre class="example">
---------------------------------------------
S0  領域 |   54.00 /    0.00 (MB)  |  0.00%
S1  領域 |   54.00 /    0.00 (MB)  |  0.00%
Eden領域 |  326.50 /  170.63 (MB)  | 52.26%
Old 領域 |   22.72 /  869.50 (MB)  |  2.61%
Meta領域 |   31.27 /   34.91 (MB)  | 89.57%
CCPS領域 |    3.97 /   54.00 (MB)  | 77.53%
---------------------------------------------
YGC 回数 |       3 回
YGC 時間 |    0.12 秒
FGC 回数 |       2 回
FGC 時間 |    0.20 秒
---------------------------------------------
</pre>

<p>
コードはgithubに公開しています。
</p>

<p>
<a href="https://github.com/luozengbin/misc-box/blob/master/jvm_memstst.sh">jvm_memstst.sh</a>
</p>


<script src="https://gist.github.com/luozengbin/52d1359f89e88654e6ec.js"></script>
<script src="http://luozengbin.github.io/javascripts/custom/fixgist.js"></script>

<p>
出力加工機能以外、次の便利な機能も提供しています。
</p>
<ul class="org-ul">
<li>JavaプロセスID自動特定する</li>
<li>JAVA_HOMEを自動的に特定する</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]旧バージョンCentOSでyum更新できなくなった時]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-29-%5Btips%5D%5Blinux%5D%E6%97%A7%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3centos%E3%81%A7yum%E6%9B%B4%E6%96%B0%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E6%99%82.html"/>
    <updated>2015-08-29T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]旧バージョンcentosでyum更新できなくなった時</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">1. CentOS 6.6でyum更新したら404エラー</a></li>
<li><a href="#orgheadline2">2. 参考</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> CentOS 6.6でyum更新したら404エラー</h2>
<div class="outline-text-2" id="text-1">
<p>
CentOS 6.6でyum更新したら404エラーとなって更新できなくなった。
</p>
<pre class="example">
# yum update
読み込んだプラグイン:fastestmirror
更新処理の設定をしています
Loading mirror speeds from cached hostfile
 * base: ftp.iij.ad.jp
 * extras: ftp.iij.ad.jp
 * updates: centos.usonyx.net
http://ftp.iij.ad.jp/pub/linux/centos/6.6/os/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - "The requested URL returned error: 404 Not Found"
他のミラーを試します。
http://ftp.jaist.ac.jp/pub/Linux/CentOS/6.6/os/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - "The requested URL returned error: 404 Not Found"
他のミラーを試します。
http://ftp.nara.wide.ad.jp/pub/Linux/centos/6.6/os/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - "The requested URL returned error: 404 Not Found"
他のミラーを試します。
http://ftp.riken.jp/Linux/centos/6.6/os/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - "The requested URL returned error: 404 Not Found"
他のミラーを試します。
</pre>

<p>
ブラウザからミラーサイトを直接確認するとreadmeファイルしかありませんでした。
</p>


<div class="figure">
<p><img src="img/20150829231548_CentOS_yum_404.png" alt="20150829231548_CentOS_yum_404.png" />
</p>
</div>

<p>
readmeの内容は下記となります。
</p>

<pre class="example">
$ curl http://ftp.iij.ad.jp/pub/linux/centos/6.6/readme
This directory (and version of CentOS) is deprecated.  For normal users,
you should use /6/ and not /6.6/ in your path. Please see this FAQ
concerning the CentOS release scheme:

https://wiki.centos.org/FAQ/General

If you know what you are doing, and absolutely want to remain at the 6.6
level, go to http://vault.centos.org/ for packages.

Please keep in mind that 6.0, 6.1, 6.2, 6.3, 6.4 , 6.5 and 6.6 no longer gets any updates, nor
any security fix's.
</pre>

<p>
簡単に言うと更新が止まった旧バージョンのパッケージは <code>http://vault.centos.org/</code>
ドメイン下に移管された。
</p>

<p>
というわけでyumリポジトリのURLを書き換えれば問題が解消される。
</p>

<pre class="example">
$ sudo sed -i -e "s|mirror\.centos\.org/centos/\$releasever|vault\.centos\.org/6.6|g" /etc/yum.repos.d/CentOS-Base.repo
$ sudo sed -i -e "s|#baseurl=|baseurl=|g" CentOS-Base.repo
$ sudo sed -i -e "s|mirrorlist=|#mirrorlist=|g" CentOS-Base.repo
#  yum update
読み込んだプラグイン:fastestmirror
更新処理の設定をしています
Loading mirror speeds from cached hostfile
base                                                                                                                                   | 3.7 kB     00:00     
extras                                                                                                                                 | 3.4 kB     00:00     
updates                                                                                                                                | 3.4 kB     00:00     
（中略）
</pre>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><span class="section-number-2">2</span> 参考</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="http://www.linuxask.com/questions/yum-repository-mirror-for-old-centos-versions">Yum repository mirror for old CentOS’ versions</a></li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Java]OpenJDK8付属ツール実行時エラーの対策]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-29-%5Btips%5D%5Bjava%5Dopenjdk8%E4%BB%98%E5%B1%9E%E3%83%84%E3%83%BC%E3%83%AB%E5%AE%9F%E8%A1%8C%E6%99%82%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AE%E5%AF%BE%E7%AD%96.html"/>
    <updated>2015-08-29T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][java]openjdk8付属ツール実行時エラーの対策</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">1. プロセスのアタッチ出来ない</a></li>
<li><a href="#orgheadline2">2. Metadata does not appear to be polymorphic</a></li>
<li><a href="#orgheadline3">3. unknown CollectedHeap type</a></li>
</ul>
</div>
</div>
<p>
本記事のOpenJDK障害は次の環境で確認しています。
</p>

<pre class="example">
$ java -version
openjdk version "1.8.0_60"
OpenJDK Runtime Environment (build 1.8.0_60-b24)
OpenJDK 64-Bit Server VM (build 25.60-b23, mixed mode)

$ uname -a
Linux mimi 4.1.6-1-ARCH #1 SMP PREEMPT Mon Aug 17 08:52:28 CEST 2015 x86_64 GNU/Linux
</pre>

<p>
<!-- more -->
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> プロセスのアタッチ出来ない</h2>
<div class="outline-text-2" id="text-1">
<pre class="example">
$ /usr/lib/jvm/java-8-openjdk/bin/jinfo -sysprops 22286
Attaching to process ID 22286, please wait...
Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process
sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process
	at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread.execute(LinuxDebuggerLocal.java:163)
	at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach(LinuxDebuggerLocal.java:278)
	at sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:671)
	at sun.jvm.hotspot.HotSpotAgent.setupDebuggerLinux(HotSpotAgent.java:611)
	at sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:337)
	at sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:304)
	at sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:140)
	at sun.jvm.hotspot.tools.Tool.start(Tool.java:185)
	at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
	at sun.jvm.hotspot.tools.JInfo.main(JInfo.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at sun.tools.jinfo.JInfo.runTool(JInfo.java:108)
	at sun.tools.jinfo.JInfo.main(JInfo.java:76)
Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process
	at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach0(Native Method)
	at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.access$100(LinuxDebuggerLocal.java:62)
	at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$1AttachTask.doit(LinuxDebuggerLocal.java:269)
	at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread.run(LinuxDebuggerLocal.java:138)
</pre>

<p>
同じ障害に遭遇した方々
</p>
<ul class="org-ul">
<li><a href="https://thenonsensetechlogs.wordpress.com/2014/04/09/error-attaching-to-process-sun-jvm-hotspot-debugger-debuggerexception-cant-attach-to-the-process-solved/">Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process { solved }</a></li>
<li><a href="http://d.hatena.ne.jp/Kazuhira/20150811/1439304298">Linuxでjmap使用時に「Can&#8217;t attach to the process」と言われたら</a></li>
</ul>

<p>
straceで見たら、 <a href="http://surf.ml.seikei.ac.jp/~nakano/JMwww/html/LDP_man-pages/man2/ptrace.2.html">ptrace</a> システムコールのPTRACE_ATTACHリクエストで実行中のJavaプロセス
をアタッチしようとするところで <code>Operation not permitted</code> 理由に怒られた。
</p>
<pre class="example">
  |$ strace -ff /usr/lib/jvm/java-8-openjdk/bin/jinfo -sysprops 22286
  |（中略）
  |[pid 24277] close(7)                    = 0
**|[pid 24277] ptrace(PTRACE_ATTACH, 22286, 0, 0) = -1 EPERM (Operation not permitted)
  |[pid 24277] futex(0x7fef94008854, FUTEX_WAKE_OP_PRIVATE, 1, 1, 0x7fef94008850, {FUTEX_OP_SET, 0, FUTEX_OP_CMP_GT, 1}) = 1
  |[pid 24263] &lt;... futex resumed&gt; )       = 0
  |[pid 24277] futex(0x7fef9414b154, FUTEX_WAIT_PRIVATE, 3, NULL &lt;unfinished ...&gt;
  |[pid 24263] futex(0x7fef94008828, FUTEX_WAKE_PRIVATE, 1) = 0
  |[pid 24263] write(2, "Error attaching to process: ", 28Error attaching to process: ) = 28
  |[pid 24274] futex(0x7fef940bb654, FUTEX_WAIT_BITSET_PRIVATE, 57, {29187, 107955715}, ffffffff &lt;unfinished ...&gt;
**|[pid 24263] write(2, "sun.jvm.hotspot.debugger.Debugge"..., 71sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process) = 71
  |[pid 24263] write(2, "\n", 1
</pre>

<p>
これはLinuxカーネルのセキュリティモジュール <a href="https://www.kernel.org/doc/Documentation/security/Yama.txt">yama</a> の制限に引掛かったのが原因です。
下記手順でこの制限を解除すれば、エラーが解消されます。
</p>

<pre class="example">
$ echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
</pre>

<p>
yamaによるptrace制限に関して下記が分かやすいと思います。
</p>

<p>
<a href="https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace_Protection">https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace_Protection</a>
</p>

<p>
もっと簡単な対応方法として、sudoでrootユーザで実行すれば良いでしょう。
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><span class="section-number-2">2</span> Metadata does not appear to be polymorphic</h2>
<div class="outline-text-2" id="text-2">
<pre class="example">
$ /usr/lib/jvm/java-8-openjdk/bin/jinfo -sysprops 22286
Attaching to process ID 22286, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.60-b23
Exception in thread "main" java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at sun.tools.jinfo.JInfo.runTool(JInfo.java:108)
	at sun.tools.jinfo.JInfo.main(JInfo.java:76)
Caused by: java.lang.InternalError: Metadata does not appear to be polymorphic
	at sun.jvm.hotspot.types.basic.BasicTypeDataBase.findDynamicTypeForAddress(BasicTypeDataBase.java:278)
	at sun.jvm.hotspot.runtime.VirtualBaseConstructor.instantiateWrapperFor(VirtualBaseConstructor.java:102)
	at sun.jvm.hotspot.oops.Metadata.instantiateWrapperFor(Metadata.java:68)
	at sun.jvm.hotspot.memory.SystemDictionary.getSystemKlass(SystemDictionary.java:127)
	at sun.jvm.hotspot.runtime.VM.readSystemProperties(VM.java:879)
	at sun.jvm.hotspot.runtime.VM.getSystemProperties(VM.java:873)
	at sun.jvm.hotspot.tools.SysPropsDumper.run(SysPropsDumper.java:44)
	at sun.jvm.hotspot.tools.JInfo.run(JInfo.java:94)
	at sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:260)
	at sun.jvm.hotspot.tools.Tool.start(Tool.java:223)
	at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
	at sun.jvm.hotspot.tools.JInfo.main(JInfo.java:138)
	... 6 more
</pre>

<p>
原因はよくわからないのですが、<a href="https://twitter.com/cero_t/status/616551729954295808">twitter上で流れた情報</a> によるとJVMのdebuginfoを入れれば
問題が回避されるようです。実際に確認したところで確かに回避出来た、しかしdebuginfo禁止
の商用環境やdebuginfoが簡単に導入出来ないdistroには寂しいでしょう。
</p>

<p>
yumが使える環境は、次のように <code>debuginfo-install</code> で簡単にインストールが出来ます。
</p>
<pre class="example">
$ sudo debuginfo-install java-1.8.0-openjdk-devel
</pre>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="section-number-2">3</span> unknown CollectedHeap type</h2>
<div class="outline-text-2" id="text-3">
<pre class="example">
$ /usr/lib/jvm/java-8-openjdk/bin/jmap -heap 22286
Attaching to process ID 22286, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.60-b23

using thread-local object allocation.
Parallel GC with 4 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 0
   MaxHeapFreeRatio         = 100
   MaxHeapSize              = 1367343104 (1304.0MB)
   NewSize                  = 455606272 (434.5MB)
   MaxNewSize               = 455606272 (434.5MB)
   OldSize                  = 911736832 (869.5MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)

Heap Usage:
Exception in thread "main" java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at sun.tools.jmap.JMap.runTool(JMap.java:201)
	at sun.tools.jmap.JMap.main(JMap.java:130)
Caused by: java.lang.RuntimeException: unknown CollectedHeap type : class sun.jvm.hotspot.gc_interface.CollectedHeap
	at sun.jvm.hotspot.tools.HeapSummary.run(HeapSummary.java:144)
	at sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:260)
	at sun.jvm.hotspot.tools.Tool.start(Tool.java:223)
	at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
	at sun.jvm.hotspot.tools.HeapSummary.main(HeapSummary.java:49)
	... 6 more
</pre>

<p>
このエラーもdebuginfoをインストールすれば、回避出来る。
</p>

<p>
↓OpenJDK7でバグ報告された記録、残念ながら WONTFIX 状態でした。
</p>

<p>
<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1010786">https://bugzilla.redhat.com/show_bug.cgi?id=1010786</a>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]Firefox起動時にプロファイル選択出来るようにする]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-07-%5Btips%5D%5Blinux%5Dfirefox%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%AB%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E9%81%B8%E6%8A%9E%E5%87%BA%E6%9D%A5%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B.html"/>
    <updated>2015-08-07T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]firefox起動時にプロファイル選択出来るようにする</id>
    <content type="html"><![CDATA[<p>
Web開発でクリーンなブラウザテスト環境が必要とする場面が結構あります。
普段利用しているブラウザの設定をリセットやキャッシュクリアは平気に出来ないでしょう。
</p>

<p>
この問題はブラウザのマルチプロファイル機能を利用すればを解決する。
</p>

<p>
例えばFirefoxに <code>--new-instance</code> オプションを付けて起動時すると下記のようなプロファイ
ル選択ダイアログが表示されて、「Create Profile」で新しいプロファイルを持ちたFirefoxが
起動される。
</p>


<div class="figure">
<p><img src="img/2015-08-07-firefox-new-instance.png" alt="2015-08-07-firefox-new-instance.png" />
</p>
</div>

<p>
自分の環境では下記のdesktopファイルを追加することでランチャーからいつも起動出来るよう
にしています。
</p>

<p>
<code>.local/share/applications/myfirefox.desktop</code>
</p>
<pre class="example">
[Desktop Entry]
Name=MyFirefox
GenericName=Web Browser
GenericName[ja]=ウェブ・ブラウザ
Comment[ja]=ウェブを閲覧します
Exec=firefox --new-instance %u
Terminal=false
Type=Application
Icon=firefox
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;
StartupNotify=true
Actions=NewTab;NewWindow;NewPrivateWindow;

[Desktop Action NewTab]
Name[ja]=新しいタブ

[Desktop Action NewWindow]
Name[ja]=新しいウィンドウ

[Desktop Action NewPrivateWindow]
Name[ja]=新しいプライベートウィンドウ
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Memo][Linux]bash環境にpecoを導入しました]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-02-%5Bmemo%5D%5Blinux%5Dbash%E7%92%B0%E5%A2%83%E3%81%ABpeco%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F.html"/>
    <updated>2015-08-02T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[memo][linux]bash環境にpecoを導入しました</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. peco で何か便利なのか</a></li>
<li><a href="#sec-2">2. 導入手順</a></li>
<li><a href="#sec-3">3. bash履歴の検索をpecoインタフェースにする</a></li>
<li><a href="#sec-4">4. pecoインタフェースのキーバンディングをカスタマイズする</a></li>
<li><a href="#sec-5">5. 参考</a></li>
</ul>
</div>
</div>
<p>
以前から <a href="https://github.com/mooz/percol">percol</a> の流行りに気になっていたが、python製のため導入が面倒さそうなので保留
しました。最近、percolを元にgolangで書かれたpecoが出てきて導入しやすくなったと感じて
手を入れました。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> peco で何か便利なのか</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>コマンド出力結果のインクリメントサーチが出来る
<ul class="org-ul">
<li>Bashコマンド履歴のインクリメントサーチが出来る
</li>
<li>プロンプトでログファイルのインクリメントサーチが出来る
</li>
<li>パイプラインでたのコマンドとの連携で色々出来ると思います
</li>
</ul>
</li>
</ul>

<p>
具体なイメージはgithubの <a href="https://github.com/peco/peco/blob/master/README.md">README</a> が分かりやすい
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 導入手順</h2>
<div class="outline-text-2" id="text-2">
<p>
一番簡単なのは <code>peco</code> バイナリを <code>PATH</code> に通る。
</p>
<pre class="example">
$ wget https://github.com/peco/peco/releases/download/v0.3.3/peco_linux_amd64.tar.gz
$ tar xzvf peco_linux_amd64.tar.gz 
$ tree peco_linux_amd64
peco_linux_amd64
├── Changes
├── README.md
└── peco

0 directories, 3 files
$ export PATH=`pwd`/peco_linux_amd64:$PATH
$ peco --version
peco: v0.3.3
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> bash履歴の検索をpecoインタフェースにする</h2>
<div class="outline-text-2" id="text-3">
<p>
下記内容を <code>~/.bashrc</code> に追加する
</p>
<pre class="example">
# 重複履歴を無視
export HISTCONTROL=ignoreboth:erasedups

# 履歴保存対象から外す
export HISTIGNORE="fg*:bg*:history*:wmctrl*:exit*:ls -al:cd ~"

# コマンド履歴にコマンドを使ったの時刻を記録する
export HISTTIMEFORMAT='%Y%m%d %T '

export HISTSIZE=10000

# settings for peco
_replace_by_history() {
    local l=$(HISTTIMEFORMAT= history | cut -d" " -f4- | tac | sed -e 's/^\s*[0-9]*    \+\s\+//' | peco --query "$READLINE_LINE")
    READLINE_LINE="$l"
    READLINE_POINT=${#l}
}
bind -x '"\C-r": _replace_by_history'
bind    '"\C-xr": reverse-search-history'
</pre>

<p>
これで、 <code>Ctrl-r</code> で起動されたBash履歴検索がpecoインタフェースに変わる。
元の検索インタフェースは <code>Ctrl-x r</code> で起動することも出来る。
</p>

<video controls>
   <source src="video/2015-08-05_peco_demo.mp4">
</video>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> pecoインタフェースのキーバンディングをカスタマイズする</h2>
<div class="outline-text-2" id="text-4">
<pre class="example">
$ mkdir ~/.config/peco
$ touch ~/.config/peco/config.json
$ cat &lt;&lt;_EOT_ &gt; ~/.config/peco/config.json
{
    "Keymap": {
        "C-p": "peco.SelectPrevious",
        "C-n": "peco.SelectNext",
        "C-g": "peco.Cancel",
        "C-v": "peco.SelectNextPage",
        "C-@": "peco.ToggleSelectionAndSelectNext"
    }
}
_EOT_
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="http://qiita.com/xtetsuji/items/05f6f4c1b17854cdd75b">pecoの基礎の基礎</a>
</li>
<li><a href="http://qiita.com/syui/items/f2fe51d00378210d10b1">コマンドラインでの選択的インターフェイスについて考える</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]Sambaユーザのパスワード変更]]></title>
    <link href="http://luozengbin.github.io/blog/2015-07-23-%5Btips%5D%5Blinux%5Dsamba%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%AE%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E5%A4%89%E6%9B%B4.html"/>
    <updated>2015-07-23T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]sambaユーザのパスワード変更</id>
    <content type="html"><![CDATA[<p>
普段はLinuxで作業しているけど、MS系のドキュメントメンテ作業はWindowsでやらざるを得な
いのでSambaでLinux側のコンテンツをWindowsに共有するようにしていました。
</p>

<p>
ところで先週Windows端末再セットアップしたため、Sambaサーバに接続時にパスワードが聞か
れた時が、すっかり忘れましたのでSamba側でパスワードリセットをしました。
</p>

<ul class="org-ul">
<li>パスワードリセットコマンド（ユーザ登録コマンドと一緒）
<pre class="example">
$ sudo pdbedit -a -u test001
new password:
retype new password:
</pre>
</li>

<li>ついにパスワード情報の格納先を確認しました
<pre class="example">
$ pdbedit -L
tdbsam_open: Failed to open/create TDB passwd [/var/lib/samba/private/passdb.tdb]
tdbsam_getsampwnam: failed to open /var/lib/samba/private/passdb.tdb!
User Search failed!
</pre>
</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]Dockerのプロキシ設定]]></title>
    <link href="http://luozengbin.github.io/blog/2015-07-23-%5Btips%5D%5Blinux%5Ddocker%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E8%A8%AD%E5%AE%9A.html"/>
    <updated>2015-07-23T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]dockerのプロキシ設定</id>
    <content type="html"><![CDATA[<p>
基本は本家のドキュメントを見ろう！
</p>

<p>
<a href="https://docs.docker.com/articles/systemd/">https://docs.docker.com/articles/systemd/</a>
</p>

<p>
ここでは Acrh Linx で確認された手順を記録する。
</p>

<p>
社内はフォワードプロキシ経由で外と繋ぐなので、デフォルトでは通らない ;-(
</p>
<pre class="example">
$ docker search oraclelinux
Error response from daemon: Get https://index.docker.io/v1/search?q=oraclelinux: dial tcp 54.174.226.171:443: no route to host
</pre>

<p>
<code>/etc/systemd/system/&lt;サービスID&gt;.d/</code> 配下に環境変数の上書きファイルを定義し、サービ
スをリロードするだけです。
</p>
<pre class="example">
$ sudo mkdir /etc/systemd/system/docker.service.d
$ sudo touch /etc/systemd/system/docker.service.d/http-proxy.conf
$ sudo nano /etc/systemd/system/docker.service.d/http-proxy.conf
[Service]
Environment="HTTP_PROXY=http://*********************:8081"
Environment="HTTPS_PROXY=http://*********************:8081"
$ sudo systemctl daemon-reload
$ sudo systemctl restart docker
$ docker search oraclelinux
NAME                                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
oraclelinux                               Oracle Linux is an open-source operating s...   46        [OK]       
oracle/oraclelinux                        Oracle Linux is an open-source operating s...   16                   [OK]
tvierling/oraclelinux                     Oracle Linux base images, yum-updated to l...   2                    [OK]
centminmod/oraclelinux65base              Oracle Linux 6.5 base 1.57GB image              1                    
avmiller/oraclelinux                      Personal Oracle Linux Test Images (Non-pro...   0                    
kiwenlau/oraclelinux                                                                      0                    
talberto/oraclelinux                                                                      0                    
ksasi/oraclelinux                                                                         0                    
saltfactory/oraclelinux                   Oracle Linux                                    0                    
arpagaus/oraclelinux                                                                      0                    
joseperez/oraclelinux-lamp                oraclelinux 7.0 con mariadb, apache y php.      0                    
jinyan/oraclelinux                        Oracle Linux 6.6                                0                    
hootjr/oraclelinux                                                                        0                    
poisoncreed/oraclelinux-base-with-httpd                                                   0                    
bdpzone/bdporaclelinux6                   Big Data Partnership Development Environme...   0                    [OK]
dyoung522/oracle-ruby                     OracleLinux running Ruby                        0                    [OK]
bdpzone/bdporaclelinux7                   Big Data Partnership Development Environme...   0                    [OK]
mlechner/oraclelinux7                     GIS tools on Oracle Linux 7                     0                    
tehmul/oraclelinux6-tc                    Oracle Linux 6+Oracle Server JRE 8+ Apache...   0                    
calaniz/oraclelinux                                                                       0                    
dyoung522/oraclelinux-dev                 OracleLinux with development environment        0                    [OK]
hedlund/oraclelinux                                                                       0                    [OK]
florentbenoit/oraclelinux-jdk7                                                            0                    [OK]
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Emacs]mew起動時にアカウントの選択を出来るように]]></title>
    <link href="http://luozengbin.github.io/blog/2015-07-15-%5Bemacs%5Dmew%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%AB%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%AE%E9%81%B8%E6%8A%9E%E3%82%92%E5%87%BA%E6%9D%A5%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB.html"/>
    <updated>2015-07-15T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[emacs]mew起動時にアカウントの選択を出来るように</id>
    <content type="html"><![CDATA[<p>
久々のemacsネタです。
</p>

<p>
mewで複数メールアカウントで扱うときにSummary モードにおいて <code>C</code> で切り替えることが出
来るので非常に便利です。ただし、起動時にdefaultアカウントの選択機能が持っていないので、
mew-init-hookで拡張してみました。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #00cd66;">;; </span><span style="color: #00cd66;">&#12450;&#12459;&#12454;&#12531;&#12488;1</span>
(setq my-mew-config-1
      (list
       '(proto                          <span style="color: #bdb76b;">"+"</span>)
       '(name                           <span style="color: #bdb76b;">"******"</span>)
       '(user                           <span style="color: #bdb76b;">"******"</span>)   <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#12513;&#12540;&#12523;&#12450;&#12489;&#12524;&#12473;&#12398;@&#12363;&#12425;&#24038;&#37096;&#20998;</span>
       '(mail-domain                    <span style="color: #bdb76b;">"******"</span>)   <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#12513;&#12540;&#12523;&#12450;&#12489;&#12524;&#12473;&#12398;@&#12363;&#12425;&#21491;&#37096;&#20998;</span>
       '(smtp-server                    <span style="color: #bdb76b;">"******"</span>)   <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#36865;&#20449;&#29992;&#12469;&#12540;&#12496;&#12450;&#12489;&#12524;&#12473;</span>
       '(smtp-port                      <span style="color: #bdb76b;">"1025"</span>)     <span style="color: #00cd66;">;</span>
       '(smtp-user                      <span style="color: #bdb76b;">"******"</span>)   <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#36865;&#20449;&#29992;&#12518;&#12540;&#12470;id</span>
       '(pop-server                     <span style="color: #bdb76b;">"******"</span>)   <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#21463;&#20449;&#29992;&#12469;&#12540;&#12496;&#12450;&#12489;&#12524;&#12473;</span>
       '(pop-port                       <span style="color: #bdb76b;">"1110"</span>)     <span style="color: #00cd66;">;</span>
       '(pop-user                       <span style="color: #bdb76b;">"******"</span>)   <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#21463;&#20449;&#29992;&#12518;&#12540;&#12470;id</span>
       '(pop-delete                     t)          <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#12513;&#12540;&#12523;&#21463;&#20449;&#24460;&#12469;&#12540;&#12496;&#12540;&#20596;&#12398;&#12513;&#12483;&#12475;&#12540;&#12472;&#12434;&#65303;&#26085;&#12434;&#20445;&#25345;&#12377;&#12427;</span>
       '(pop-auth                       pass)       <span style="color: #00cd66;">; </span><span style="color: #00cd66;">pop3 &#12391;&#21463;&#20449;&#26178;&#12398;&#35469;&#35388;&#26041;&#24335;&#12289;&#25351;&#23450;&#12375;&#12394;&#12356;&#22580;&#21512;&#12399;apop&#26041;&#24335;&#12364;&#20351;&#29992;&#12373;&#12428;&#12427;</span>
       '(pop-size                       0)          <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#12513;&#12540;&#12523;&#12398;&#19978;&#38480;&#12469;&#12452;&#12474;&#12290;0 &#12398;&#22580;&#21512;&#12399;&#19978;&#38480;&#12394;&#12375;&#12290;</span>
       '(pop-header-only                t)          <span style="color: #00cd66;">; </span><span style="color: #00cd66;">[c-u s]&#12391;&#12504;&#12483;&#12480;&#12398; &#12415;&#12398;&#12467;&#12500;&#12540;</span>
       '(dcc                            <span style="color: #bdb76b;">"******"</span>)   <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#36820;&#20449;&#26178;&#12395;&#33258;&#20998;&#12398;&#12450;&#12489;&#12524;&#12473;&#12434;dcc&#12395;&#20837;&#12428;&#12427;&#12289;dcc&#12399;&#36865;&#20449;&#12375;&#12383;&#12513;&#12540;&#12523;&#12398;&#12504;&#12483;&#12480;&#12540;&#12395;&#34920;&#31034;&#12373;&#12428;&#12394;&#12356;</span>
       '(fcc                            <span style="color: #bdb76b;">"+sent"</span>)    <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#36865;&#20449;&#12375;&#12383;&#12513;&#12540;&#12523;&#12398;&#20445;&#23384;&#20808;</span>
       '(smime-signer                   <span style="color: #bdb76b;">"******"</span>)   <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#38651;&#23376;&#32626;&#21517;&#12391;&#20351;&#29992;&#12377;&#12427;&#35388;&#26126;&#26360;id</span>
       '(protect-privacy-always         nil)
       '(privacy-method                 smime)      <span style="color: #00cd66;">; </span><span style="color: #00cd66;">&#38651;&#23376;&#32626;&#21517;&#12479;&#12452;&#12503;&#12398;&#25351;&#23450;</span>
       '(draft-privacy-method           smime)
       '(protect-privacy-always-type  smime-signature)
       ))

<span style="color: #00cd66;">;; </span><span style="color: #00cd66;">&#12450;&#12459;&#12454;&#12531;&#12488;2</span>
(setq my-mew-config-2
      (list
       '(proto                   <span style="color: #bdb76b;">"%"</span>)
       '(name                    <span style="color: #bdb76b;">"******"</span>)
       '(user                    <span style="color: #bdb76b;">"******"</span>)
       '(mail-domain             <span style="color: #bdb76b;">"gmail.com"</span>)
       '(dcc                     <span style="color: #bdb76b;">"*******@gmail.com"</span>)
       '(protect-privacy-always  nil)
       '(ssl-verify-level        0)
       <span style="color: #00cd66;">;; </span><span style="color: #00cd66;">smtp&#12469;&#12540;&#12496;&#12540;</span>
       '(smtp-user               <span style="color: #bdb76b;">"*******@gmail.com"</span>)
       '(smtp-auth               t)
       '(smtp-ssl                t)
       '(smtp-server             <span style="color: #bdb76b;">"smtp.gmail.com"</span>)
       '(smtp-ssl-port           <span style="color: #bdb76b;">"465"</span>)
       <span style="color: #00cd66;">;; </span><span style="color: #00cd66;">imap&#12434;&#20351;&#29992;&#12377;&#12427;&#22580;&#21512;</span>
       '(inbox-folder            <span style="color: #bdb76b;">"%gmail"</span>)
       '(imap-user               <span style="color: #bdb76b;">"******@gmail.com"</span>)
       '(imap-size               5242880) <span style="color: #00cd66;">; </span><span style="color: #00cd66;">5m&#20197;&#20869;&#21363;&#26178;&#21463;&#20449;&#12377;&#12427;</span>
       '(imap-auth               t)
       '(imap-ssl                t)
       '(imap-ssl-port           <span style="color: #bdb76b;">"993"</span>)
       '(imap-server             <span style="color: #bdb76b;">"imap.gmail.com"</span>)
       ))

<span style="color: #00cd66;">;;; </span><span style="color: #00cd66;">&#12450;&#12459;&#12454;&#12531;&#12488;3</span>
(setq my-mew-config-3
      (list
       '(proto                   <span style="color: #bdb76b;">"+"</span>)
       <span style="color: #00cd66;">;; </span><span style="color: #00cd66;">&#65288;&#20013;&#30053;&#65289;</span>
))

<span style="color: #00cd66;">;;; </span><span style="color: #00cd66;">&#12450;&#12459;&#12454;&#12531;&#12488;4</span>
(setq my-mew-config-4
      (list
       '(proto                   <span style="color: #bdb76b;">"+"</span>)
       <span style="color: #00cd66;">;; </span><span style="color: #00cd66;">&#65288;&#20013;&#30053;&#65289;</span>
))

(setq my-mew-account-list
      (list (append (list 'account1) my-mew-config-1)
            (append (list 'account2) my-mew-config-2)
            (append (list 'account3) my-mew-config-3)
            (append (list 'account4) my-mew-config-4)))

(<span style="color: #ffffff;">require</span> '<span style="color: #40e0d0;">dash</span>)

<span style="color: #00cd66;">;; </span><span style="color: #00cd66;">&#12450;&#12459;&#12454;&#12531;&#12488;&#36984;&#25246;&#20966;&#29702;</span>
(<span style="color: #ffffff;">defun</span> <span style="color: #98fb98;">my-mew-select-account</span> ()
  (<span style="color: #ffffff;">let*</span> ((account-name-list (mapcar (<span style="color: #ffffff;">lambda</span> (x) (pp-to-string (car x))) my-mew-account-list))
         (selected-account (completing-read <span style="color: #bdb76b;">"mew account: "</span> account-name-list nil t)))
    (message selected-account)
    (setq mew-config-alist
          (append
           (list
            (append (list 'default)
                    (cdr
                     (car (-filter (<span style="color: #ffffff;">lambda</span> (mew-config)
                                     (string= selected-account
                                              (pp-to-string (car mew-config))))
                                   my-mew-account-list)))))
           (-filter (<span style="color: #ffffff;">lambda</span> (mew-config)
                      (not
                       (string= selected-account
                                (pp-to-string (car mew-config)))))
                    my-mew-account-list)))))

<span style="color: #00cd66;">;; </span><span style="color: #00cd66;">&#36215;&#21205;&#26178;&#12395;&#36208;&#12425;&#12379;&#12427;</span>
(add-hook 'mew-init-hook 'my-mew-select-account)
</pre>
</div>

<p>
デモ
</p>
<video controls>
   <source src="video/2015-07-15_mew_account_select.mp4">
</video>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[小道具][Java]スタックサイズ監視スクリプト]]></title>
    <link href="http://luozengbin.github.io/blog/2015-07-02-%5B%E5%B0%8F%E9%81%93%E5%85%B7%5D%5Bjava%5D%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B5%E3%82%A4%E3%82%BA%E7%9B%A3%E8%A6%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88.html"/>
    <updated>2015-07-02T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[小道具][java]スタックサイズ監視スクリプト</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. スクリプト</a></li>
<li><a href="#sec-3">3. テスト用プログラム</a></li>
<li><a href="#sec-4">4. 監視してみる</a></li>
<li><a href="#sec-5">5. 出力形式</a></li>
<li><a href="#sec-6">6. 2015/08/05 更新</a></li>
</ul>
</div>
</div>
<p>
<code>/proc/&lt;pid&gt;/smaps</code> プロセスメモリマッピングファイルからjavaスレッドのスタック使用状
況をいい感じに出力するスクリプトを作りました。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>java version &#8220;1.8.0_45&#8221;
</li>
<li>x86_64 gnu/linux
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> スクリプト</h2>
<div class="outline-text-2" id="text-2">
<p>
スクリプトの元ネタは以前の記事を参考してください。 <a href="2015-04-22-%5B%E8%AA%BF%E6%9F%BB%5Djvm%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html">jvmのスタックサイズについて</a>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #74af68;">#</span><span style="color: #74af68;">!/bin/</span><span style="color: #ffad29; font-weight: bold;">sh</span>

<span style="color: #74af68;">###########################################################################</span>
<span style="color: #74af68;"># </span><span style="color: #74af68;">jvm_stacksize.sh - take a jvm stack size snapshot</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">Authors: Akira Wakana <a href="mailto:jalen.cn%40gmail.com">&lt;jalen.cn@gmail.com&gt;</a></span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">This program is free software: you can redistribute it and/or modify</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">it under the terms of the GNU General Public License as published by</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">the Free Software Foundation, version 3 of the License.</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">This program is distributed in the hope that it will be useful,</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">GNU General Public License for more details.</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">You should have received a copy of the GNU General Public License</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">along with this program.  If not, see http://www.gnu.org/licenses</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;"># </span><span style="color: #74af68;">Usage:</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">$jvm_stacksize.sh &lt;JVM ProcessID&gt;</span>
<span style="color: #74af68;">###########################################################################</span>

<span style="color: #dbdb95;">PID</span>=$<span style="color: #dbdb95;">1</span>

ps ${<span style="color: #dbdb95;">PID</span>} | grep [j]ava &gt; /dev/null || {
    <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"-----------------------------------------------------------------------"</span>
    ps -ef  | grep [j]ava
    <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"-----------------------------------------------------------------------"</span>
    <span style="color: #23d7d7;">echo</span> -n <span style="color: #e67128;">"please input the java process id: "</span>
    <span style="color: #23d7d7;">read</span> PID
}

<span style="color: #23d7d7;">printf</span> <span style="color: #e67128;">"[ PID ]\t[StackSize(kB)]\t[GuardPage(kB)]\t[UsedSize(kB)]\t[Thread Name]\n"</span>

<span style="color: #74af68;"># </span><span style="color: #74af68;">jstack&#12398;&#20986;&#21147;&#32080;&#26524;&#12363;&#12425;&#12473;&#12524;&#12483;&#12489;ID&#12392;&#21517;&#21069;&#12434;&#25277;&#20986;&#12377;&#12427;</span>
jstack ${<span style="color: #dbdb95;">PID</span>} | grep nid | sed -e <span style="color: #e67128;">"s/^\"\(.*\)\".*nid=\(0x[0-9|a-z]*\).*$/\2,\1/"</span> | sort | <span style="color: #ffad29; font-weight: bold;">while </span><span style="color: #23d7d7;">read</span> line
<span style="color: #ffad29; font-weight: bold;">do</span>
    <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;ID&#12434;&#20999;&#12426;&#20986;&#12377;</span>
    <span style="color: #dbdb95;">pid_hex</span>=<span style="color: #fa8072;">`echo "${line}" | awk -F"," '{print $1}'`</span>

    <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;&#21517;&#12434;&#20999;&#12426;&#20986;&#12377;</span>
    <span style="color: #dbdb95;">thread_name</span>=<span style="color: #fa8072;">`echo "${line}" | awk -F"," '{print $2}'`</span>

    <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;ID&#12434;10&#36914;&#25968;&#12395;&#22793;&#25563;</span>
    <span style="color: #dbdb95;">pid</span>=<span style="color: #fa8072;">`printf '%d\n' ${pid_hex}`</span>

    <span style="color: #74af68;"># </span><span style="color: #74af68;">/proc/&lt;pid&gt;/smaps &#12501;&#12449;&#12452;&#12523;&#12363;&#12425;&#12473;&#12479;&#12483;&#12463;&#12469;&#12452;&#12474;&#12289;&#12460;&#12540;&#12489;&#12506;&#12540;&#12472;&#12469;&#12452;&#12474;&#12434;&#21462;&#24471;&#12377;&#12427;</span>
    <span style="color: #dbdb95;">guard_page</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps | grep -B16 "stack:${pid}" | grep -e "^Size:" | awk '{print $2}'`</span>
    <span style="color: #dbdb95;">stack_page</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps | grep -A15 "stack:${pid}" | grep -e "^Size:" | awk '{print $2}'`</span>
    <span style="color: #dbdb95;">used_size</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps  | grep -A15 "stack:${pid}" | grep -e "^Rss:" | awk '{print $2}'`</span>
    <span style="color: #dbdb95;">stack_size</span>=<span style="color: #fa8072;">`expr ${guard_page} + ${stack_page}`</span>
    <span style="color: #23d7d7;">printf</span> <span style="color: #e67128;">"%7d\t%15s\t%15s\t%14s\t%s\n"</span> <span style="color: #e67128;">"${pid}"</span> <span style="color: #e67128;">"${stack_size}"</span> <span style="color: #e67128;">"${guard_page}"</span> <span style="color: #e67128;">"${used_size}"</span> <span style="color: #e67128;">"${thread_name}"</span>
<span style="color: #ffad29; font-weight: bold;">done</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> テスト用プログラム</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffad29; font-weight: bold;">package</span> <span style="color: #008b8b;">test01</span>;

<span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #ffad29; font-weight: bold;">class</span> <span style="color: #34cae2;">TestTask</span> <span style="color: #ffad29; font-weight: bold;">implements</span> <span style="color: #34cae2;">Runnable</span> {

    <span style="color: #008b8b;">@Override</span>
    <span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #34cae2;">void</span> <span style="color: #00ede1; font-weight: bold;">run</span>() {
        add1(1);
    }

    <span style="color: #ffad29; font-weight: bold;">private</span> <span style="color: #34cae2;">int</span> <span style="color: #00ede1; font-weight: bold;">add1</span>(<span style="color: #34cae2;">int</span> <span style="color: #dbdb95;">a</span>) {
        <span style="color: #ffad29; font-weight: bold;">try</span> {
            Thread.sleep(50);
        } <span style="color: #ffad29; font-weight: bold;">catch</span> (<span style="color: #34cae2;">InterruptedException</span> <span style="color: #dbdb95;">e</span>) {
            e.printStackTrace();
        }

        <span style="color: #ffad29; font-weight: bold;">return</span> add2(a++);
    }

    <span style="color: #ffad29; font-weight: bold;">private</span> <span style="color: #34cae2;">int</span> <span style="color: #00ede1; font-weight: bold;">add2</span>(<span style="color: #34cae2;">int</span> <span style="color: #dbdb95;">a</span>) {
        <span style="color: #74af68;">//</span><span style="color: #74af68;">add1 -&gt; add2 --&gt; add1 &#28961;&#38480;&#12523;&#12540;&#12503;&#12398;&#29366;&#24907;&#12391;</span>
        <span style="color: #74af68;">//</span><span style="color: #74af68;">&#12473;&#12479;&#12483;&#12463;&#12434;&#39135;&#12356;&#28528;&#12377;</span>
        <span style="color: #ffad29; font-weight: bold;">return</span> add1(a--);
    }

    <span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #ffad29; font-weight: bold;">static</span> <span style="color: #34cae2;">void</span> <span style="color: #00ede1; font-weight: bold;">main</span>(<span style="color: #34cae2;">String</span>[] <span style="color: #dbdb95;">args</span>) <span style="color: #ffad29; font-weight: bold;">throws</span> <span style="color: #34cae2;">Exception</span> {

        <span style="color: #34cae2;">Thread</span> <span style="color: #dbdb95;">t1</span> = <span style="color: #ffad29; font-weight: bold;">new</span> <span style="color: #34cae2;">Thread</span>(<span style="color: #ffad29; font-weight: bold;">new</span> <span style="color: #34cae2;">TestTask</span>());
        <span style="color: #34cae2;">Thread</span> <span style="color: #dbdb95;">t2</span> = <span style="color: #ffad29; font-weight: bold;">new</span> <span style="color: #34cae2;">Thread</span>(<span style="color: #ffad29; font-weight: bold;">new</span> <span style="color: #34cae2;">TestTask</span>());
        t1.start();
        t2.start();

        t1.join();
        t2.join();
    }

}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 監視してみる</h2>
<div class="outline-text-2" id="text-4">
<video controls>
   <source src="video/2015-07-21_jvm_stack_watch.mp4" />
</video>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 出力形式</h2>
<div class="outline-text-2" id="text-5">
<pre class="example">
[ PID ]	[StackSize(kB)]	[GuardPage(kB)]	[UsedSize(kB)]	[Thread Name]
  16559            1044              12            116	main
  16560            1112               4             92	GC task thread#0 (ParallelGC)
  16561            1028               4              8	GC task thread#1 (ParallelGC)
  16562            1028               4              8	GC task thread#2 (ParallelGC)
  16563            1028               4              8	GC task thread#3 (ParallelGC)
  16564           12336               4             56	VM Thread
  16565            1028              12             88	Reference Handler
  16566            1028              12             88	Finalizer
  16567            1028              12             92	Signal Dispatcher
  16568            1028              12             20	C2 CompilerThread0
  16569            1028              12              8	C2 CompilerThread1
  16570            1028              12             12	C1 CompilerThread2
  16571            1028              12              8	Service Thread
  16572            1028               4              8	VM Periodic Task Thread
  16573            1028              12            428	Thread-0
  16583            1028              12            228	Thread-1
  16613            1028              12             12	Attach Listener
</pre>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">項目名</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">PID</td>
<td class="left">JavaスレッドのプロセスID</td>
</tr>

<tr>
<td class="left">StackSize</td>
<td class="left">Javaスタック＋Nativeスタックのサイズ (kB)</td>
</tr>

<tr>
<td class="left">GuardPage</td>
<td class="left">スタック保護ページ (kB)</td>
</tr>

<tr>
<td class="left">UsedSize</td>
<td class="left">実際使った物理メモリサイズ (kB)</td>
</tr>

<tr>
<td class="left">Thread Name</td>
<td class="left">スレッド名</td>
</tr>
</tbody>
</table>

<p>
バッチリ！便利な道具が１つ増えました。
</p>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 2015/08/05 更新</h2>
<div class="outline-text-2" id="text-6">
<p>
前の実装は <code>watch</code> コマンドでスクリプトを繰り返し実行させスタックサイズの監視をしてい
たのですが、繰り返しサイクルで毎回jstackでスレッドダンプを取得しているため若干JVMにオー
バヘッドがかかる。特にスレッドを多数起動されたアプリケーションサーバの場合性能へ影響
が無視できないので、少しスクリプトの実装シナリオを変えて改善してみました。
</p>

<p>
基本コンセプトは
</p>

<ol class="org-ol">
<li><code>jstack</code> を１回のみ実行する、その結果(スレッドダンプ)をtmpファイルで保持する
</li>
<li><code>ps -H &lt;PID&gt;</code> でスレッドIDを取得して、1のスレッドダンプからスレッド名を引き
</li>
<li>スレッドダンプから該当するものがない場合、スレッドダンプが古いと判断し再度
<code>jstack</code> で新しいスレッドダンプを取る
</li>
</ol>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #74af68;">#</span><span style="color: #74af68;">!/bin/</span><span style="color: #ffad29; font-weight: bold;">sh</span>
<span style="color: #74af68;">###########################################################################</span>
<span style="color: #74af68;"># </span><span style="color: #74af68;">jvm_stacksize.sh - take jvm stack size snapshot</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">Authors: Akira Wakana <a href="mailto:jalen.cn%40gmail.com">&lt;jalen.cn@gmail.com&gt;</a></span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">This program is free software: you can redistribute it and/or modify</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">it under the terms of the GNU General Public License as published by</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">the Free Software Foundation, version 3 of the License.</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">This program is distributed in the hope that it will be useful,</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">GNU General Public License for more details.</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">You should have received a copy of the GNU General Public License</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">along with this program.  If not, see <a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">&lt;http://www.gnu.org/licenses/&gt;.</a></span><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">
</a><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">#</a></span><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">
</a><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID"># </a></span><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">Usage:</a></span><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">
</a><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">#    </a></span><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">$jvm_stacksize.sh &lt;JVM ProcessID&gt;</a></span>
<span style="color: #74af68;">###########################################################################</span>

<span style="color: #00ede1; font-weight: bold;">print_stacksize</span>()
{
    rm -rf ${<span style="color: #dbdb95;">tmpdir</span>}/stacksize.txt
    <span style="color: #23d7d7;">printf</span> <span style="color: #e67128;">"[ PID ]\t[StackSize(kB)]\t[GuardPage(kB)]\t[UsedSize(kB)]\t[Thread Name]\n"</span>
    ps h -L --format=lwp ${<span style="color: #dbdb95;">PID</span>} | grep -v <span style="color: #e67128;">"${PID}"</span> | <span style="color: #ffad29; font-weight: bold;">while </span><span style="color: #23d7d7;">read</span> pid
    <span style="color: #ffad29; font-weight: bold;">do</span>
        <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;ID</span>
        <span style="color: #dbdb95;">pid_hex</span>=<span style="color: #fa8072;">`printf '%#x\n' $pid`</span>

        <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;&#21517;&#12434;&#20999;&#12426;&#20986;&#12377;</span>
        <span style="color: #dbdb95;">threadinfo</span>=<span style="color: #fa8072;">`cat ${threadtdump} | fgrep " nid=${pid_hex} " | sed -e "s/^\"\(.*\)\".*nid=\(0x[0-9|a-z]*\).*$/\2,\1/"`</span>
        <span style="color: #ffad29; font-weight: bold;">if</span> [ <span style="color: #e67128;">"${threadinfo}"</span> == <span style="color: #e67128;">""</span> ]; <span style="color: #ffad29; font-weight: bold;">then</span>
            jstack ${<span style="color: #dbdb95;">PID</span>} &gt; ${<span style="color: #dbdb95;">threadtdump</span>}
            <span style="color: #dbdb95;">threadinfo</span>=<span style="color: #fa8072;">`cat ${threadtdump} | fgrep " nid=${pid_hex} " | sed -e "s/^\"\(.*\)\".*nid=\(0x[0-9|a-z]*\).*$/\2,\1/"`</span>
        <span style="color: #ffad29; font-weight: bold;">fi</span>
        <span style="color: #dbdb95;">thread_name</span>=<span style="color: #fa8072;">`echo "${threadinfo}" | awk -F"," '{print $2}'`</span>

        <span style="color: #74af68;"># </span><span style="color: #74af68;"># /proc/&lt;pid&gt;/smaps &#12501;&#12449;&#12452;&#12523;&#12363;&#12425;&#12473;&#12479;&#12483;&#12463;&#12469;&#12452;&#12474;&#12289;&#12460;&#12540;&#12489;&#12506;&#12540;&#12472;&#12469;&#12452;&#12474;&#12434;&#21462;&#24471;&#12377;&#12427;</span>
        <span style="color: #dbdb95;">guard_page</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps | grep -B16 "stack:${pid}" | grep -e "^Size:" | awk '{print $2}'`</span>
        <span style="color: #dbdb95;">stack_page</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps | grep -A15 "stack:${pid}" | grep -e "^Size:" | awk '{print $2}'`</span>
        <span style="color: #dbdb95;">used_size</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps  | grep -A15 "stack:${pid}" | grep -e "^Rss:" | awk '{print $2}'`</span>
        <span style="color: #dbdb95;">stack_size</span>=<span style="color: #fa8072;">`expr ${guard_page} + ${stack_page}`</span>
        <span style="color: #23d7d7;">printf</span> <span style="color: #e67128;">"%7d\t%15s\t%15s\t%14s\t%s\n"</span> <span style="color: #e67128;">"${pid}"</span> <span style="color: #e67128;">"${stack_size}"</span> <span style="color: #e67128;">"${guard_page}"</span> <span style="color: #e67128;">"${used_size}"</span> <span style="color: #e67128;">"${thread_name}"</span>
    <span style="color: #ffad29; font-weight: bold;">done</span> &gt; ${<span style="color: #dbdb95;">tmpdir</span>}/stacksize.txt
    sort -r -k4,4 ${<span style="color: #dbdb95;">tmpdir</span>}/stacksize.txt
}

<span style="color: #00ede1; font-weight: bold;">finally_func</span>() {
    <span style="color: #dbdb95;">RET</span>=$<span style="color: #dbdb95;">?</span>
    <span style="color: #ffad29; font-weight: bold;">if</span> [ -d ${<span style="color: #dbdb95;">tmpdir</span>} ]; <span style="color: #ffad29; font-weight: bold;">then</span>
        rm -rf ${<span style="color: #dbdb95;">tmpdir</span>}
    <span style="color: #ffad29; font-weight: bold;">fi</span>
    <span style="color: #ffad29; font-weight: bold;">exit</span> ${<span style="color: #dbdb95;">RET</span>}
}

<span style="color: #ffad29; font-weight: bold;">trap</span> finally_func EXIT

<span style="color: #dbdb95;">PID</span>=$<span style="color: #dbdb95;">1</span>

ps ${<span style="color: #dbdb95;">PID</span>} | grep [j]ava &gt; /dev/null || {
    <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"-----------------------------------------------------------------------"</span>
    ps -ef  | grep [j]ava
    <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"-----------------------------------------------------------------------"</span>
    <span style="color: #23d7d7;">echo</span> -n <span style="color: #e67128;">"please input the java process id: "</span>
    <span style="color: #23d7d7;">read</span> PID
}

<span style="color: #23d7d7;">export</span> PID

<span style="color: #23d7d7;">export</span> <span style="color: #dbdb95;">tmpdir</span>=<span style="color: #fa8072;">`mktemp -d`</span>

<span style="color: #23d7d7;">export</span> <span style="color: #dbdb95;">threadtdump</span>=${<span style="color: #dbdb95;">tmpdir</span>}/${<span style="color: #dbdb95;">PID</span>}.tdump

jstack ${<span style="color: #dbdb95;">PID</span>} &gt; ${<span style="color: #dbdb95;">threadtdump</span>}

<span style="color: #23d7d7;">export</span> -f print_stacksize

watch <span style="color: #e67128;">"bash -c print_stacksize"</span>

rm -rf ${<span style="color: #dbdb95;">tmpdir</span>}
</pre>
</div>

<video controls>
   <source src="video/2015-08-05_jvm_stacksize1.mp4" />
</video>

<p>
一般的なアプリでは実行中スレッドの数が頻繁に変わらないので、これで満足しています。;-)
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Java]メモリswapによる無応答]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-29-%5Btips%5D%5Bjava%5D%E3%83%A1%E3%83%A2%E3%83%AAswap%E3%81%AB%E3%82%88%E3%82%8B%E7%84%A1%E5%BF%9C%E7%AD%94.html"/>
    <updated>2015-06-29T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][java]メモリswapによる無応答</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. 現象</a></li>
<li><a href="#sec-3">3. 分析するためのデータを取る</a></li>
<li><a href="#sec-4">4. 原因／考察</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<p>
業務用の開発サーバ
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">項目</th>
<th scope="col" class="left">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">CPU</td>
<td class="left">Intel(R) Core(TM)2 Duo CPU E8400 3.00GHz</td>
</tr>

<tr>
<td class="left">Core数</td>
<td class="left">2</td>
</tr>

<tr>
<td class="left">Memory</td>
<td class="left">7G弱</td>
</tr>

<tr>
<td class="left">OS</td>
<td class="left">Red Hat Enterprise Linux Server release 5.8 (Tikanga)</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Middleware</td>
<td class="left">java 1.7.0_75</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">Weblogic 10.3.5.0</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">Oracle BPM Suite 11g (メモリを多めに割り当てた：6Gぐらい)</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">※他にものもの結構乗っている</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 現象</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>特定のWeblogic管理対象サーバから応答が時々遅い(数秒程度)
</li>
<li>Full GCが起きると状況が悪化し、FullGCが終わらない
</li>
</ul>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 分析するためのデータを取る</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>GCログからParNew処理が5秒以上のレコードを時間を抽出する。
</li>
</ul>
<pre class="example">
2015-06-24T18:08:32.220+0900:  5.2666840
2015-06-25T01:50:56.578+0900:  5.6046080
2015-06-25T04:50:52.234+0900:  6.0052120
2015-06-25T12:05:52.068+0900:  9.2609380
2015-06-25T13:20:37.953+0900:  5.0946760
2015-06-25T13:20:58.403+0900:  5.6533820
2015-06-25T20:24:49.357+0900:  7.3204730
2015-06-25T21:16:10.126+0900:  6.7909460
2015-06-25T22:50:58.756+0900:  5.8355060
2015-06-26T01:50:50.893+0900:  9.3892250
2015-06-26T04:50:53.219+0900:  13.1395190
2015-06-26T07:50:54.425+0900:  11.7807430
2015-06-26T07:51:07.269+0900:  5.2793300
2015-06-26T10:50:51.114+0900:  9.3924480
2015-06-26T13:17:06.286+0900:  6.2010290
2015-06-26T13:17:54.396+0900:  7.3440480
2015-06-26T13:34:05.326+0900:  7.6791300
2015-06-26T13:51:04.590+0900:  10.2367630
2015-06-26T14:00:00.516+0900:  5.7046080
2015-06-26T14:00:13.463+0900:  6.6349530
2015-06-26T14:23:00.180+0900:  5.6609030
2015-06-26T14:26:28.796+0900:  7.6549640
2015-06-26T14:27:00.169+0900:  11.8500770
2015-06-26T14:29:39.363+0900:  7.1499710
2015-06-26T14:30:24.067+0900:  5.6382340
2015-06-26T14:31:45.304+0900:  10.1924060
2015-06-26T14:32:00.774+0900:  9.6242400
2015-06-26T16:51:18.422+0900:  9.6966490
2015-06-26T16:51:45.363+0900:  6.2090530
2015-06-26T18:30:49.993+0900:  6.2954670
2015-06-26T18:38:00.437+0900:  8.8749850
2015-06-26T18:50:00.391+0900:  7.4192490
2015-06-26T18:54:00.271+0900:  6.4426840
2015-06-26T18:54:08.234+0900:  5.7452440
2015-06-27T01:50:50.387+0900:  5.8063930
2015-06-27T01:51:05.004+0900:  5.2115420
2015-06-27T04:50:58.781+0900:  12.9891770
2015-06-27T04:51:35.039+0900:  5.7282510
2015-06-27T07:50:51.112+0900:  13.1250670
2015-06-27T07:51:06.604+0900:  6.5727200
2015-06-27T07:51:29.483+0900:  5.3706130
2015-06-27T07:51:36.469+0900:  7.0014700
2015-06-27T07:51:49.055+0900:  7.4964390
2015-06-27T07:52:01.446+0900:  5.2537540
2015-06-27T08:01:04.920+0900:  21.8820470
2015-06-27T09:53:02.648+0900:  7.4830120
2015-06-27T10:50:52.478+0900:  12.4821770
2015-06-27T10:51:07.595+0900:  6.6430700
2015-06-27T10:51:34.192+0900:  5.4682220
2015-06-27T10:51:59.431+0900:  5.8981600
2015-06-27T13:50:54.701+0900:  13.1269190
2015-06-27T13:52:23.353+0900:  6.3293780
2015-06-27T16:46:06.634+0900:  7.5433970
2015-06-28T04:51:06.881+0900:  5.2944910
2015-06-28T13:50:55.136+0900:  7.2090390
2015-06-28T16:50:52.379+0900:  6.3410470
2015-06-28T17:01:07.773+0900:  6.1038880
2015-06-28T19:50:50.750+0900:  7.1304960
2015-06-28T19:50:59.538+0900:  14.1206920
2015-06-28T19:51:39.786+0900:  7.8585130
2015-06-28T20:10:05.988+0900:  5.1535220
2015-06-28T22:46:07.996+0900:  6.3876340
2015-06-28T22:50:56.687+0900:  5.4313050
2015-06-29T01:51:06.697+0900:  7.4033850
2015-06-29T05:24:56.775+0900:  6.1023960
2015-06-29T06:01:13.724+0900:  6.7346550
2015-06-29T07:16:11.399+0900:  21.2494760
2015-06-29T07:50:59.386+0900:  5.9733680
2015-06-29T10:11:13.076+0900:  10.1998490
2015-06-29T10:51:20.998+0900:  10.4616600
2015-06-29T11:02:06.230+0900:  6.6641290
</pre>

<p>
図形にPlotしてみたら、ParNewが高いGCの時間帯があんまり規則がないので、定期イベントに
よるものではないと判断した。
</p>


<div class="figure">
<p><img src="img/2015-06-29-ParNewGC_TimeChart.png" alt="2015-06-29-ParNewGC_TimeChart.png" />
</p>
</div>

<ul class="org-ul">
<li>FullGC時システムリソースの変化状況
</li>
</ul>
<pre class="example">
$ vmstat 5 60
 1|procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
 2| r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 3| 0  0 3379376 115268   9804 467464   12    9   107    34    1    1  8  2 89  1  0
 4| 0  0 3379376 113584   9808 468660    0    0   237    41  512  719  4  1 93  1  0
 5| 0  1 3377744  95484   9828 469060  749    0   825    15  567  793  5  1 78 16  0
 6| 0  1 3369436  80108   9836 469092 3175    0  3175    44  471  759  1  1 50 49  0
 7| 0  1 3360436  60896   9836 469072 3807    0  3807     3  451  776  0  1 49 49  0
 8| 0  1 3352216  48620   9844 465784 3375  155  3375   158  450  744  0  1 50 49  0
 9| 0  1 3347272  51844   9804 450912 2879  874  2879   878  568  739  1  2 49 49  0
10| 0  1 3339972  49380   9652 444336 2601  541  2601   558  551  697  0  1 47 52  0
11| 1  1 3336692  50752   9560 434856 2364  768  2364   768  605  692  1  1 49 49  0
12| 1  1 3332740  52108   9416 425016 2293  761  2293   791  604  682  1  1 49 49  0
13| 0  1 3325100  52224   9400 412236 3399  662  3399   675  564  730  0  1 50 49  0
14| 0  1 3320168  48248   9336 405168 2868  530  2868   533  513  717  0  1 49 49  0
</pre>
<p>
5行目はFullGC実施のタイミングです。5行目以降si/so/si/boの数値が上がる。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 原因／考察</h2>
<div class="outline-text-2" id="text-4">
<p>
swpd列の値を見れば原因は明白ですね、物理メモリが足らずJavaプロセスのメモリが大半スワー
プアウトされた、FullGCを掛けるとオブジェクトの参照を検査するためにヒープ全体を舐める。
メモリから追い出されたヒープメモリをディスクから読み戻し、また読み戻した分の領域を確
報するため、相対的に使っていないメモリをディスクに追い出す処理が激しく繰り返した。
</p>

<ul class="org-ul">
<li>Javaプロセスのヒープ／Permに物理メモリの容量以上を割り当てしては行けない
</li>
<li>Swapと共にFullGCが起きると、 <code>kill -9</code> で強制停止する
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]journaldエラーログをメールで通知する]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-28-%5Btips%5D%5Blinux%5Djournald%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%AD%E3%82%B0%E3%82%92%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%A7%E9%80%9A%E7%9F%A5%E3%81%99%E3%82%8B.html"/>
    <updated>2015-06-28T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]journaldエラーログをメールで通知する</id>
    <content type="html"><![CDATA[<p>
systemdを採用しているdistroのシステムログがjournaldを一元管理してくれる。
</p>

<ul class="org-ul">
<li><a href="http://enakai00.hatenablog.com/entry/20141130/1417310904">RHEL7/CentOS7のjournaldについてのもろもろ</a>
</li>
<li><a href="http://www.school.ctc-g.co.jp/columns/nakai/nakai56.html">第56回　RHEL7/CentOS7のjournaldでシステムログを一元管理 (中井悦司)</a>
</li>
</ul>

<p>
ただし、journaldにエラーログを通知する機能が持っていないため監視通知のし掛けが必要で
す。
</p>

<ol class="org-ol">
<li>journaldログをsyslogに転送し、従来のsyslog監視方法を適用する
</li>
<li>独自のスクリプトで実現する
</li>
</ol>

<p>
自宅のサーバは下記スクリプトでエラーログの通知機能を実現しています。
</p>

<p>
<code>/etc/cron.hourly/journal_error</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #00cd66;">#</span><span style="color: #00cd66;">!/bin/</span><span style="color: #ffffff;">sh</span>

<span style="color: #00cd66;"># </span><span style="color: #00cd66;">&#19968;&#26178;&#20197;&#20869;&#12398;&#12456;&#12521;&#12540;&#12525;&#12464;&#12434;&#27161;&#28310;&#20986;&#21147;&#12392;/var/log/journal_error&#12501;&#12449;&#12452;&#12523;&#12408;&#20986;&#21147;&#12377;&#12427;</span>
journalctl -o short-iso -p err --since -1hours 2&gt;/dev/null | tail -n+2 | tee -a /var/log/journal_error
</pre>
</div>

<p>
journalctl コマンドを駆使して１時間以内のエラーログを標準出力に出力するスクリプト。
これをcronの時間単位ジョブディレクトリ <code>/etc/cron.hourly</code> に登録する。
あとはcronのメール通知機能を有効化するだけです。
</p>

<p>
cronのメール通知先は <code>/etc/cron.d/0hourly</code> の <code>MAILTO</code> 項目にて指定する。
</p>
<div class="org-src-container">

<pre class="src src-sh">$ cat /etc/cron.d/0hourly
<span style="color: #00cd66;"># </span><span style="color: #00cd66;">Run the hourly jobs</span>
<span style="color: #9acd32;">SHELL</span>=/bin/bash
<span style="color: #9acd32;">PATH</span>=/sbin:/bin:/usr/sbin:/usr/bin
<span style="color: #9acd32;">MAILTO</span>=&lt;&lt;&#12513;&#12540;&#12523;&#12398;&#36865;&#20449;&#20808;&#12434;&#12371;&#12371;&#12395;&#26360;&#12367;&gt;&gt;
<span style="color: #ffff00; font-weight: bold;">1 * * * * root run-parts /etc/cron.hourly</span>
</pre>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[まとめ]Linuxシステム時刻について]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-27-%5B%E3%81%BE%E3%81%A8%E3%82%81%5Dlinux%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%99%82%E5%88%BB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html"/>
    <updated>2015-06-27T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[まとめ]linuxシステム時刻について</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. ハードウェアクロック／システムクロックの違い</a></li>
<li><a href="#sec-2">2. 時刻の表示仕様</a></li>
<li><a href="#sec-3">3. 時刻表示／調整関連コマンド</a>
<ul>
<li><a href="#sec-3-1">3.1. NTP時刻同期化を自動化する</a></li>
<li><a href="#sec-3-2">3.2. タイムゾーンの変更</a></li>
<li><a href="#sec-3-3">3.3. ハードウェアクロックとの同期化</a></li>
</ul>
</li>
<li><a href="#sec-4">4. 時刻関連ファイル</a></li>
<li><a href="#sec-5">5. デュアルブートの注意点</a></li>
<li><a href="#sec-6">6. NTPサーバの構築</a></li>
<li><a href="#sec-7">7. システムコール</a></li>
<li><a href="#sec-8">8. カーネルの実装について</a></li>
<li><a href="#sec-9">9. 参考</a></li>
</ul>
</div>
</div>
<p>
Linuxシステム時刻に関わる知識やリソースのまとめです。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> ハードウェアクロック／システムクロックの違い</h2>
<div class="outline-text-2" id="text-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">クロック種別</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">ハードウェアクロック</td>
<td class="left">* マザーボード上のICによって提供される時計です。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 通常は電池でバックアップして駆動されるので、電源をお落としても時計が進みます。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* RTC（Real Time Clock）、BIOS、CMOSクロックとも呼ばれる。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">システムクロック</td>
<td class="left">* Linux カーネルの内部に存在している時計で、 タイマ割り込みによって駆動されている</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* Linux システムは起動時に一度だけハードウェア・クロックを参照し、 システム・クロックを設定する。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 精度の高いクロック、1GHz以上のCPUの場合1クロックは1ナノ秒のなります。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 時刻は1970/01/01T00:00:00からの経過時間を秒単位／ナノ秒単位で保持される。</td>
</tr>
</tbody>
</table>

<p>
ハードウェアクロック持っていないボードも存在する。RaspberryPiボードはその一つです、
RTCが必要な場合、別途RTCモジュールを導入しなければいけません。<a href="#fn2">2</a>
</p>

<p>
RaspberryPiで <code>hwclock</code> コマンドでハードウェアクロックを参照すると <code>/dev/rtc</code> デバイ
スがない旨のメッセージが表示された。
</p>
<pre class="example">
$ sudo hwclock --debug
hwclock from util-linux 2.26.2
hwclock: cannot open /dev/rtc: No such file or directory
No usable clock interface found.
hwclock: Cannot access the Hardware Clock via any known method.
</pre>

<p>
RaspberryPiはNTPサーバから時刻同期のし掛けが必要です。そしないとシステムクロックが
POSIXにおける紀元時刻(Epoch; 1970-01-01 00:00:00 +0000 (UTC))に設定されてしまう。
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 時刻の表示仕様</h2>
<div class="outline-text-2" id="text-2">
<p>
systemdに導入された <code>timdatectl</code> コマンドでシステム時刻の各種表示形式を確認する。
</p>
<pre class="example">
$ timedatectl
      Local time: 土 2015-06-27 23:55:12 JST
  Universal time: 土 2015-06-27 14:55:12 UTC
        RTC time: 土 2015-06-27 14:55:12
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
各時刻項目について
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">正式名称</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Universal time</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E5%8D%94%E5%AE%9A%E4%B8%96%E7%95%8C%E6%99%82">協定世界時</a> (UTC)</td>
<td class="left">UTC は GMT (グリニッジ標準時, Greenwich Mean Time) とも言われます</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">協定世界時は、国際度量衡局 (BIPM) が維持する時刻系であり、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">協定された標準周波数と報時信号発射の基礎になっている。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Local time</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E6%99%82">標準時</a></td>
<td class="left">ある国または広い地域が共通で使う地方時、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">世界各地の標準時は協定世界時 (UTC) を基準として決めている。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">例えば、日本標準時 (JST) は協定世界時より9時間進んでおり、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">「+0900 (JST)」のように表示する。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">DST</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E5%A4%8F%E6%99%82%E9%96%93">夏時間</a></td>
<td class="left">daylight saving time</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">1年のうち夏を中心とした期間に、太陽の出ている時間帯を有効に利用する目</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">的で、標準時を1時間進める制度、またはその進められた時刻のこと。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">緯度が高く夏の日照時間が長い欧米諸国などで多く導入されている。<a href="#fn10">10</a></td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">Linuxシステムにタイムゾーンを指定すれば自動的にDST時間を表示してくれる。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">RTC time</td>
<td class="left">リアルタイムクロック</td>
<td class="left">前述のハードウェアクロックです。</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 時刻表示／調整関連コマンド</h2>
<div class="outline-text-2" id="text-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">コマンド名</th>
<th scope="col" class="left">概要</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">date</td>
<td class="left">システムクロックの表示／変更</td>
</tr>

<tr>
<td class="left">hwclock</td>
<td class="left">ハードウェアクロックの表示／変更</td>
</tr>

<tr>
<td class="left">ntpdate</td>
<td class="left">NTPサーバから時刻を同期化するクライアントツール</td>
</tr>

<tr>
<td class="left">timedatectl</td>
<td class="left">上記機能全て統括的に行えるツール</td>
</tr>

<tr>
<td class="left">adjtimex</td>
<td class="left">Displays or sets the kernel time variable</td>
</tr>
</tbody>
</table>

<p>
時刻の表示／調整／同期化などは <code>timedatectl</code> で全て出来る。
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> NTP時刻同期化を自動化する</h3>
<div class="outline-text-3" id="text-3-1">
<pre class="example">
★set-ntpオプションで有効／無効を切り替える
$ sudo timedatectl set-ntp true

★状態確認
$ sudo timedatectl status
      Local time: 日 2015-06-28 00:19:26 JST
  Universal time: 土 2015-06-27 15:19:26 UTC
        RTC time: 土 2015-06-27 15:19:26
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes                      ★NTP時刻同期化有効の状態
NTP synchronized: yes                      ★NTP時刻同期化済み
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
上記コマンドより <code>systemd-timesyncd.service</code> が有効化される。
<code>/usr/lib/systemd/systemd-timesyncd</code> デーモンプロセスがNTPクライアントとして動作し定
期的にNTPサーバから時刻を同期化する。
</p>
<pre class="example">
$ systemctl status systemd-timesyncd.service
● systemd-timesyncd.service - Network Time Synchronization
   Loaded: loaded (/usr/lib/systemd/system/systemd-timesyncd.service; enabled; vendor preset: enabled)
   Active: active (running) since 土 2015-06-27 19:29:29 JST; 4h 57min ago
     Docs: man:systemd-timesyncd.service(8)
 Main PID: 8787 (systemd-timesyn)
   Status: "Using Time Server 213.239.154.12:123 (0.arch.pool.ntp.org)."
   CGroup: /system.slice/systemd-timesyncd.service
           └─8787 /usr/lib/systemd/systemd-timesyncd

 6月 27 19:29:29 mimi systemd[1]: Starting Network Time Synchronization...
 6月 27 19:29:29 mimi systemd[1]: Started Network Time Synchronization.
 6月 27 20:45:20 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 202.234.64.222:123 (0.arch.pool.ntp.org).
 6月 27 20:45:30 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 157.7.153.56:123 (0.arch.pool.ntp.org).
 6月 27 20:45:40 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 108.61.223.189:123 (0.arch.pool.ntp.org).
 6月 27 20:45:51 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 133.100.11.8:123 (0.arch.pool.ntp.org).
</pre>

<p>
NTPサーバは <code>/etc/systemd/timesyncd.conf</code> にて指定出来る。
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> タイムゾーンの変更</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Asia/Tokyoタイムゾーンの指定
</p>
<pre class="example">
★利用可能なゾーンの表示
$ timedatectl list-timezones
Africa/Abidjan
Africa/Accra
Africa/Addis_Ababa
Africa/Algiers
Africa/Asmara
Africa/Bamako
Africa/Bangui
Africa/Banjul
Africa/Bissau
Africa/Blantyre
（中略）

★タイムゾーンの指定、/etc/localtimeのリンク先が変わる
$ timedatectl set-timezone Asia/Tokyo

★タイムゾーンの確認
$ timedatectl status
      Local time: 日 2015-06-28 17:57:04 JST
  Universal time: 日 2015-06-28 08:57:04 UTC
        RTC time: 日 2015-06-28 08:57:04
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
America/Los_Angelesタイムゾーンの指定、「＊」部分は夏時間です。
</p>
<pre class="example">
  |$ timedatectl  set-timezone America/Los_Angeles
  |[akira@mimi ~]$ timedatectl status
  |      Local time: 日 2015-06-28 01:54:09 PDT
  |  Universal time: 日 2015-06-28 08:54:09 UTC
  |        RTC time: 日 2015-06-28 08:54:09
  |       Time zone: America/Los_Angeles (PDT, -0700)
  |     NTP enabled: yes
  |NTP synchronized: yes
  | RTC in local TZ: no
＊|      DST active: yes
＊| Last DST change: DST began at
＊|                  日 2015-03-08 01:59:59 PST
＊|                  日 2015-03-08 03:00:00 PDT
＊| Next DST change: DST ends (the clock jumps one hour backwards) at
＊|                  日 2015-11-01 01:59:59 PDT
＊|                  日 2015-11-01 01:00:00 PST
</pre>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> ハードウェアクロックとの同期化</h3>
<div class="outline-text-3" id="text-3-3">
<p>
ハードウェアクロックの時刻をUTCとして扱うように <code>/etc/adjtime</code> ファイルを更新する。
また、システムクロック時刻をハードウェアクロックに書き戻す。
</p>
<pre class="example">
$ timedatectl set-local-rtc false
</pre>


<p>
<code>/etc/adjtime</code> ファイルの３行目がUTCでマークされた。
</p>
<pre class="example">
$ cat /etc/adjtime
0.000000 0 0.000000
0
UTC                                ★ハードウェアクロックがUTC時刻として扱う
</pre>

<p>
RTC が localtime だった場合予期せぬバグを引き起こす可能性があるため、最近のカーネルは
<code>/etc/adjtime</code> ファイルに設定値がない場合 RTC を UTC としてみなします。 <code>hwclock</code> コ
マンドに&#x2013;debugオプションを付けるとハードウェアクロックがどうのように扱われるかを確認
することが出来ます。
</p>

<p>
ハードウェアクロックの値をUTC時刻として扱い、表示時に <code>/etc/localtime</code> に持っている
タイムゾーン情報を元にローカル時刻で表示する。
</p>
<pre class="example">
$ hwclock --show --debug
hwclock from util-linux 2.26.2
クロックの /dev インターフェイス を使用中。
ハードウェアの時刻が UTC に設定されているものと仮定します。
クロックティックを待っています...
...クロックティックを取得しました
ハードウェアの時計から読み込んだ時刻: 2015/06/27 15:44:18
ハードウェアの時刻値 : 2015/06/27 15:44:18 = 1969 年から 1435419858 秒経過
Time since last adjustment is 1435419858 seconds
Calculated Hardware Clock drift is 0.000000 seconds
2015年06月28日 00時44分17秒  .665140 秒
</pre>

<p>
以下 <code>/etc/adjtime=</code> の設定値を明示された場合 <code>hwclock</code> の出力です。「*」部分が差分で
す。
</p>
<pre class="example">
 |$ hwclock -r --debug
 |hwclock from util-linux 2.26.2
 |クロックの /dev インターフェイス を使用中。
*|直前のズレの修正は、 1969 年から 0 秒経過した時点で行なわれました
*|直前の調整は 1969 年から 0 秒経過した時点で行なわれました
*|ハードウェアの時刻は UTC です
 |ハードウェアの時刻が UTC に設定されているものと仮定します。
 |クロックティックを待っています...
 |...クロックティックを取得しました
 |ハードウェアの時計から読み込んだ時刻: 2015/06/27 16:05:20
 |ハードウェアの時刻値 : 2015/06/27 16:05:20 = 1969 年から 1435421120 秒経過
 |Time since last adjustment is 1435421120 seconds
 |Calculated Hardware Clock drift is 0.000000 seconds
 |2015年06月28日 01時05分19秒  .432450 秒
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 時刻関連ファイル</h2>
<div class="outline-text-2" id="text-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">ファイル</th>
<th scope="col" class="left">役割</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">/etc/localtime</td>
<td class="left">ローカル時刻（標準時）に適用するタイムゾーン情報</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">/etc/adjtime</td>
<td class="left">ハードウェアクロック情報を保持するファイル、詳細について</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">man hwclockのThe Adjust Functionセクションにて確認出来る</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">/dev/rtc</td>
<td class="left">ハードウェアクロックデバイスファイル</td>
</tr>

<tr>
<td class="left">/dev/rtc0</td>
<td class="left">同上</td>
</tr>

<tr>
<td class="left">/dev/misc/rtc</td>
<td class="left">同上</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> デュアルブートの注意点</h2>
<div class="outline-text-2" id="text-5">
<p>
以下 からの抜粋
</p>
<pre class="example">
windows はハードウェア クロックのタイムゾーンを、暗黙裡にローカル タイムであると認識
します。 Linux のようにタイムゾーンを選択(UTC or ローカルタイム)できる機能はありませ
ん。

そのため windows を含むマルチ ブート環境では、ハードウェア クロックのタイムゾーンを
UTCとすることは不可能(ローカルタイム固定)で、他のOSが windows の作法に合わせる必要が
あります。
</pre>

<p>
日本の場合、システムをWindowsモードで起動したとして、次回Linux起動した後のシステム時
刻がローカル時刻より９時間早まる。
</p>

<p>
回避方法: <a href="https://archlinuxjp.kusakata.com/wiki/%25E6%2599%2582%25E5%2588%25BB#Windows_.E3.81.A7_UTC_.E3.82.92.E4.BD.BF.E3.81.86">Windows で UTC を使う</a>
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> NTPサーバの構築</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><a href="https://archlinuxjp.kusakata.com/wiki/Network_Time_Protocol_daemon">Network Time Protocol daemon</a>
</li>
<li><a href="http://qiita.com/yunano/items/7883cf295f91f4ef716b">新しいNTPクライアント＆サーバ、chrony</a>
</li>
<li><a href="http://jp.fujitsu.com/platform/server/sparc/manual/notes/pdf/ntpguide.pdf">NTP運用ガイド for Oracle Solaris</a>
</li>
<li><a href="http://nayamibito.hatenablog.com/entry/2013/12/31/161027">Linux学習記　その3　NTPについて学んでみる。</a>
</li>
<li><a href="http://d.hatena.ne.jp/incarose86/touch/20110505/1312522379">NTP設定</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> システムコール</h2>
<div class="outline-text-2" id="text-7">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">関数名</th>
<th scope="col" class="left">機能概要</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/gettimeofday.2.html">gettimeofday</a></td>
<td class="left">システム時刻を取得する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/gettimeofday.2.html">settimeofday</a></td>
<td class="left">システム時刻を設定する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">time</td>
<td class="left">秒単位の時間を得る</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man3/strftime.3.html">strftime</a></td>
<td class="left">日付および時刻の文字列への変換</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/adjtimex.2.html">adjtimex</a></td>
<td class="left">カーネルの時計を調整する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man3/clock.3.html">clock</a></td>
<td class="left">プログラムの使用したプロセッサ時間の近似値を返す</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">asctime</td>
<td class="left">日付と時刻を要素別の時刻や ASCII に変換する</td>
</tr>

<tr>
<td class="left">ctime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">gmtime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">localtime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">mktime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">asctime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">ctime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">gmtime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">localtime_r</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> カーネルの実装について</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li><a href="http://enakai00.hatenablog.com/entry/20111117/1321508379">Ticklessカーネルとクロックソースに関するお話</a>
</li>
<li><a href="http://www.valinux.co.jp/technologylibrary/document/linuxkernel/timer0002/#n1">カーネルにおけるタイマー事情 ～第2回 カーネル内の時刻/時間関連サブシステム～</a>
</li>
<li><a href="https://www.ujiya.net/linux/067">jiffies更新を追いかける</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> 参考</h2>
<div class="outline-text-2" id="text-9">
</div><ol class="org-ol"><li><a id="fn1" name="fn1"></a><a id="sec-9-0-0-1" name="sec-9-0-0-1"></a><a href="http://www.atmarkit.co.jp/ait/articles/0812/26/news120.html">Linux時刻管理の仕組みと設定</a><br  /><div class="outline-text-5" id="text-fn1">
</div>
</li>
<li><a id="fn2" name="fn2"></a><a id="sec-9-0-0-2" name="sec-9-0-0-2"></a><a href="http://qiita.com/key/items/06c2915de55d6155aa54">RaspberryPiにRTCモジュールを搭載して、ハードウェア起動時に時刻を合わせる</a><br  /><div class="outline-text-5" id="text-fn2">
</div>
</li>
<li><a id="sec-9-0-0-3" name="sec-9-0-0-3"></a><a href="http://hs-it-notes.blogspot.jp/2014/01/raspberry-pi.html">Raspberry Piにリアルタイムクロックをインストールする</a><br  /></li>
<li><a id="sec-9-0-0-4" name="sec-9-0-0-4"></a><a href="http://linuxjm.osdn.jp/html/util-linux/man8/hwclock.8.html">HWCLOCK 日本語MAN ページ</a><br  /></li>
<li><a id="sec-9-0-0-5" name="sec-9-0-0-5"></a><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man4/rtc.4.html">RTC 日本語MAN ページ</a><br  /></li>
<li><a id="sec-9-0-0-6" name="sec-9-0-0-6"></a><a href="https://www.kernel.org/doc/Documentation/rtc.txt">Kernel Document - rtx.txt</a><br  /></li>
<li><a id="sec-9-0-0-7" name="sec-9-0-0-7"></a><a href="http://archive.linux.or.jp/JF/JFdocs/Clock/time-tracking.html">Linux はどのように時間を計っているのか</a><br  /></li>
<li><a id="sec-9-0-0-8" name="sec-9-0-0-8"></a><a href="https://wiki.archlinux.org/index.php/Time">Archlinu - Time</a><br  /></li>
<li><a id="sec-9-0-0-9" name="sec-9-0-0-9"></a><a href="http://park12.wakwak.com/~eslab/pcmemo/clock/clock3.html">パソコンの時計　ハードウェア クロックとシステム クロック</a><br  /></li>
<li><a id="fn10" name="fn10"></a><a id="sec-9-0-0-10" name="sec-9-0-0-10"></a><a href="http://www.time-j.net/uc/dst/">世界の国のサマータイムの導入状況について</a><br  /><div class="outline-text-5" id="text-fn10">
</div>
</li></ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]JavaBeans仕様を再認識する]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-13-%5B%E3%83%A1%E3%83%A2%5Djavabeans%E4%BB%95%E6%A7%98%E3%82%92%E5%86%8D%E8%AA%8D%E8%AD%98%E3%81%99%E3%82%8B.html"/>
    <updated>2015-06-13T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]javabeans仕様を再認識する</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 仕様のゴール</a></li>
<li><a href="#sec-2">2. JavaBeansとは</a></li>
<li><a href="#sec-3">3. JavaBeansの出番</a></li>
<li><a href="#sec-4">4. APIパッケージの概要</a></li>
<li><a href="#sec-5">5. よく出てくるクラス</a></li>
<li><a href="#sec-6">6. サードパーティライブラリ</a></li>
<li><a href="#sec-7">7. 参考情報</a></li>
</ul>
</div>
</div>
<p>
勉強メモ
</p>

<p>
<!-- more -->
</p>

<p>
JCPサイト <code>JavaBeans</code> で検索したら <a href="https://jcp.org/en/jsr/summary?id=javabeans">;-(</a> EJBの仕様しかなかったで、JavaBeans APIで検索
するとヒットしました。
</p>

<p>
これがが一番わかり易いと思います。→ <a href="http://otndnld.oracle.co.jp/tech/java/htdocs/java_roadmap/javabean/listing.htm">Oracle Javaロードマップ:JavaBeans</a>
</p>

<p>
公式の仕様はここ → <a href="http://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/">JavaBeans Spec</a>
</p>

<p>
仕様変更履歴
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">&#xa0;</th>
<th scope="col" class="right">仕様のバージョン</th>
<th scope="col" class="left">JDKバージョン</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1996</td>
<td class="right">1.0.0</td>
<td class="left">JDK1.1</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="right">1997</td>
<td class="right">1.0.1</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>
<p>
<a href="http://ja.wikipedia.org/wiki/Java_Community_Process">JCP設立</a> されるまで策定された仕様なのでJSR番号が付いていないですね。
1997以降仕様更新あり？なし？分からない、掲示がないので恐らく大きな更新がないでしょう。
</p>

<p>
PDF版は114ページで結構のボリュームです。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 仕様のゴール</h2>
<div class="outline-text-2" id="text-1">
<p>
JavaBeans Specより
</p>
<pre class="example">
The goal of the JavaBeans APIs is to define a software component model for Java, so
that thirdparty ISVs can create and ship Java components that can be composed
together into applica-tions by end users.
</pre>

<p>
<a href="http://otndnld.oracle.co.jp/tech/java/htdocs/java_roadmap/glossary.htm#434709">オラクルの用語集より</a>
</p>
<pre class="example">
Javaで作成された移植可能なプラットフォームに依存しないコンポーネント・モデルで、
JavaBean仕様に従う。 再使用可能なコンポーネントを作成できる。
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> JavaBeansとは</h2>
<div class="outline-text-2" id="text-2">
<p>
JavaBeans Specの2.1 What is a Bean?より
</p>
<pre class="example">
Let's start with an initial definition and then refine it:
“A Java Bean is a reusable software component that can be manipulated visually in a builder tool.”
This covers a wide range of different possibilities.
The builder tools may include web page builders, visual application builders, GUI layout build-
ers, or even server application builders. Sometimes the “builder tool” may simply be a docu-
ment editor that is including some beans as part of a compound document.
Some Java Beans may be simple GUI elements such as buttons and sliders. Other Java Beans
may be sophisticated visual software components such as database viewers, or data feeds.
Some Java Beans may have no GUI appearance of their own, but may still be composed togeth-
er visually using an application builder.
Some builder tools may operate entirely visually, allowing the direct plugging together of Java
Beans. Other builders may enable users to conveniently write Java classes that interact with and
control a set of beans. Other builders may provide a simple scripting language to allow easy
high-level scripting of a set of beans.
Individual Java Beans will vary in the functionality they support, but the typical unifying fea-
tures that distinguish a Java Bean are:
•  Support for "introspection" so that a builder tool can analyze how a bean works
•  Support for "customization" so that when using an application builder a user can
   customize the appearance and behaviour of a bean.
•  Support for "events"  as a simple communication metaphor than can be used to connectup beans.
•  Support for "properties", both for customization and for programmatic use.
•  Support for persistence, so that a bean can be customized in an application builder and
   then have its customized state saved away and reloaded later.

A bean is not required to inherit from any particular base class or interface. Visible beans must
inherit from java.awt.Component so that they can be added to visual containers, but invisible
beans (see 2.7 below) aren’t required to do this.
Note that while beans are primarily targeted at builder tools they are also entirely usable by hu-
man programmers. All the key APIs such as events, properties, and persistence, have been de-
signed to work well both for human programmers and for builder tools.
Many beans will have a strong visual aspect, in both the application builder and in the final con-
structed application, but while this is common it is not required
</pre>
<p>
なんとなくAWT/SwingのGUI系コンポネント向けの仕様ですね。
</p>

<p>
現在はAWT/Swing/JSFなどMVCアーキテクチャのモデルとして利用することが多いいでしょう。
</p>

<ul class="org-ul">
<li>JSFからJavaBeansの利用例
<pre class="example">
&lt;tr:inputText valueChangeListener="#{myBean.valueChangeHandler}" value="#{myBean.value}"/&gt;
</pre>
</li>

<li>Swing/AWT
<ul class="org-ul">
<li>Swing/AWTにJButtonからはじめ多くのGUIコンポネントがJavaBeansの仕様に基づいている。
</li>
<li><a href="http://www.wakhok.ac.jp/~tatsuo/JavaWorld/11th/bean.html">2-2 JavaBeansとしての Swingコンポーネント</a>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> JavaBeansの出番</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>JavaBeansのインスタンス化 (constructor)
</li>
<li>JavaBeansプロパティの設定 (setter/getter)
</li>
<li>メソッドの起動 (normal method)
</li>
<li>イベントのイベント・ハンドラの登録
</li>
</ol>

<p>
※Oracle JDeveloperを使うとJavaBeans作成用の専用ウィザードが提供されている
</p>

<p>
4がピンとこないですね。下記の例で理解できると思います。
</p>

<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffffff;">public</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">MyBean</span> {

     <span style="color: #ffffff;">private</span> <span style="color: #ffffff;">final</span> <span style="color: #7fffd4;">PropertyChangeSupport</span> <span style="color: #9acd32;">pcs</span> = <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">PropertyChangeSupport</span>(<span style="color: #ffffff;">this</span>);

     <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">addPropertyChangeListener</span>(<span style="color: #7fffd4;">PropertyChangeListener</span> <span style="color: #9acd32;">listener</span>) {
         <span style="color: #ffffff;">this</span>.pcs.addPropertyChangeListener(listener);
     }

     <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">removePropertyChangeListener</span>(<span style="color: #7fffd4;">PropertyChangeListener</span> <span style="color: #9acd32;">listener</span>) {
         <span style="color: #ffffff;">this</span>.pcs.removePropertyChangeListener(listener);
     }

     <span style="color: #ffffff;">private</span> <span style="color: #7fffd4;">String</span> <span style="color: #9acd32;">value</span>;

     <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">String</span> <span style="color: #98fb98;">getValue</span>() {
         <span style="color: #ffffff;">return</span> <span style="color: #ffffff;">this</span>.value;
     }

     <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">setValue</span>(<span style="color: #7fffd4;">String</span> <span style="color: #9acd32;">newValue</span>) {
         <span style="color: #7fffd4;">String</span> <span style="color: #9acd32;">oldValue</span> = <span style="color: #ffffff;">this</span>.value;
         <span style="color: #ffffff;">this</span>.value = newValue;
         <span style="color: #ffffff;">this</span>.pcs.firePropertyChange(<span style="color: #bdb76b;">"value"</span>, oldValue, newValue);
     }
}

<span style="color: #ffffff;">public</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">MyBeanTest</span> {
    <span style="color: #ffffff;">static</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">MyBeanPropertyListener</span> <span style="color: #ffffff;">implements</span> <span style="color: #7fffd4;">PropertyChangeListener</span> {

        <span style="color: #40e0d0;">@Override</span>
        <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">propertyChange</span>(<span style="color: #7fffd4;">PropertyChangeEvent</span> <span style="color: #9acd32;">evt</span>) {
            System.out.println(<span style="color: #bdb76b;">"evt.getPropertyName() = "</span> +  evt.getPropertyName());
            System.out.println(<span style="color: #bdb76b;">"evt.getSource()       = "</span> + evt.getSource());
            System.out.println(<span style="color: #bdb76b;">"evt.getOldValue()     = "</span> + evt.getOldValue());
            System.out.println(<span style="color: #bdb76b;">"evt.getNewValue()     = "</span> + evt.getNewValue());
        }
    }
    <span style="color: #ffffff;">public</span> <span style="color: #ffffff;">static</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">main</span>(<span style="color: #7fffd4;">String</span>[] <span style="color: #9acd32;">args</span>) {
        <span style="color: #7fffd4;">MyBean</span> <span style="color: #9acd32;">myBean</span> = <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">MyBean</span>();
        myBean.addPropertyChangeListener(<span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">MyBeanPropertyListener</span>());
        myBean.setValue(<span style="color: #bdb76b;">"hello"</span>);
    }
}
</pre>
</div>

<p>
<code>MyBean</code> のvalue属性変更時にPropertyChangeEventを発火させ、MyBeanPropertyListenerでイ
ベントをハンドリングする。Web開発用MVCフレームワークでもよく利用されている。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> APIパッケージの概要</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://docs.oracle.com/javase/jp/7/api/java/beans/package-summary.html">JavaDoc</a> より
</p>
<pre class="example">
パッケージ java.beans の説明
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
JavaBeans™ アーキテクチャーに基づいたコンポーネントである Bean の開発に関連したクラス
が含まれています。一部のクラスは、アプリケーションの実行中に Bean によって使用されま
す。たとえば、イベントクラスは、プロパティーと拒否可能な変更イベントをトリガーする
Bean によって使用されます (PropertyChangeEvent を参照)。しかし、このパッケージに含ま
れるほとんどのクラスは、Bean エディタ (アプリケーションを作成するために Bean のカスタ
マイズおよび組み合わせを行う開発環境) 用です。こうしたクラスを使用すれば、Bean エディ
タで Bean のカスタマイズ用ユーザーインタフェースを簡単に作成できます。たとえば、Bean
エディタでは処理できない特殊な型のプロパティーを持つ Bean があるとします。この場合、
Bean 開発者は PropertyEditor インタフェースを使って、この特殊な型のエディタを提供でき
ます。

Bean による消費リソースを最小限に抑えるため、Bean エディタによって使用されるクラスが
読み込まれるのは、Bean の編集時だけとなります。アプリケーションで Bean が実行されてい
るときは必要ないため、読み込まれません。この情報は、Bean 情報 (BeanInfo を参照) に保
管されます。

明示しない限り、null 値または空の文字列は、このパッケージのメソッドで有効なパラメータ
ではありません。そのようなパラメータが使用されると、例外が発生する可能性があります。
</pre>

<p>
イマイチですね、わかりづらい
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> よく出てくるクラス</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>java.beans.PropertyDescriptor
<div class="org-src-container">

<pre class="src src-java"><span style="color: #7fffd4;">PropertyDescriptor</span> <span style="color: #9acd32;">nameProp</span> = <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">PropertyDescriptor</span>(<span style="color: #bdb76b;">"value"</span>, MyBean.<span style="color: #ffffff;">class</span>);
System.out.println(nameProp.getReadMethod().invoke(myBean));
System.out.println(nameProp.getWriteMethod().invoke(myBean, <span style="color: #bdb76b;">"goodbye"</span>));
System.out.println(nameProp.getReadMethod().invoke(myBean));
</pre>
</div>
</li>
<li>java.beans.PropertyChangeListener
PropertyChange イベントは、Bean が「バウンド」プロパティーを変更するたびにトリガーされます。
</li>
<li>java.beans.PropertyChangeEvent
Bean が「バウンド」プロパティーまたは「制約」プロパティーを変更するたびに送信されます。
</li>

<li>PropertyChangeSupport
バウンドプロパティーをサポートする Bean で使用できるユーティリティークラスです。
PropertyChangeSupport インスタンスはスレッドセーフです。このクラスは直列化可能です。
直列化した場合、直列化可能なリスナーが保存および復元されます。直列化の際、直列化可能
でないリスナーはスキップされます。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> サードパーティライブラリ</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><a href="http://commons.apache.org/proper/commons-beanutils/">Apache Commons BeanUtils</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 参考情報</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li><a href="http://java.sun.com/docs/books/tutorial/javabeans/">『Java Tutorial』の続編</a>
</li>
<li><a href="http://docstore.mik.ua/orelly/java-ent/jnut/ch06_01.htm">Java™ in a Nutshell: A Deskop Quick Referenceの6章</a>
</li>
<li><a href="http://otndnld.oracle.co.jp/tech/java/htdocs/java_roadmap/javabean/listing.htm">Oracle Javaロードマップ:JavaBeans</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[調査]URLパラメータデコード処理について]]></title>
    <link href="http://luozengbin.github.io/blog/2015-05-14-%5B%E8%AA%BF%E6%9F%BB%5Durl%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E5%87%A6%E7%90%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html"/>
    <updated>2015-05-14T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[調査]urlパラメータデコード処理について</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. URLパラメータのエンコーディング仕様</a></li>
<li><a href="#sec-2">2. 文字化けの原因</a></li>
<li><a href="#sec-3">3. Tomcat7の実装</a>
<ul>
<li><a href="#sec-3-1">3.1. URIEncoding属性値</a></li>
<li><a href="#sec-3-2">3.2. useBodyEncodingForURI属性値</a></li>
<li><a href="#sec-3-3">3.3. 設定と挙動のまとめ</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Weblogic 11gの設定</a>
<ul>
<li><a href="#sec-4-1">4.1. 起動パラメータで指定する</a></li>
<li><a href="#sec-4-2">4.2. weblogic.xmlにて指定する</a></li>
<li><a href="#sec-4-3">4.3. ServletRequest.setCharacterEncoding(String env) APIで指定する</a></li>
<li><a href="#sec-4-4">4.4. ADFフレームワーク利用時の注意事項</a></li>
</ul>
</li>
<li><a href="#sec-5">5. 参考</a></li>
</ul>
</div>
</div>
<p>
URLパラメータの日本語文字が化けたので、APサーバのURLパラメータデコード処理について
調べました。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> URLパラメータのエンコーディング仕様</h2>
<div class="outline-text-2" id="text-1">
<p>
HTTPプロトコルのGETメソッドで通信する場合、URLパラメータをエンコーディングしなければ
いけません。その仕様は <a href="http://tools.ietf.org/html/rfc3986#section-2.1">rfc3986:Uniform Resource Identifier (URI): Generic Syntax</a> にて
定義されている。
</p>

<p>
例えばブラウザに下記URLを入力して送信する。
</p>
<pre class="example">
http://www.yahoo.co.jp/?param1=あきら
</pre>

<p>
パケットレベルで実際に送信された内容を確認するとURLに日本語パラメータ部分が<a href="http://ja.wikipedia.org/wiki/%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25BB%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0">パーセン
トエンコーディング</a>されていることが分かります。
</p>

<pre class="example">
GET http://www.yahoo.co.jp/?param1=%E3%81%82%E3%81%8D%E3%82%89 HTTP/1.1
Host: www.yahoo.co.jp
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: ja,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
</pre>

<p>
<code>param1=あきら</code> にマルチバイト部分が下記のイメージでエンコードされる。
</p>
<pre class="example">
+-------------------+-------------------+-------------------+
|       あ          |         き        |         ら        |
+-----+------+------+-----+------+------+-----+------+------+
| -29 | -127 | -126 | -29 | -127 | -155 | -29 | -126 | -119 | ← ステップ1
+-----+------+------+-----+------+------+-----+------+------+
| 0xe3| 0x81 | 0x82 | 0xe3| 0x81 | 0x8d | 0xe3| 0x82 | 0x89 | ← ステップ2
+-----+------+------+-----+------+------+-----+------+------+
| %E3 | %81  | %82  | %E3 | %81  | %8D  | %E3 | %82  | %89  | ← ステップ3
+-----+------+------+-----+------+------+-----+------+------+
</pre>
<p>
<code>表1</code>
</p>

<ul class="org-ul">
<li>ステップ1: &#8220;あきら&#8221;文字列をUTF-8符号化バイト表現に変換する
</li>
<li>ステップ2: 16進数に見直す。1オクテットは、2桁の十六進表記で表現することができる。
</li>
<li>ステップ3: 2桁の十六進表現を大文字にして、先頭に&#8221;%&#8221;を追加する
</li>
</ul>

<p>
ステップ1の文字コード(UTF-8)はブラウザの実装／設定に依存する。一般にUTF-8を採用するこ
とが多いい。
</p>

<p>
Javaに下記URLエンコード／デコード用の標準APIが用意されている。
</p>
<ul class="org-ul">
<li><a href="https://docs.oracle.com/javase/jp/6/api/java/net/URLEncoder.html#encode%2528java.lang.String,%2520java.lang.String%2529">java.net.URLEncoder.encode(String s, String enc)</a>
</li>
<li><a href="https://docs.oracle.com/javase/jp/6/api/java/net/URLDecoder.html">java.net.URLDecoder.decode(String s, String enc)</a>
</li>
</ul>

<p>
<code>表1</code> にエンコードの流れについて下記サンプルプログラムで確認することができる。
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffffff;">import</span> <span style="color: #40e0d0;">java</span>.<span style="color: #40e0d0;">io</span>.<span style="color: #7fffd4;">UnsupportedEncodingException</span>;
<span style="color: #ffffff;">import</span> <span style="color: #40e0d0;">java</span>.<span style="color: #40e0d0;">net</span>.<span style="color: #7fffd4;">URLEncoder</span>;

<span style="color: #ffffff;">public</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">URLEncoderTest</span> {
    <span style="color: #ffffff;">public</span> <span style="color: #ffffff;">static</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">main</span>(<span style="color: #7fffd4;">String</span>[] <span style="color: #9acd32;">args</span>) <span style="color: #ffffff;">throws</span> <span style="color: #7fffd4;">UnsupportedEncodingException</span> {

        System.out.println(URLEncoder1.encode(<span style="color: #bdb76b;">"&#12354;&#12365;&#12425;"</span>, <span style="color: #bdb76b;">"UTF-8"</span>));

        <span style="color: #00cd66;">// </span><span style="color: #00cd66;">UTF-8&#12496;&#12452;&#12488;&#34920;&#29694;&#12434;&#20986;&#21147;&#12377;&#12427;</span>
        <span style="color: #7fffd4;">byte</span>[] <span style="color: #9acd32;">bs</span> = <span style="color: #bdb76b;">"&#12354;&#12365;&#12425;"</span>.getBytes(<span style="color: #bdb76b;">"UTF-8"</span>);
        <span style="color: #ffffff;">for</span> (<span style="color: #7fffd4;">byte</span> <span style="color: #9acd32;">b</span> : bs) {
            System.out.print(b);
            System.out.print(<span style="color: #bdb76b;">" | "</span>);
        }
        System.out.print(<span style="color: #bdb76b;">"\n"</span>);

        <span style="color: #00cd66;">// </span><span style="color: #00cd66;">16&#36914;&#25968;&#34920;&#29694;&#12434;&#20986;&#21147;&#12377;&#12427;</span>
        <span style="color: #ffffff;">for</span> (<span style="color: #7fffd4;">byte</span> <span style="color: #9acd32;">b</span> : bs) {
            System.out.println(Integer.toHexString(b));
        }
    }
}
</pre>
</div>

<p>
出力結果
</p>
<pre class="example">
%E3%81%82%E3%81%8D%E3%82%89
-29 | -127 | -126 | -29 | -127 | -115 | -29 | -126 | -119 |
ffffffe3
ffffff81
ffffff82
ffffffe3
ffffff81
ffffff8d
ffffffe3
ffffff82
ffffff89
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 文字化けの原因</h2>
<div class="outline-text-2" id="text-2">
<p>
HTTPリクエストを受ける側(Web/APサーバ)、上記 <code>表1</code> と逆順でURLパラメータをデコードし
なければいけません。URLパラメータのデコード処理はAPサーバを隠蔽してくれるので業務AP側
あんまり意識しないかもしれないですが。ステップ1でクライアントとAPサーバが異なる文字
コードを使用すると文字化けが起こりえるので要注意です。
</p>

<p>
URLパラメータの文字コードについて、クライアントとAPサーバ間のネゴシエーション仕様は
HTTPプロトコル上明確に定義されていないため、ベンダによって実装が変わる。主に以下のよ
うな処理パターンが存在するでしょう。
</p>

<ol class="org-ol">
<li>HTTPヘッダにContent-Type値に基づく、URLパラメータの文字コードを決める
</li>
<li>APサーバの設定パラメータに基づく、URLパラメータの文字コードを決める
</li>
<li><a href="http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#setCharacterEncoding%2528java.lang.String%2529">javax.servlet.ServletRequest.setCharacterEncoding(String env)</a> APIで設定された値に
基づく、URLパラメータの文字コードを決める
</li>
</ol>

<p>
HTTPヘッダのContent-Type値はPOSTリクエストにHTTPボディ部分の文字コードを示す項目です
が、GETリクエストにContent-Type値を含めることは稀に見ないでしょう。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Tomcat7の実装</h2>
<div class="outline-text-2" id="text-3">
<p>
環境: apache-tomcat-7.0.47
</p>

<p>
検証用サンプルプログラム <code>profiler.MainServlet.java</code>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffffff;">package</span> <span style="color: #40e0d0;">profiler</span>;

<span style="color: #ffffff;">import</span> <span style="color: #40e0d0;">java</span>.<span style="color: #40e0d0;">io</span>.<span style="color: #7fffd4;">IOException</span>;

<span style="color: #ffffff;">import</span> <span style="color: #40e0d0;">javax</span>.<span style="color: #40e0d0;">servlet</span>.<span style="color: #7fffd4;">ServletException</span>;
<span style="color: #ffffff;">import</span> <span style="color: #40e0d0;">javax</span>.<span style="color: #40e0d0;">servlet</span>.<span style="color: #40e0d0;">annotation</span>.<span style="color: #7fffd4;">WebServlet</span>;
<span style="color: #ffffff;">import</span> <span style="color: #40e0d0;">javax</span>.<span style="color: #40e0d0;">servlet</span>.<span style="color: #40e0d0;">http</span>.<span style="color: #7fffd4;">HttpServlet</span>;
<span style="color: #ffffff;">import</span> <span style="color: #40e0d0;">javax</span>.<span style="color: #40e0d0;">servlet</span>.<span style="color: #40e0d0;">http</span>.<span style="color: #7fffd4;">HttpServletRequest</span>;
<span style="color: #ffffff;">import</span> <span style="color: #40e0d0;">javax</span>.<span style="color: #40e0d0;">servlet</span>.<span style="color: #40e0d0;">http</span>.<span style="color: #7fffd4;">HttpServletResponse</span>;

<span style="color: #bdb76b;">/**</span>
<span style="color: #bdb76b;"> * Servlet implementation class MainServlet</span>
<span style="color: #bdb76b;"> */</span>
<span style="color: #40e0d0;">@WebServlet</span>(<span style="color: #bdb76b;">"/MainServlet"</span>)
<span style="color: #ffffff;">public</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">MainServlet</span> <span style="color: #ffffff;">extends</span> <span style="color: #7fffd4;">HttpServlet</span> {
    <span style="color: #ffffff;">private</span> <span style="color: #ffffff;">static</span> <span style="color: #ffffff;">final</span> <span style="color: #7fffd4;">long</span> <span style="color: #9acd32;">serialVersionUID</span> = 1L;

    <span style="color: #ffffff;">public</span> <span style="color: #98fb98;">MainServlet</span>() {
        <span style="color: #ffffff;">super</span>();
    }

    <span style="color: #ffffff;">protected</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">doGet</span>(<span style="color: #7fffd4;">HttpServletRequest</span> <span style="color: #9acd32;">request</span>, <span style="color: #7fffd4;">HttpServletResponse</span> <span style="color: #9acd32;">response</span>) <span style="color: #ffffff;">throws</span> <span style="color: #7fffd4;">ServletException</span>, <span style="color: #7fffd4;">IOException</span> {
      <span style="color: #00cd66;">// </span><span style="color: #00cd66;">URL&#12497;&#12521;&#12513;&#12540;&#12479;&#12434;&#20986;&#21147;&#12377;&#12427;</span>
        System.out.println(request.getParameter(<span style="color: #bdb76b;">"param1"</span>));
    }

    <span style="color: #ffffff;">protected</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">doPost</span>(<span style="color: #7fffd4;">HttpServletRequest</span> <span style="color: #9acd32;">request</span>, <span style="color: #7fffd4;">HttpServletResponse</span> <span style="color: #9acd32;">response</span>) <span style="color: #ffffff;">throws</span> <span style="color: #7fffd4;">ServletException</span>, <span style="color: #7fffd4;">IOException</span> {
    }
}
</pre>
</div>

<p>
Debugモードで上記サンプルをトレースしてみると、URLパラメータデコード処理時の実行スタッ
クは以下となります。
</p>
<pre class="example">
at org.apache.tomcat.util.buf.UDecoder.convert(UDecoder.java:100)
at org.apache.tomcat.util.http.Parameters.urlDecode(Parameters.java:489)
at org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:396)
at org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:501)
at org.apache.tomcat.util.http.Parameters.handleQueryParameters(Parameters.java:194)
at org.apache.catalina.connector.Request.parseParameters(Request.java:3059)
at org.apache.catalina.connector.Request.getParameter(Request.java:1151)
at org.apache.catalina.connector.RequestFacade.getParameter(RequestFacade.java:384)
at profiler.MainServlet.doGet(MainServlet.java:32)
</pre>

<p>
実行スタックから見ると <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getParameter%2528java.lang.String%2529">javax.servlet.ServletRequest.getParameter(String name)</a> が初回
呼ばれた時に次のJavaクラスが実行され、URLパラメータのデコード処理が行われることが分か
ります。
</p>

<ul class="org-ul">
<li><a href="https://github.com/apache/tomcat70/blob/trunk/java/org/apache/catalina/connector/Request.java">org.apache.catalina.connector.Request.java</a>
</li>
<li><a href="https://github.com/apache/tomcat70/blob/trunk/java/org/apache/tomcat/util/http/Parameters.java">org.apache.tomcat.util.http.Parameters.java</a>
</li>
</ul>

<p>
※記述が冗長のため、以降はRequestとParametersで記述する。
</p>

<p>
以下はParameters.javaにURLパラメータの文字コード決める部分の抜粋です。
</p>
<div class="org-src-container">

<pre class="src src-java"> 1 |<span style="color: #ffffff;">package</span> org.apache.tomcat.util.<span style="color: #40e0d0;">http</span>;
 2 |(<span style="color: #7fffd4;">&#20013;&#30053;</span>)
 3 |<span style="color: #ffffff;">public</span> <span style="color: #ffffff;">final</span> <span style="color: #ffffff;">class</span> Parameters {
 4 | 
 5 |    (<span style="color: #7fffd4;">&#20013;&#30053;</span>)
 6 | 
 7 |    <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> handleQueryParameters() {
 8 |        (<span style="color: #7fffd4;">&#20013;&#30053;</span>) 14&#34892;&#30446;&#12434;&#21628;&#12403;&#20986;&#12375;
 9 |        processParameters( decodedQuery, queryStringEncoding );
10 |    }
11 | 
12 |    (<span style="color: #7fffd4;">&#20013;&#30053;</span>)
13 | 
14 |    <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> processParameters( <span style="color: #7fffd4;">MessageBytes</span> <span style="color: #9acd32;">data</span>, <span style="color: #7fffd4;">String</span> <span style="color: #9acd32;">encoding</span> ) {
15 |        (<span style="color: #7fffd4;">&#20013;&#30053;</span>) 22&#34892;&#30446;&#12434;&#21628;&#12403;&#20986;&#12375;&#12390;&#12363;&#12425;34&#34892;&#30446;&#12434;&#23455;&#34892;&#12377;&#12427;
16 |        processParameters( bc.getBytes(), bc.getOffset(),
17 |                           bc.getLength(), getCharset(encoding));
18 |    }
19 | 
20 |    (<span style="color: #7fffd4;">&#20013;&#30053;</span>)
21 | 
22 |    <span style="color: #ffffff;">private</span> Charset getCharset(<span style="color: #7fffd4;">String</span> <span style="color: #9acd32;">encoding</span>) {
23 |        <span style="color: #ffffff;">if</span> (encoding == <span style="color: #40e0d0;">null</span>) {
24 |            <span style="color: #ffffff;">return</span> DEFAULT_CHARSET;  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">ISO-8859-1</span>
25 |        }
26 |        <span style="color: #ffffff;">try</span> {
27 |            <span style="color: #ffffff;">return</span> B2CConverter.getCharset(encoding);
28 |        } <span style="color: #ffffff;">catch</span> (<span style="color: #7fffd4;">UnsupportedEncodingException</span> <span style="color: #9acd32;">e</span>) {
29 |            <span style="color: #ffffff;">return</span> DEFAULT_CHARSET;
30 |        }
31 |    }
32 | 
33 |    (<span style="color: #7fffd4;">&#20013;&#30053;</span>)
34 |    <span style="color: #ffffff;">private</span> <span style="color: #7fffd4;">void</span> processParameters(<span style="color: #7fffd4;">byte</span> <span style="color: #9acd32;">bytes</span>[], <span style="color: #7fffd4;">int</span> <span style="color: #9acd32;">start</span>, <span style="color: #7fffd4;">int</span> <span style="color: #9acd32;">len</span>,
35 |                                  Charset charset) {
36 | 
37 |        <span style="color: #ffffff;">if</span>(log.isDebugEnabled()) {
38 |            log.debug(sm.getString(<span style="color: #bdb76b;">"parameters.bytes"</span>,
39 |                    <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">String</span>(bytes, start, len, DEFAULT_CHARSET)));
40 |        }
41 | 
42 |        (<span style="color: #7fffd4;">&#20013;&#30053;</span>)
43 |                String name;
44 |                String value;
45 | 
46 |                <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;1 &#12497;&#12521;&#12513;&#12540;&#12479;&#21517;&#12398;&#12487;&#12467;&#12540;&#12489;</span>
47 | 
48 |                <span style="color: #ffffff;">if</span> (decodeName) {
49 |                    urlDecode(tmpName);
50 |                }
51 | 
52 |                tmpName.setCharset(charset);
53 |                name = tmpName.toString();
54 | 
55 |                <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;2 &#12497;&#12521;&#12513;&#12540;&#12479;&#20516;&#12398;&#12487;&#12467;&#12540;&#12489;</span>
56 | 
57 |                <span style="color: #ffffff;">if</span> (valueStart &gt;= 0) {
58 |                    <span style="color: #ffffff;">if</span> (decodeValue) {
59 |                        urlDecode(tmpValue);
60 |                    }
61 | 
62 |                    tmpValue.setCharset(charset);
63 |                    value = tmpValue.toString();
64 |                } <span style="color: #ffffff;">else</span> {
65 |                    value = <span style="color: #bdb76b;">""</span>;
66 |                }
67 | 
68 |        (<span style="color: #7fffd4;">&#20013;&#30053;</span>)
69 |    }
70 |}
</pre>
</div>

<p>
<code>62</code> 行目でURLパラメータ値パーセントデコード後バイト表現の文字コードを指定しています。
ここのcharset値は次のメカニズムで決められる。
</p>

<p>
Parameters.javaのqueryStringEncodingフィールド値が設定された場合その値が適用される。
そうでない場合、デフォルト値 <code>ISO-8859-1</code> が適用される。
</p>

<p>
Tomcat7にqueryStringEncodingフィールドの値を設定しているところは以下4箇所です。
</p>
<pre class="example">
1| org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:386)
2| org.apache.catalina.connector.Request.parseParameters(Request.java:3048)
3| org.apache.catalina.connector.Request.parseParameters(Request.java:3054)
4| org.apache.catalina.authenticator.FormAuthenticator.restoreRequest(FormAuthenticator.jaba:586)
</pre>

<ol class="org-ol">
<li>HTTPリクエスト受けった時に Request オブジェクトを初期化するところで
<code>conf/server.xml</code> にConnectorのURIEncoding属性値をRequestオブジェクトの
queryStringEncodingに設定する。実行時スタックは下記の通りです。
<pre class="example">
"http-bio-8080-exec-1" - Thread t@23
   java.lang.Thread.State: RUNNABLE
    at org.apache.tomcat.util.http.Parameters.setQueryStringEncoding(Parameters.java:98)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:386)
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)
    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
    - locked &lt;63f701a0&gt; (a org.apache.tomcat.util.net.SocketWrapper)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
</pre>
</li>

<li>ServletRequest.getParameter(String name)初回実行時にURLパラメータの解析処理、以下
は中身の詳細です。
<div class="org-src-container">

<pre class="src src-java"> 1 |<span style="color: #ffffff;">package</span> org.apache.catalina.<span style="color: #40e0d0;">connector</span>;
 2 |(<span style="color: #7fffd4;">&#20013;&#30053;</span>)
 3 |<span style="color: #ffffff;">public</span> <span style="color: #ffffff;">class</span> Request
 4 |     <span style="color: #ffffff;">implements</span> <span style="color: #7fffd4;">HttpServletRequest</span> {
 5 | 
 6 |     (<span style="color: #7fffd4;">&#20013;&#30053;</span>)
 7 | 
 8 |     <span style="color: #bdb76b;">/**</span>
<span style="color: #bdb76b;"> 9 |      * Parse request parameters.</span>
<span style="color: #bdb76b;">10 |      */</span>
11 |     <span style="color: #ffffff;">protected</span> <span style="color: #7fffd4;">void</span> parseParameters() {
12 | 
13 |       parametersParsed = <span style="color: #40e0d0;">true</span>;
14 | 
15 |       Parameters parameters = coyoteRequest.getParameters();
16 |       <span style="color: #7fffd4;">boolean</span> success = <span style="color: #40e0d0;">false</span>;
17 |       <span style="color: #ffffff;">try</span> {
18 |           <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Set this every time in case limit has been changed via JMX</span>
19 |           parameters.setLimit(getConnector().getMaxParameterCount());
20 | 
21 |           <span style="color: #00cd66;">// </span><span style="color: #00cd66;">getCharacterEncoding() may have been overridden to search for</span>
22 |           <span style="color: #00cd66;">// </span><span style="color: #00cd66;">hidden form field containing request encoding</span>
23 | 
24 |           <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;1</span>
25 |           <span style="color: #00cd66;">// </span><span style="color: #00cd66;">org.apache.coyote.Request.java&#12398;charEncoding&#12501;&#12451;&#12540;&#12523;&#12489;&#20516;&#12289;</span>
26 |           <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#12418;&#12375;&#12367;&#12399;HTTP&#12504;&#12483;&#12480;&#12398;Content-Type&#20516;&#12363;&#12425;&#25991;&#23383;&#12467;&#12540;&#12489;&#24773;&#22577;&#12398;&#21462;&#24471;</span>
27 |           String enc = getCharacterEncoding();
28 | 
29 |           <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;2</span>
30 |           <span style="color: #00cd66;">// </span><span style="color: #00cd66;">server.xml&#12395;Connector&#12398;useBodyEncodingForURI&#23646;&#24615;&#20516;&#12398;&#21462;&#24471;</span>
31 |           <span style="color: #7fffd4;">boolean</span> useBodyEncodingForURI = connector.getUseBodyEncodingForURI();
32 | 
33 | 
34 |           <span style="color: #ffffff;">if</span> (enc != <span style="color: #40e0d0;">null</span>) {
35 |               <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;3</span>
36 |               <span style="color: #00cd66;">// </span><span style="color: #00cd66;">HTTP&#12504;&#12483;&#12480;&#12398;Content-Type&#20516;&#12364;&#25351;&#23450;&#12373;&#12428;&#12383;&#22580;&#21512;&#12289;&#36969;&#29992;&#12377;&#12427;</span>
37 |               parameters.setEncoding(enc);
38 |
39 |               <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;4</span>
40 |               <span style="color: #00cd66;">// </span><span style="color: #00cd66;">useBodyEncodingForURI&#23646;&#24615;&#20516;&#12364;true&#12398;&#22580;&#21512;&#12289;</span>
41 |               <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#12300;&#9733;1&#12301;&#12391;&#21462;&#12428;&#12383;&#20516;&#12434;org.apache.tomcat.util.http.Parameters.java&#12398;</span>
42 |               <span style="color: #00cd66;">// </span><span style="color: #00cd66;">queryStringEncoding&#12501;&#12451;&#12540;&#12523;&#12489;&#12395;&#36969;&#29992;&#12377;&#12427;</span>
43 |               <span style="color: #ffffff;">if</span> (useBodyEncodingForURI) {
44 |                   parameters.setQueryStringEncoding(enc);
45 |               }
46 |           } <span style="color: #ffffff;">else</span> {
47 | 
48 |               <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;5</span>
49 |               <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#12300;&#9733;1&#12301;&#20516;&#12364;&#21462;&#12428;&#12394;&#12356;&#22580;&#21512;&#12289;&#12487;&#12501;&#12457;&#12523;&#12488;&#20516;(ISO-8859-1)&#12434;&#36969;&#29992;&#12377;&#12427;</span>
50 |
51 |               parameters.setEncoding
52 |                   (<span style="color: #40e0d0;">org</span>.<span style="color: #40e0d0;">apache</span>.<span style="color: #40e0d0;">coyote</span>.<span style="color: #40e0d0;">Constants</span>.DEFAULT_CHARACTER_ENCODING);
53 |               <span style="color: #ffffff;">if</span> (useBodyEncodingForURI) {
54 |                   parameters.setQueryStringEncoding
55 |                       (<span style="color: #40e0d0;">org</span>.<span style="color: #40e0d0;">apache</span>.<span style="color: #40e0d0;">coyote</span>.<span style="color: #40e0d0;">Constants</span>.DEFAULT_CHARACTER_ENCODING);
56 |               }
57 |           }
58 |             <span style="color: #00cd66;">// </span><span style="color: #00cd66;">org.apache.tomcat.util.http.Parameters.java&#12398;&#35299;&#26512;&#20966;&#29702;&#12434;&#12467;&#12540;&#12523;</span>
59 |           parameters.handleQueryParameters();
60 | 
61 |     (&#20013;&#30053;)
</pre>
</div>
<p>
<code>リスト1</code>
</p>

<p>
<code>profiler.MainServlet.java</code> サンプルプログラムに置いて、上記 <code>27</code> 行目実行時のスタッ
クトレースを以下に示す。
</p>

<pre class="example">
"http-bio-8080-exec-1" - Thread t@29
   java.lang.Thread.State: RUNNABLE
    at org.apache.tomcat.util.http.ContentType.getCharsetFromContentType(ContentType.java:41)
    at org.apache.coyote.Request.getCharacterEncoding(Request.java:264)
    at org.apache.catalina.connector.Request.getCharacterEncoding(Request.java:1048)
    at org.apache.catalina.connector.Request.parseParameters(Request.java:3042)
    at org.apache.catalina.connector.Request.getParameter(Request.java:1151)
    at org.apache.catalina.connector.RequestFacade.getParameter(RequestFacade.java:384)
    at profiler.MainServlet.doGet(MainServlet.java:32)
</pre>
</li>

<li>上記2の説明に含まている
</li>

<li>今回の調査範囲外のため、別途&#x2026;
</li>
</ol>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> URIEncoding属性値</h3>
<div class="outline-text-3" id="text-3-1">
<p>
<code>conf/server.xml</code> にConnectorのURIEncoding属性値にてURLパラメータの文字コードのデフォ
ルト値を指定することができる。ほどんどんのブラウザはUTF-8を採用しているため、この値を
<code>UTF-8</code> に見直すべきでしょう。
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> useBodyEncodingForURI属性値</h3>
<div class="outline-text-3" id="text-3-2">
<p>
<code>conf/server.xml</code> にConnectorのuseBodyEncodingForURI属性値がtrueの場合、 <code>リスト1</code> の
<code>44</code> と <code>55</code> 行目が実行され、URLパラメータの文字コードとHTTPボディの文字コードが統一
される。
</p>

<p>
Content-Type HTTPヘッダを含めないGETリクエストの場合 <code>27</code> 行目の値が null のため、URL
パラメータにマルチバイト文字が化けでしょう。
</p>

<p>
ServletRequest.getParameter(String name)を評価する前に
<code>ServletRequest.setCharacterEncoding(String enc)</code> で予め
org.apache.coyote.Request.javaのcharEncodingフィールド値を初期化すれば、文字化け問題
を回避することが出来ます。
</p>

<p>
と言うわけで <code>useBodyEncodingForURI</code> 属性値をtrueに指定する場合、業務APでURLパラメー
タを参照する前に <code>ServletRequest.setCharacterEncoding(String enc)</code> を実行して文字コー
ド明示した方がよいでしょう。
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 設定と挙動のまとめ</h3>
<div class="outline-text-3" id="text-3-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">No</th>
<th scope="col" class="left">URIEncoding</th>
<th scope="col" class="left">useBodyEncodingForURI</th>
<th scope="col" class="left">Content-Type</th>
<th scope="col" class="left">結果</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="left">-</td>
<td class="left">false</td>
<td class="left">有り／無し</td>
<td class="left">文字化け</td>
</tr>

<tr>
<td class="right">4</td>
<td class="left">UTF-8</td>
<td class="left">false</td>
<td class="left">有り／無し</td>
<td class="left">OK</td>
</tr>

<tr>
<td class="right">3</td>
<td class="left">任意</td>
<td class="left">true</td>
<td class="left">なし</td>
<td class="left">文字化け</td>
</tr>

<tr>
<td class="right">2</td>
<td class="left">任意</td>
<td class="left">true</td>
<td class="left">有り</td>
<td class="left">OK</td>
</tr>
</tbody>
</table>

<p>
Tomcat6の場合、この２つパラメータは次のシステムプロパティとして指定することになります。
</p>
<ul class="org-ul">
<li>org.apache.catalina.connector.URI_ENCODING
</li>
<li>org.apache.catalina.connector.USE_BODY_ENCODING_FOR_QUERY_STRING
</li>
</ul>

<p>
JBossAS7/EAP6もTomcat6と同じ方法です。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Weblogic 11gの設定</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> 起動パラメータで指定する</h3>
<div class="outline-text-3" id="text-4-1">
<p>
<a href="http://otndnld.oracle.co.jp/document/products/wls/docs90/ja/relnotes_ja.html">URL デコードする際の文字エンコーディングを指定する方法</a>
</p>

<pre class="example">
-Dweblogic.http.URIDecodeEncoding=UTF-8
</pre>

<p>
ただし、この設定は1つのサーバインスタンスで1つのみ可能です。
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> weblogic.xmlにて指定する</h3>
<div class="outline-text-3" id="text-4-2">
<p>
<a href="https://docs.oracle.com/middleware/1212/wls/WBAPP/configurejsp.htm#WBAPP187">Mapping IANA Character Sets to Java Character Sets</a>
</p>
<pre class="example">
&lt;input-charset&gt;
  &lt;resource-path&gt;/foo/*&lt;/resource-path&gt;
  &lt;java-charset-name&gt;UTF-8&lt;/java-charset-name&gt;
&lt;/input-charset&gt;
</pre>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> ServletRequest.setCharacterEncoding(String env) APIで指定する</h3>
<div class="outline-text-3" id="text-4-3">
<p>
文字コード制御用のFilterにて実装することが多いい。
</p>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> ADFフレームワーク利用時の注意事項</h3>
<div class="outline-text-3" id="text-4-4">
<p>
ADFフレームワーク内でHTTP Requestオブジェクトをラッピング時にFilterで指定した文字コー
ド情報をロストしてしまうケースがあります。ADFフレームワーク利用時にJSFフェースリスナー
のRESTORE_VIEWフェーズにて行うのが適切です。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html">Apache Tomcat 7 - The HTTP Connector</a>
</li>
<li><a href="http://tools.ietf.org/html/rfc3986#section-2">rfc3986#section-2</a>
</li>
<li><a href="http://ja.wikipedia.org/wiki/%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25BB%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0">パーセントエンコーディング</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]デバッグ版OpenJDKのビルド]]></title>
    <link href="http://luozengbin.github.io/blog/2015-05-10-%5B%E3%83%A1%E3%83%A2%5D%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%89%88openjdk%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89.html"/>
    <updated>2015-05-10T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]デバッグ版openjdkのビルド</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. ビルド手順</a></li>
<li><a href="#sec-3">3. gdbでデバッグしてみる</a></li>
<li><a href="#sec-4">4. valgrindでコールグラフ出してみる</a></li>
<li><a href="#sec-5">5. 参考</a></li>
</ul>
</div>
</div>
<p>
今まで、JVM中身の調査は <code>SystemTap + java-1.x.x-openjdk-debuginfo.x86_64</code> 利用してい
たが。もう少しJVMの中身を踏み込みたいのでデバッグ版JVMをビルドしてみました。
</p>

<p>
<a href="http://hg.openjdk.java.net/jdk7/jdk7/raw-file/tip/README-builds.html">http://hg.openjdk.java.net/jdk7/jdk7/raw-file/tip/README-builds.html</a> の手順でビルドし
てもいいのですが、トライ・アンド・エラーで時間が取られそうなので、自分が使っている
<code>Arch Linux</code> 環境で一番手取りの早い手順で行いました。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Arch Linux
</li>
<li>OpenJDK 7系
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> ビルド手順</h2>
<div class="outline-text-2" id="text-2">
<p>
まずはパッケージリポジトリから <a href="https://www.archlinux.org/packages/extra/x86_64/jdk7-openjdk/">jdk7-openjdk</a> のビルドファイルやパッチファイルを入手する。
</p>
<ul class="org-ul">
<li><a href="https://projects.archlinux.org/svntogit/packages.git/tree/trunk?h=packages/java7-openjdk">入手先</a>
</li>
</ul>
<pre class="example">
★ダウンロード
$ wget https://projects.archlinux.org/svntogit/packages.git/plain/trunk/PKGBUILD?h=packages/java7-openjdk -O PKGBUILD
$ wget https://projects.archlinux.org/svntogit/packages.git/plain/trunk/fontconfig-paths.diff?h=packages/java7-openjdk -O fontconfig-paths.diff
$ wget https://projects.archlinux.org/svntogit/packages.git/plain/trunk/jdk7-openjdk.install?h=packages/java7-openjdk -O jdk7-openjdk.install
$ wget https://projects.archlinux.org/svntogit/packages.git/plain/trunk/jre7-openjdk-headless.install?h=packages/java7-openjdk -O jre7-openjdk-headless.install
$ wget https://projects.archlinux.org/svntogit/packages.git/plain/trunk/jre7-openjdk.install?h=packages/java7-openjdk -O jre7-openjdk.install
$ wget https://projects.archlinux.org/svntogit/packages.git/plain/trunk/openjdk7_nonreparenting-wm.diff?h=packages/java7-openjdk -O openjdk7_nonreparenting-wm.diff
★ファイル一覧確認
$ ls -al
合計 52
drwxr-xr-x  2 akira users  4096  5月 10 11:24 .
drwxr-xr-x 21 akira users  4096  5月 10 11:23 ..
-rw-r--r--  1 akira users 12429  5月 10 11:24 PKGBUILD
-rw-r--r--  1 akira users  8302  5月 10 11:24 fontconfig-paths.diff
-rw-r--r--  1 akira users  1053  5月 10 11:24 jdk7-openjdk.install
-rw-r--r--  1 akira users   974  5月 10 11:24 jre7-openjdk-headless.install
-rw-r--r--  1 akira users  1201  5月 10 11:24 jre7-openjdk.install
-rw-r--r--  1 akira users  2324  5月 10 11:24 openjdk7_nonreparenting-wm.diff
</pre>

<p>
<code>PKGBUILD</code> ファイルにデバッグビルドオプションを有効化する。
</p>
<ol class="org-ol">
<li><code>--enable-native-debuginfo=yes</code> build with native code debuginfo [default=yes]
</li>
<li><code>--enable-java-debuginfo=yes</code> build with Java bytecode debuginfo [default=yes]
</li>
<li><code>make icedtea-debug</code> デバッグビルドターゲットに変える
</li>
</ol>

<p>
<code>1</code> と <code>2</code> の規定値は <code>yes</code> なので、指定しなくても問題ありません。 <code>3</code> が肝ですね。
</p>

<div class="org-src-container">

<pre class="src src-sh">  ..........&#30465;&#30053;.........
  |build() {
  |  <span style="color: #63b8ff;">cd</span> <span style="color: #bcee68; font-style: italic;">"${srcdir}/icedtea-${_icedtea_ver}"</span>
  | 
  |  <span style="color: #63b8ff;">export</span> <span style="color: #ff6347;">ALT_PARALLEL_COMPILE_JOBS</span>=<span style="color: #bcee68; font-style: italic;">"${MAKEFLAGS/-j}"</span>
  |  <span style="color: #63b8ff;">export</span> <span style="color: #ff6347;">HOTSPOT_BUILD_JOBS</span>=<span style="color: #bcee68; font-style: italic;">"${ALT_PARALLEL_COMPILE_JOBS}"</span>
  | 
  |  <span style="color: #63b8ff;">.</span> /etc/profile.d/apache-ant.sh
  | 
  |  cp <span style="color: #bcee68; font-style: italic;">"${srcdir}"</span>/*.diff <span style="color: #bcee68; font-style: italic;">"${srcdir}"</span>/icedtea-${<span style="color: #ff6347;">_icedtea_ver</span>}/patches
  |  <span style="color: #63b8ff;">export</span> <span style="color: #ff6347;">DISTRIBUTION_PATCHES</span>=<span style="color: #bcee68; font-style: italic;">"patches/fontconfig-paths.diff \</span>
<span style="color: #bcee68; font-style: italic;">  |                               patches/openjdk7_nonreparenting-wm.diff"</span>
  | 
  |  <span style="color: #00bfff; font-weight: bold;">if</span> [ <span style="color: #bcee68; font-style: italic;">"$_bootstrap"</span> = <span style="color: #bcee68; font-style: italic;">"1"</span> ]; <span style="color: #00bfff; font-weight: bold;">then</span>
  |     <span style="color: #ff6347;">BOOTSTRAPOPT</span>=<span style="color: #bcee68; font-style: italic;">"--enable-bootstrap --with-ecj-jar=/usr/share/java/ecj.jar"</span>
  |   <span style="color: #00bfff; font-weight: bold;">else</span>
  |     <span style="color: #ff6347;">BOOTSTRAPOPT</span>=<span style="color: #bcee68; font-style: italic;">"--disable-bootstrap"</span>
  |  <span style="color: #00bfff; font-weight: bold;">fi</span>
  | 
  |  ./configure <span style="color: #bcee68; font-style: italic;">\</span>
  |        ${<span style="color: #ff6347;">BOOTSTRAPOPT</span>} <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-parallel-jobs=<span style="color: #bcee68; font-style: italic;">"${MAKEFLAGS/-j}"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --disable-tests <span style="color: #bcee68; font-style: italic;">\</span>
  |        --disable-downloading --disable-Werror <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-pkgversion=<span style="color: #bcee68; font-style: italic;">"Arch Linux build ${pkgver}-${pkgrel}-${CARCH}"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-jdk-home=${<span style="color: #ff6347;">JAVA_HOME</span>} <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-openjdk-src-zip=<span style="color: #bcee68; font-style: italic;">"${srcdir}/icedtea_${_icedtea_ver}_openjdk.tar.bz2"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-hotspot-src-zip=<span style="color: #bcee68; font-style: italic;">"${srcdir}/icedtea_${_icedtea_ver}_hotspot.tar.bz2"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-corba-src-zip=<span style="color: #bcee68; font-style: italic;">"${srcdir}/icedtea_${_icedtea_ver}_corba.tar.bz2"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-jaxp-src-zip=<span style="color: #bcee68; font-style: italic;">"${srcdir}/icedtea_${_icedtea_ver}_jaxp.tar.bz2"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-jaxws-src-zip=<span style="color: #bcee68; font-style: italic;">"${srcdir}/icedtea_${_icedtea_ver}_jaxws.tar.bz2"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-jdk-src-zip=<span style="color: #bcee68; font-style: italic;">"${srcdir}/icedtea_${_icedtea_ver}_jdk.tar.bz2"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-langtools-src-zip=<span style="color: #bcee68; font-style: italic;">"${srcdir}/icedtea_${_icedtea_ver}_langtools.tar.bz2"</span> <span style="color: #bcee68; font-style: italic;">\</span>
  |        --enable-nss <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-rhino <span style="color: #bcee68; font-style: italic;">\</span>
  |        --with-abs-install-dir=${<span style="color: #ff6347;">_jvmdir</span>} <span style="color: #bcee68; font-style: italic;">\</span>
1.|        --enable-native-debuginfo=yes <span style="color: #bcee68; font-style: italic;">\</span>
2.|        --enable-java-debuginfo=yes <span style="color: #bcee68; font-style: italic;">\</span>
  |        --enable-infinality=no
  |        <span style="color: #888a85;"># </span><span style="color: #888a85;">TODO latest version of openjdk will disable infinality by default</span>
  |
3.|    make icedtea-debug
  |}
  ..........&#30465;&#30053;.........
</pre>
</div>

<p>
あとは <a href="https://archlinuxjp.kusakata.com/wiki/Makepkg">makepkg</a> でビルドするだけです。コーヒーいっぱい分の時間かかります。
</p>
<pre class="example">
$ makepkg
==&gt; パッケージを作成: java7-openjdk 7.u79_2.5.5-1 (2015年  5月 10日 日曜日 11:43:40 JST)
==&gt; ランタイムの依存関係を確認...
==&gt; ビルドタイムの依存関係を確認...
==&gt; ソースを取得...
..........省略.........

★肝心のhotspotビルド
########################################################################
##### Entering hotspot for target(s) all_debug                     #####
########################################################################
..........省略.........

★ビルド時のオプション
g++ 
-DLINUX
-D_GNU_SOURCE 
-DAMD64 
-DASSERT 
-DDEBUG -I. -I/home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/vm/prims -I/home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/vm -I/home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/vm/precompiled -I/home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/cpu/x86/vm -I/home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/os_cpu/linux_x86/vm -I/home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/os/linux/vm -I/home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/os/posix/vm -I../generated 
-DHOTSPOT_RELEASE_VERSION="\"24.79-b02\"" 
-DHOTSPOT_BUILD_TARGET="\"jvmg\"" 
-DHOTSPOT_BUILD_USER="\"akira\"" 
-DHOTSPOT_LIB_ARCH=\"amd64\" 
-DHOTSPOT_VM_DISTRO="\"OpenJDK\"" 
-DDERIVATIVE_ID="\"IcedTea 2.5.5\"" 
-DDISTRIBUTION_ID="\"Arch Linux, package Arch Linux build 7.u79_2.5.5-1-x86_64\""
-march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong --param=ssp-buffer-size=4
-DTARGET_OS_FAMILY_linux 
-DTARGET_ARCH_x86 
-DTARGET_ARCH_MODEL_x86_64 
-DTARGET_OS_ARCH_linux_x86 
-DTARGET_OS_ARCH_MODEL_linux_x86_64 
-DTARGET_COMPILER_gcc 
-DCOMPILER2 
-DCOMPILER1  -fno-rtti -fno-exceptions 
-D_REENTRANT -fcheck-new -fvisibility=hidden -m64 -pipe -g 
-DTARGET_OS_FAMILY_linux 
-DTARGET_ARCH_x86 
-DTARGET_ARCH_MODEL_x86_64 
-DTARGET_OS_ARCH_linux_x86 
-DTARGET_OS_ARCH_MODEL_linux_x86_64 
-DTARGET_COMPILER_gcc 
-DCOMPILER2 
-DCOMPILER1 -fpic -fno-rtti -fno-exceptions 
-D_REENTRANT -fcheck-new -fvisibility=hidden -m64 -pipe 
★カスタマイズdebugビルドフラグ
-g -finstrument-functions -fvar-tracking-assignments -rdynamic
-D_NMT_NOINLINE_ 
-DVM_LITTLE_ENDIAN 
-D_LP64=1 -fno-omit-frame-pointer 
-DINCLUDE_TRACE=1  -Wpointer-arith -Wsign-compare    -c -fpch
-Deps -MMD -MP -MF ../generated/dependencies/osThread_linux.o.d -o osThread_linux.o /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/os/linux/vm/osThread_linux.cpp

Compiling /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/os/linux/vm/os_linux.cpp

..........省略.........

-- Build times ----------
Target all_product_build
Start 2015-05-10 11:43:19
End   2015-05-10 12:41:39
00:09:54 corba
00:11:03 hotspot
00:01:15 jaxp
00:01:25 jaxws
00:31:45 jdk
00:02:58 langtools
00:58:20 TOTAL
-------------------------
..........省略.........
</pre>

<p>
僕の環境では約1時間ぐらいかかりました。
</p>
<ul class="org-ul">
<li>CPU: Intel(R) Core(TM) i5-2557M CPU @ 1.70GHz
</li>
<li>Memory: 4G
</li>
<li>SSD
</li>
</ul>


<p>
ビルド成果物はワークディレクトリの下記場所に出力される。
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">デバッグ版OpenJDK</td>
<td class="left">src/icedtea-2.5.5/openjdk.build-debug</td>
</tr>

<tr>
<td class="left">hotspot単体</td>
<td class="left">src/icedtea-2.5.5/openjdk.build-debug/hotspot/outputdir/linux_amd64_compiler2/jvmg</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> gdbでデバッグしてみる</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>hotspot単体の出力先へ移動する
</li>
<li><code>-gdb</code> オプションを付けて <code>./hotspot</code> を起動する
</li>
<li>デバッグ版のJVMランチャーに既にBreakpointが設定されている
</li>
<li><code>p</code> で変数の値を確認する
</li>
<li><code>next</code> でステップオーバーでデバッグする
</li>
<li><code>step</code> でステップインでデバッグする
</li>
<li><code>backtrace</code> でスタックトレースを確認する
</li>
<li><code>continue</code> で最後まで実行される
</li>
</ol>

<pre class="example">
1.|$ cd src/icedtea-2.5.5/openjdk.build-debug/hotspot/outputdir/linux_amd64_compiler2/jvmg
2.|$ ./hotspot -gdb -version
  |GNU gdb (GDB) 7.9
  |Copyright (C) 2015 Free Software Foundation, Inc.
  |License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
  |This is free software: you are free to change and redistribute it.
  |There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
  |and "show warranty" for details.
  |This GDB was configured as "x86_64-unknown-linux-gnu".
  |Type "show configuration" for configuration details.
  |For bug reporting instructions, please see:
  |&lt;http://www.gnu.org/software/gdb/bugs/&gt;.
  |Find the GDB manual and other documentation resources online at:
  |&lt;http://www.gnu.org/software/gdb/documentation/&gt;.
  |For help, type "help".
  |Type "apropos word" to search for commands related to "word".
  |Breakpoint 1 at 0x4042f7: file /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/tools/launcher/java.c, line 1270.
  |[Thread debugging using libthread_db enabled]
  |Using host libthread_db library "/usr/lib/libthread_db.so.1".
  |Using java runtime at: /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/bootstrap/jdk1.6.0/jre
  |[New Thread 0x7ffff7fa6700 (LWP 15629)]
  |[Switching to Thread 0x7ffff7fa6700 (LWP 15629)]
  | 
3.|Breakpoint 1, InitializeJVM (pvm=0x7ffff7fa5e38, penv=0x7ffff7fa5e30, ifn=0x7ffff7fa5e40)
  |    at /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/tools/launcher/java.c:1270
  |1270	    memset(&amp;args, 0, sizeof(args));
4.|(gdb) p args
  |$1 = {version = 0, nOptions = 0, options = 0x0, ignoreUnrecognized = 0 '\000'}
5.|(gdb) next
  |1271	    args.version  = JNI_VERSION_1_2;
  |(gdb) next
  |1272	    args.nOptions = numOptions;
  |(gdb) next
  |1273	    args.options  = options;
  |(gdb) next
  |1274	    args.ignoreUnrecognized = JNI_FALSE;
  |(gdb) next
  |1276	    if (_launcher_debug) {
  |(gdb) next
  |1288	    r = ifn-&gt;CreateJavaVM(pvm, (void **)penv, &amp;args);
6.|(gdb) step
  |JNI_CreateJavaVM (vm=0x7ffff7fa5e38, penv=0x7ffff7fa5e30, args=0x7ffff7fa5df0)
  |    at /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/vm/prims/jni.cpp:5121
  |5121	  if (Atomic::xchg(1, &amp;vm_created) == 1) {
7.|(gdb) backtrace 
  |#0  JNI_CreateJavaVM (vm=0x7ffff7fa5e38, penv=0x7ffff7fa5e30, args=0x7ffff7fa5df0)
  |    at /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/vm/prims/jni.cpp:5121
  |#1  0x00000000004043fd in InitializeJVM (pvm=0x7ffff7fa5e38, penv=0x7ffff7fa5e30, ifn=0x7ffff7fa5e40)
  |    at /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/tools/launcher/java.c:1288
  |#2  0x00000000004031ea in JavaMain (_args=0x7fffffffc080)
  |    at /home/akira/temp/java7-openjdk/src/icedtea-2.5.5/openjdk/hotspot/src/share/tools/launcher/java.c:423
  |#3  0x00007ffff5c17374 in start_thread () from /usr/lib/libpthread.so.0
  |#4  0x00007ffff595527d in clone () from /usr/lib/libc.so.6
8.|(gdb) continue
  |Continuing.
  |java version "1.7.0_79"
  |OpenJDK Runtime Environment (IcedTea 2.5.5) (Arch Linux build 7.u79_2.5.5-1-x86_64)
  |OpenJDK 64-Bit Server VM (build 24.79-b02-jvmg, mixed mode)
  |[Thread 0x7ffff7fa6700 (LWP 16481) exited]
  [Thread 0x7ffff7fa8740 (LWP 16477) exited]
  [Inferior 1 (process 16477) exited normally]
  (gdb) q
  $
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> valgrindでコールグラフ出してみる</h2>
<div class="outline-text-2" id="text-4">
<p>
valgrindでコールグラフを出してみました。
</p>

<p>
必要なパッケージを入れておく。
</p>
<pre class="example">
$ sudo pacman -S valgrind
$ sudo pacman -S kdesdk-kcachegrind
</pre>

<ol class="org-ol">
<li>デバッグ版OpenJDKの出力先へ移動する
</li>
<li><code>valgrind</code> カーバーして <code>java -version</code> を実行する
</li>
<li><code>kcachegrind</code> で出力結果を解析する
</li>
</ol>

<pre class="example">
1.|$ cd src/icedtea-2.5.5/openjdk.build-debug
2.|$ valgrind --tool=callgrind bin/java -version
  |==18306== Callgrind, a call-graph generating cache profiler
  |==18306== Copyright (C) 2002-2013, and GNU GPL'd, by Josef Weidendorfer et al.
  |==18306== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
  |==18306== Command: bin/java -version
  |==18306== 
  |==18306== For interactive control, run 'callgrind_control -h'.
  |java version "1.7.0_79-debug"
  |OpenJDK Runtime Environment (IcedTea 2.5.5) (Arch Linux build 7.u79_2.5.5-1-x86_64)
  |OpenJDK 64-Bit Server VM (build 24.79-b02-jvmg, mixed mode)
  |==18306== 
  |==18306== Events    : Ir
  |==18306== Collected : 1610140735
  |==18306== 
  |==18306== I   refs:      1,610,140,735
  |$ ls -al callgrind.out.*
  |-rw------- 1 akira users 5003407  5月 10 12:50 callgrind.out.18306
3.|$ kcachegrind callgrind.out.18306
</pre>

<p>
コールグラフ
</p>


<div class="figure">
<p><img src="img/20150510125343_callgrind.png" alt="20150510125343_callgrind.png" />
</p>
</div>

<p>
バッチリですね！
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="https://sourceware.org/gdb/onlinedocs/gdb/Variables.html">Variables - Debugging with GDB</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[調査]JVMのスタックサイズについて]]></title>
    <link href="http://luozengbin.github.io/blog/2015-04-22-%5B%E8%AA%BF%E6%9F%BB%5Djvm%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html"/>
    <updated>2015-04-22T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[調査]jvmのスタックサイズについて</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. JVMのスタック領域について</a></li>
<li><a href="#sec-3">3. Javaスレッドのスタックページ構成</a></li>
<li><a href="#sec-4">4. HotSpotの実装</a>
<ul>
<li><a href="#sec-4-1">4.1. glibc guard page</a></li>
<li><a href="#sec-4-2">4.2. HotSpot Guard Pages</a></li>
<li><a href="#sec-4-3">4.3. Normal Stack</a></li>
</ul>
</li>
<li><a href="#sec-5">5. スタックサイズの制御</a></li>
<li><a href="#sec-6">6. ulimit -sの影響範囲</a></li>
<li><a href="#sec-7">7. -Xssと-XX:ThreadStackSizeの違い</a></li>
<li><a href="#sec-8">8. 参考</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<p>
本記事の内容は以下環境を前提としています。
</p>
<ul class="org-ul">
<li>GNU/Linux x86_64
</li>
<li>OpenJDK 64-Bit 1.7.0_xx
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> JVMのスタック領域について</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>-Xss</code> 、 <code>-XX:ThreadStackSize</code> パラメータ値と <code>ulimit -s</code> リソースリミット制限値を混
乱している記事を見受けたため、HotSpotの中身を調べることにしました。
</p>

<p>
結論を先に、
</p>
<ul class="org-ul">
<li><code>ulimit -s</code> のスタック最大サイズ制限値は親プロセスであるJVMランチャーのみ適用される。
</li>
<li>JVMランチャーやJavaAPIから起動されたJavaスレッドのスタックサイズは  <code>-Xss</code> もしくは
<code>-XX:ThreadStackSize</code> パラメータ値が適用される。
</li>
<li>JVMランチャーから起動されたイニシャルスレッドのスタックサイズは <code>-Xss</code> パラメータの
み制御できる。
</li>
<li>JNI経由で外部からJVMにアタッチしたスレッドのスタックサイズはJVMの管理対象外である。
</li>
</ul>

<p>
<!-- more -->
</p>

<p>
JVMスタックに関して、公式のJVMスペックドキュメント (<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/">Java SE 7 Virtual Machine
Specification</a>) は次のように記載されています。
</p>

<ul class="org-ul">
<li><a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.5.2">2.5.2. Java Virtual Machine Stacks</a>
<pre class="example">
Each Java Virtual Machine thread has a private Java Virtual Machine stack, created at
the same time as the thread. A Java Virtual Machine stack stores frames (§2.6). A
Java Virtual Machine stack is analogous to the stack of a conventional language such
as C: it holds local variables and partial results, and plays a part in method
invocation and return. Because the Java Virtual Machine stack is never manipulated
directly except to push and pop frames, frames may be heap allocated. The memory for
a Java Virtual Machine stack does not need to be contiguous.
</pre>
<p>
※メモ： VMスタック内のFrameはヒープ上に配置されるかも知れない。
</p>
</li>
<li><a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.5.6">2.5.6. Native Method Stacks</a>
<pre class="example">
An implementation of the Java Virtual Machine may use conventional stacks,
colloquially called "C stacks," to support native methods (methods written in a
language other than the Java programming language). Native method stacks may also be
used by the implementation of an interpreter for the Java Virtual Machine's
instruction set in a language such as C. Java Virtual Machine implementations that
cannot load native methods and that do not themselves rely on conventional stacks
need not supply native method stacks. If supplied, native method stacks are typically
allocated per thread when each thread is created.
</pre>
</li>
</ul>

<p>
仕様上ではJVMに <code>Java Stack</code> と <code>Native Stack</code> ２種類のスタックメモリが定義されています。
</p>

<ul class="org-ul">
<li><code>Java Stack</code> ：Javaコード部分実行時に使われる領域
</li>
<li><code>Native Stack</code> ：はJNIライブラリを利用時に使われる領域
</li>
</ul>

<p>
以下は、JVMのメモリ論理構成イメージです。
</p>
<pre class="example">
+----------------+--------------+-------------+------------------------------------------------------+
|                |              |             |  +-----------------+  +----------+  +-------------+  |
|     Heap       |   PermGen    | Code Cache  |  | Program Counter |  |JavaStack |  |Native Stack |  |
|                |              |             |  +-----------------+  |          |  |             |  |
+----------------+--------------+-------------+                       +----------+  +-------------+  |
                                              |                       | Frame #2 |  |             |  |
                                              |                       +----------+  +-------------+  |
                                              |  &lt;&lt; Thread &gt;&gt;         | Frame #1 |  |             |  |
                                              |                       +----------+  +-------------+  |
                                              +------------------------------------------------------+
</pre>
<p>
<code>図1</code>
</p>

<p>
理論上は <code>Java Stack</code> と <code>Native Stack</code> がスレッド毎に領域が確保されいます。ただし、
実際のメモリページ構成はJDKの実装に依存するものです。
</p>

<p>
次の情報によると、HotSpotの実装は <code>Java Stack</code> と <code>Native Stack</code> が同じメモリ領域を共
有してる。
</p>

<ul class="org-ul">
<li><a href="http://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/toc.html">Troubleshooting Guide for HotSpot VM</a> の <a href="https://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/crashes.html#gbyzz">4.1.3 Crash due to Stack Overflow</a>
<pre class="example">
In the HotSpot implementation, Java methods share stack frames with C/C++ native
★~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
code, namely user native code and the virtual machine itself. Java methods generate
code that checks that stack space is available a fixed distance towards the end of
the stack so that the native code can be called without exceeding the stack
space. This distance towards the end of the stack is called “Shadow Pages.” The
size of the shadow pages is between 3 and 20 pages, depending on the platform. This
distance is tunable, so that applications with native code needing more than the
default distance can increase the shadow page size. The option to increase shadow
pages is -XX:StackShadowPages=n, where n is greater than the default stack shadow
pages for the platform.
</pre>
</li>

<li>OpenJDKの開発メーリングリストから拾った内容
<pre class="example">
The stock HotSpot VM (the one in Oracle's Java SE JDK and OpenJDK) uses the
same stack for Java and native methods for a Java thread; Java frames and
native frames can be mixed together in such a stack.
-Xss/-XX:ThreadStackSize controls the whole stack's size for Java threads.
</pre>
<p>
情報源： <a href="http://mail.openjdk.java.net/pipermail/hotspot-dev/2011-June/004272.html">What the difference between -Xss and -XX:ThreadStackSize is?</a>
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Javaスレッドのスタックページ構成</h2>
<div class="outline-text-2" id="text-3">
<p>
HotSpotの実装から見るとJVMから起動されたJavaスレッドのスタックページは次の形で構成さ
れると思います。VM内部スレッドやJITコンパイルスレッドのページ構成はまだ別です。
</p>
<pre class="example">
   --+--                         +------------------------+
     |                          /|                        |\
     |                         / |    StackRedPages       | -XX:StackRedPages=1(4Kb)
     |                        /  |                        |/
     |   HotSpot Guard Pages--   +------------------------+
     |                        \  |                        |\
     |                         \ |    StackYellowPages    | -XX:StackYellowPages=2(8Kb)
     |                          \|                        |/
     |                           +------------------------+
     |                          /|                        |\ ★Native Stackはここです★
     |                         / |    StackShadowPages    | -XX:StackShadowPages=20(80Kb)
-XX:ThreadStackSize           /  |                        |/
     |                       /   +------------------------+
     |                      /    |                        |\
     |                     /     |   +----------------+   | \
     |       Normal Stack--      |   |     Frame      |   |  \
     |                     \     |   +----------------+   |   \
     |                      \    |   |     Frame      |   |    ★Java Stackはここです★
     |                       \   |   +----------------+   |   /
     |                        \  |   |     Frame      |   |  /
     |                         \ |   +----------------+   | /
     |                          \|                        |/
   --+--                         +------------------------+
</pre>
<p>
<code>図2</code>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> HotSpotの実装</h2>
<div class="outline-text-2" id="text-4">
<p>
以下はHotSpotのソースコードのコメントに書かれたスタックページ構成図です。
</p>

<p>
<a href="http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9b0ca45cd756/src/os_cpu/linux_x86/vm/os_linux_x86.cpp#l668">jdk7:hotspot/src/os_cpu/linux_x86/vm/os_linux_x86.cpp</a>
</p>
<pre class="example">
// Java thread:
//
//   Low memory addresses
//    +------------------------+
//    |                        |\  JavaThread created by VM does not have glibc
//    |    glibc guard page    | - guard, attached Java thread usually has
//    |                        |/  1 page glibc guard.
// P1 +------------------------+ Thread::stack_base() - Thread::stack_size()
//    |                        |\
//    |  HotSpot Guard Pages   | - red and yellow pages
//    |                        |/
//    +------------------------+ JavaThread::stack_yellow_zone_base()
//    |                        |\
//    |      Normal Stack      | -
//    |                        |/
// P2 +------------------------+ Thread::stack_base()
//
// Non-Java thread:
//
//   Low memory addresses
//    +------------------------+
//    |                        |\
//    |  glibc guard page      | - usually 1 page
//    |                        |/
// P1 +------------------------+ Thread::stack_base() - Thread::stack_size()
//    |                        |\
//    |      Normal Stack      | -
//    |                        |/
// P2 +------------------------+ Thread::stack_base()
//
// ** P1 (aka bottom) and size ( P2 = P1 - size) are the address and stack size returned from
//    pthread_attr_getstack()
</pre>
<p>
<code>図3</code>
</p>

<p>
図の内容によるとJavaスレッドと非Javaスレッドのスタックページ構成が異なる。
以下はJVMの非Javaスレッドのリストです。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">スレッド名</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">VM thread</td>
<td class="left">JVM自身のコアスレッド</td>
</tr>

<tr>
<td class="left">Periodic task thread</td>
<td class="left">WatcherThreadのシングルトンインスタンス、定義的なVMタスクを実行する</td>
</tr>

<tr>
<td class="left">GC threads</td>
<td class="left">その名の通りです、メモリ管理自動化役を務める</td>
</tr>

<tr>
<td class="left">Compiler threads</td>
<td class="left">ByteCodeからアセンブラにコンパイルするスレッド</td>
</tr>

<tr>
<td class="left">Signal dispatcher thread</td>
<td class="left">外部からシグナルをハンドリングする役を務める</td>
</tr>
</tbody>
</table>

<p>
図3の各領域についてソースコードを見ながら解説していきます。
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> glibc guard page</h3>
<div class="outline-text-3" id="text-4-1">
<p>
<code>glibc guard page</code> はスタックポインタのオーバーフローを防ぐための－ガードページ。Java
スレッドには <code>HotSpot Guard Pages</code> が別途用意されているため、この領域のサイズが0であ
る。非Javaスレッドはスタック頂上位置に1ページ分のガードページが割り当てられる。以下は
その実装内容です。
</p>

<ul class="org-ul">
<li>スレッド作成時にglibcの <a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/pthread_attr_setguardsize.3.html">pthread_attr_setguardsize</a> 関数にてガードページを作成してい
る

<p>
<a href="http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9b0ca45cd756/src/os/linux/vm/os_linux.cpp#l923">jdk7/hotspot/src/os/linux/vm/os_linux.cpp#l923</a>
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00cd66;">// </span><span style="color: #00cd66;">Thread start routine for all newly created threads</span>
<span style="color: #ffffff;">static</span> <span style="color: #7fffd4;">void</span> *<span style="color: #98fb98;">java_start</span>(<span style="color: #7fffd4;">Thread</span> *<span style="color: #9acd32;">thread</span>) {
    ..............
    <span style="color: #00cd66;">// </span><span style="color: #00cd66;">glibc guard page</span>
    pthread_attr_setguardsize(&amp;attr, <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::default_guard_size(thr_type));
    ..............
}
</pre>
</div>
</li>
<li>スレッド種別によってガードページのサイズを決める

<p>
<a href="http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9b0ca45cd756/src/os_cpu/linux_x86/vm/os_linux_x86.cpp#l662">jdk7/hotspot/src/os_cpu/linux_x86/vm/os_linux_x86.cpp#l662</a>
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #7fffd4;">size_t</span> <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::<span style="color: #98fb98;">default_guard_size</span>(<span style="color: #40e0d0;">os</span>::<span style="color: #7fffd4;">ThreadType</span> <span style="color: #9acd32;">thr_type</span>) {
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Creating guard page is very expensive. Java thread has HotSpot</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">guard page, only enable glibc guard page for non-Java threads.</span>
  <span style="color: #ffffff;">return</span> (thr_type == java_thread ? 0 : page_size());
}
</pre>
</div>
</li>
</ul>

<p>
<code>glibc guard page</code> の詳細について以下の情報が参考になると思います。
</p>
<ul class="org-ul">
<li><a href="http://docs.oracle.com/cd/E19455-01/806-2732/attrib-22/index.html">スタックガードの大きさの設定</a>
</li>
<li><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/pthread_attr_setguardsize.3.html">PTHREAD_ATTR_SETGUARDSIZE</a>
</li>
<li><a href="http://codezine.jp/article/detail/1970">pthreadについて（スタックサイズ）</a>
</li>
<li><a href="http://www.nminoru.jp/~nminoru/programming/stackoverflow_handling.html#get-stack-region">スタックオーバーフローのハンドリング (Stack Overflow Handling)</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> HotSpot Guard Pages</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Javaスレッドスタックオーバーフローを検出するために書き込み不可の <code>HotSpot Guard
Pages</code> 領域がスタック領域のトップ位置に設けている。また <code>HotSpot Guard Pages</code> は
<code>StackYellowPages</code> と <code>StackRedPages</code> から構成されている。
</p>

<p>
<code>StackYellowPages</code> はスタックオーバーフローの緩衝域として、余分のメモリーを割り当てま
す。 スタックポインターが <code>StackRedPages</code> まで行くとStackOverflowErrorが起きる。
</p>

<p>
以下はページの構成イメージです。
</p>
<pre class="example">
          +------------------------+
         /|                        |\
HotSpot / |    StackRedPages       | - 1ページ (4Kb)
Guard  /  |                        |/
Pages     +------------------------+
       \  |                        |\
        \ |    StackYellowPages    | - 2ページ (8Kb)
         \|                        |/
          +------------------------+
          |                        |
          |      Normal Stack      |
          |                        |
          +------------------------+
</pre>
<p>
<code>図4</code>
</p>

<p>
Linux/x86_64環境に置いて、 <code>StackYellowPages</code> と <code>StackRedPages</code> の初期値が2と1である。
それぞれの値は <code>-XX:StackYellowPages</code> と <code>-XX:StackRedPages</code> パラメータにて変更するこ
とが可能です。
</p>

<p>
下記は <code>HotSpot Guard Pages</code> の割当処理ロジックです。
</p>

<ul class="org-ul">
<li>Javaスレッド起動時のガードページ割当位置やサイズの計算処理

<p>
<a href="http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9b0ca45cd756/src/share/vm/runtime/thread.cpp#l2257">jdk7:openjdk/hotspot/src/share/vm/runtime/thread.cpp</a>
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #7fffd4;">void</span> <span style="color: #40e0d0;">JavaThread</span>::<span style="color: #98fb98;">create_stack_guard_pages</span>() {
  <span style="color: #ffffff;">if</span> (! <span style="color: #40e0d0;">os</span>::uses_stack_guard_pages() || _stack_guard_state != stack_guard_unused) <span style="color: #ffffff;">return</span>;

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733; &#12460;&#12540;&#12489;&#12506;&#12540;&#12472;&#12398;&#20301;&#32622;&#12392;&#12469;&#12452;&#12474;&#12398;&#35336;&#31639;</span>
  <span style="color: #7fffd4;">address</span> <span style="color: #9acd32;">low_addr</span> = stack_base() - stack_size();
  <span style="color: #7fffd4;">size_t</span> <span style="color: #9acd32;">len</span> = (StackYellowPages + StackRedPages) * <span style="color: #40e0d0;">os</span>::vm_page_size();

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733; &#12460;&#12540;&#12489;&#12506;&#12540;&#12472;&#21106;&#24403;&#20966;&#29702;&#12399;&#12503;&#12521;&#12483;&#12488;&#12501;&#12457;&#12540;&#12512;&#20381;&#23384;&#12398;&#12383;&#12417;&#12289;&#21029;&#38306;&#25968;&#12434;&#12467;&#12540;&#12523;</span>
  <span style="color: #7fffd4;">int</span> <span style="color: #9acd32;">allocate</span> = <span style="color: #40e0d0;">os</span>::allocate_stack_guard_pages();
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">warning("Guarding at " PTR_FORMAT " for len " SIZE_FORMAT "\n", low_addr, len);</span>

  <span style="color: #ffffff;">if</span> (allocate &amp;&amp; !<span style="color: #40e0d0;">os</span>::create_stack_guard_pages((<span style="color: #7fffd4;">char</span> *) low_addr, len)) {
    warning(<span style="color: #bdb76b;">"Attempt to allocate stack guard pages failed."</span>);
    <span style="color: #ffffff;">return</span>;
  }

  <span style="color: #ffffff;">if</span> (<span style="color: #40e0d0;">os</span>::guard_memory((<span style="color: #7fffd4;">char</span> *) low_addr, len)) {
    _stack_guard_state = stack_guard_enabled;
  } <span style="color: #ffffff;">else</span> {
    warning(<span style="color: #bdb76b;">"Attempt to protect stack guard pages failed."</span>);
    <span style="color: #ffffff;">if</span> (<span style="color: #40e0d0;">os</span>::uncommit_memory((<span style="color: #7fffd4;">char</span> *) low_addr, len)) {
      warning(<span style="color: #bdb76b;">"Attempt to deallocate stack guard pages failed."</span>);
    }
  }
}
</pre>
</div>
</li>

<li>ガードページ割当処理

<p>
<a href="http://hg.openjdk.java.net/jdk7u/jdk7u60/hotspot/file/ba66650acf63/src/os/linux/vm/os_linux.cpp#l3062">jdk7u60:openjdk/hotspot/src/os/linux/vm/os_linux.cpp</a>
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #7fffd4;">bool</span> <span style="color: #40e0d0;">os</span>::<span style="color: #98fb98;">pd_create_stack_guard_pages</span>(<span style="color: #7fffd4;">char</span>* <span style="color: #9acd32;">addr</span>, <span style="color: #7fffd4;">size_t</span> <span style="color: #9acd32;">size</span>) {

  <span style="color: #ffffff;">if</span> (<span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::is_initial_thread()) {
    <span style="color: #00cd66;">// </span><span style="color: #00cd66;">As we manually grow stack up to bottom inside create_attached_thread(),</span>
    <span style="color: #00cd66;">// </span><span style="color: #00cd66;">it's likely that os::Linux::initial_thread_stack_bottom is mapped and</span>
    <span style="color: #00cd66;">// </span><span style="color: #00cd66;">we don't need to do anything special.</span>
    <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Check it first, before calling heavy function.</span>
    <span style="color: #7fffd4;">uintptr_t</span> <span style="color: #9acd32;">stack_extent</span> = (<span style="color: #7fffd4;">uintptr_t</span>) <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::initial_thread_stack_bottom();
    <span style="color: #7fffd4;">unsigned</span> <span style="color: #7fffd4;">char</span> <span style="color: #9acd32;">vec</span>[1];

    <span style="color: #ffffff;">if</span> (mincore((<span style="color: #7fffd4;">address</span>)stack_extent, <span style="color: #40e0d0;">os</span>::vm_page_size(), vec) == -1) {
      <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Fallback to slow path on all errors, including EAGAIN</span>
      stack_extent = (<span style="color: #7fffd4;">uintptr_t</span>) get_stack_commited_bottom(
                                    <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::initial_thread_stack_bottom(),
                                    (<span style="color: #7fffd4;">size_t</span>)addr - stack_extent);
    }

    <span style="color: #ffffff;">if</span> (stack_extent &lt; (<span style="color: #7fffd4;">uintptr_t</span>)addr) {
      ::munmap((<span style="color: #7fffd4;">void</span>*)stack_extent, (<span style="color: #7fffd4;">uintptr_t</span>)(addr - stack_extent));
    }
  }

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;&#12371;&#12371;&#12363;&#12425; mmap&#12471;&#12473;&#12486;&#12512;&#12467;&#12540;&#12523;&#12364;&#30330;&#34892;&#12373;&#12428;&#12427;&#12290;</span>
  <span style="color: #00cd66;">//  </span><span style="color: #00cd66;">&#26368;&#24460;&#12398;&#24341;&#25968;&#12395;&#26360;&#12365;&#36796;&#12415;&#19981;&#21487;&#12398;&#12501;&#12521;&#12464;&#12364;&#20184;&#19982;&#12373;&#12428;&#12383;</span>
  <span style="color: #ffffff;">return</span> <span style="color: #40e0d0;">os</span>::commit_memory(addr, size, !ExecMem);
}
</pre>
</div>
</li>
</ul>

<p>
以下は <code>JBoss AS7</code> アプリケーションサーバ実行時にワーカスレッドのスタック仮想メモリ割
当状況です。
</p>

<pre class="example">
$ cat /proc/`ps -ef | grep [j]boss.modules.system | awk '{print $2}'`/smaps
...省略...
7ff751076000-7ff751079000 ---p 00000000 00:00 0
Size:                 12 kB    ★説明: StackRedPages(4Kb) + StackYellowPages(8Kb) = 12Kb
Rss:                   0 kB
Pss:                   0 kB
Shared_Clean:          0 kB
Shared_Dirty:          0 kB
Private_Clean:         0 kB
Private_Dirty:         0 kB
Referenced:            0 kB
Anonymous:             0 kB
AnonHugePages:         0 kB
Swap:                  0 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
Locked:                0 kB
VmFlags: mr mw me ac          ★説明:書き込み不可
7ff751079000-7ff751177000 rw-p 00000000 00:00 0                          [stack:21275]
Size:               1016 kB   ★説明: ここからNormal Stackページ
Rss:                 108 kB
Pss:                 108 kB
Shared_Clean:          0 kB
Shared_Dirty:          0 kB
Private_Clean:         0 kB
Private_Dirty:       108 kB
Referenced:          108 kB
Anonymous:           108 kB
AnonHugePages:         0 kB
Swap:                  0 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
Locked:                0 kB
VmFlags: rd wr mr mw me ac
...省略...
</pre>

<p>
次のSystemTapスクリプトで <code>HotSpot Guard Pages</code> の割当処理をトレースしてみた。
</p>

<p>
<code>jvm_memory_trace.stp</code>
</p>
<pre class="example">
#!/usr/bin/stap -p4
probe process("/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so").function("commit_memory_impl")
{
   printf("---------------------------------------------------------\n")
   printf("%d\t%s\n", tid(), $$parms)
   print_ustack(ubacktrace())
}
</pre>

<p>
出力結果
</p>
<pre class="example">
  |$ stap jvm_memory_trace.stp -c "java  -version"
  |Using a compile server.
  |WARNING: Missing unwind data for module, rerun with 'stap -d ...dk-1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/jli/libjli.so'
  |WARNING: Missing unwind data for module, rerun with 'stap -d /usr/lib64/libpthread-2.17.so'
  |java version "1.7.0_75"
  |OpenJDK Runtime Environment (rhel-2.5.4.7.el7_1-x86_64 u75-b13)
  |OpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)
  |
  |★省略★
  |--------------------------------------------------------------------------------------------------------------
①|12179	exec=0x0 size=0x3000 addr=0x7f1d05b57000  ★commit_memory_impl関数実行時の引数情報
  | 0x7f1d04808371 : _ZN2os16pd_commit_memoryEPcmb+0x1/0xf0 [...1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so]
  | 0x7f1d04802dee : _ZN2os13commit_memoryEPcmb+0x2e/0xd0 [...1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so]
②| 0x7f1d048092df : _ZN2os27pd_create_stack_guard_pagesEPcm+0x7f/0x180 [...1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so]
  | 0x7f1d04945519 : _ZN7Threads9create_vmEP14JavaVMInitArgsPb+0x339/0x1550 [...1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so]
  | 0x7f1d0463fca7 : JNI_CreateJavaVM+0x67/0x2a0 [...1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so]
  | 0x7f1d0562aa68 : 0x7f1d0562aa68 [...dk-1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/jli/libjli.so+0x2a68/0x20e000]
  |--------------------------------------------------------------------------------------------------------------
  |★以降省略★
</pre>

<p>
出力結果に①の <a href="http://hg.openjdk.java.net/jdk7u/jdk7u60/hotspot/file/ba66650acf63/src/os/linux/vm/os_linux.cpp#l2728">commit_memory_impl</a> 仮想メモリ割当処理の第２引数にメモリサイズを指定し
ています。 <code>size=0x3000</code> の値が16進数ですので、10進数に変換すると12Kbです。予測通りで
すね。
</p>

<p>
gdbを用いて上記出力結果から②のソースコード位置を特定する方法を以下に示す。
</p>
<pre class="example">
$ gdb /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-64.el7
★一部内容省略★
Reading symbols from /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so...Reading symbols from /usr/lib/debug/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75-2.5.4.7.el7_1.x86_64/jre/lib/amd64/server/libjvm.so.debug...done.
done.
★出力結果から関数名ぽいの文字列で関数を探す
(gdb) info functions pd_create_stack_guard_pages
All functions matching regular expression "pd_create_stack_guard_pages":

★検索結果
File /usr/src/debug/java-1.7.0-openjdk-1.7.0.75-2.5.4.7.el7_1.x86_64/openjdk/hotspot/src/os/linux/vm/os_linux.cpp:
bool os::pd_create_stack_guard_pages(char*, unsigned long);
(gdb)
</pre>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> Normal Stack</h3>
<div class="outline-text-3" id="text-4-3">
<p>
Javaスレッドを前提に置いて、 <code>Normal Stack</code> には通常Javaメソッド実行時のフレーム情報
が格納される。ただし、スレッドからC/C++メソッドを実行する時も <code>Normal Stack</code> が利用さ
れる。スタックのトップ位置にC/C++メソッド実行用の <code>StackShadowPages</code> が設けられている。
Linux/x86_64環境に置いて <code>StackShadowPages</code> の初期値が20である。
</p>

<pre class="example">
              +------------------------+
             /|                        |\
            / |    StackShadowPages    | -XX:StackShadowPages=20(80Kb)
           /  |                        |/ ★Native Stackはここです!
          /   +------------------------+
         /    |                        |\
        /     |   +----------------+   | \ 
Normal Stack  |   |     Frame      |   |  \
        \     |   +----------------+   |   \
         \    |   |     Frame      |   |    - ★Java Stackはここです！
          \   |   +----------------+   |   /
           \  |   |     Frame      |   |  /
            \ |   +----------------+   | /
             \|                        |/
              +------------------------+
</pre>
<p>
<code>図5</code>
</p>

<p>
以下は <code>StackShadowPages</code> 初期値の代入処理ロジックです。
</p>

<p>
<a href="http://hg.openjdk.java.net/jdk7u/jdk7u60/hotspot/file/ba66650acf63/src/cpu/x86/vm/globals_x86.hpp#l60">jdk7:hotspot/src/cpu/x86/vm/globals_x86.hpp#l60</a>
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #b0c4de;">#ifdef</span> AMD64
<span style="color: #00cd66;">// </span><span style="color: #00cd66;">Very large C++ stack frames using solaris-amd64 optimized builds</span>
<span style="color: #00cd66;">// </span><span style="color: #00cd66;">due to lack of optimization caused by C++ compiler bugs</span>
define_pd_global(intx, StackShadowPages, NOT_WIN64(20) WIN64_ONLY(6) DEBUG_ONLY(+2));
<span style="color: #b0c4de;">#else</span>
define_pd_global(intx, StackShadowPages, 6 DEBUG_ONLY(+5));
<span style="color: #b0c4de;">#endif</span> <span style="color: #00cd66;">// </span><span style="color: #00cd66;">AMD64</span>
</pre>
</div>

<p>
<code>StackShadowPages</code> に関して以下の情報が参考になると思います。
</p>
<ul class="org-ul">
<li><a href="https://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/crashes.html#gbyzz">Troubleshooting Guide for HotSpot VM 4.1.3 Crash due to Stack Overflow</a>
</li>
<li><a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7059899a">JDK-7059899 : Stack overflows in Java code cause 64-bit JVMs to exit due to SIGSEGV</a>
</li>
<li><a href="https://access.redhat.com/solutions/698483">What does the StackShadowPages JVM setting do?</a>
<pre class="example">
StackShadowPages reserves a portion of the thread stack for native layer
allocations. The page size usually is 4096b, which mean that 20 pages would occupy
80Kb. The thread stack is sized through -Xss.

Consider some config examples:

   -Xss1024k -XX:StackShadowPages=10

   [       984kb java stack    | 40kb native stack]

   -Xss1024k -XX:StackShadowPages=20

   [       944kb java stack    |   80kb native stack]

   -Xss512k -XX:StackShadowPages=10

   [ 472kb java stack | 40kb native stack]

If you decrease just -Xss, the overall stack is decreased, but the StackShadowPages
native reservation is not; only the java portion would lose space. Likewise if you
only increase -Xss, only the java portion gains space with the increased stack.

If you increase StackShadowPages, the java portion becomes smaller so that the native
portion can be larger. If the native portion of a stack is exhausted, the JVM can
fatally crash so sometimes StackShadowPages needs to be increased.
</pre>
</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> スタックサイズの制御</h2>
<div class="outline-text-2" id="text-5">
<p>
従いましてJava Methodに使えるスタック領域(Java Stack)のサイズは次の式で計算出来る。
</p>
<font color="red"><strong>
<p>
Java Satck Size = Thread::stack_size() - ((StackRedPages + StackYellowPages + StackShadowPages) * PageSize)
</p>
</strong></font>

<p>
<code>Thread::stack_size()</code> の値はスレッド起動時にglibcの <a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/pthread_attr_setstacksize.3.html">pthread_attr_setstacksize</a> 関数を
用いて設定される。以下はHotSpotの実装です。
</p>

<ul class="org-ul">
<li>JVM起動時に実行される処理
<a href="http://hg.openjdk.java.net/jdk7u/jdk7u60/hotspot/file/ba66650acf63/src/os/linux/vm/os_linux.cpp#l4820">jdk7/hotspot/src/os/linux/vm/os_linux.cpp#4820</a>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00cd66;">// </span><span style="color: #00cd66;">this is called _after_ the global arguments have been parsed</span>
<span style="color: #7fffd4;">jint</span> <span style="color: #40e0d0;">os</span>::<span style="color: #98fb98;">init_2</span>(<span style="color: #7fffd4;">void</span>)
{
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;&#19968;&#37096;&#30465;&#30053;&#9733;</span>


  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;&#12473;&#12524;&#12483;&#12489;&#12395;&#21106;&#24403;&#12427;&#12473;&#12479;&#12483;&#12463;&#12469;&#12452;&#12474;&#12398;&#26368;&#23567;&#35377;&#23481;&#20516;&#12398;&#35336;&#31639;</span>

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Check minimum allowable stack size for thread creation and to initialize</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">the java system classes, including StackOverflowError - depends on page</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">size.  Add a page for compiler2 recursion in main thread.</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Add in 2*BytesPerWord times page size to account for VM stack during</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">class initialization depending on 32 or 64 bit VM.</span>
  <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::min_stack_allowed = MAX2(<span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::min_stack_allowed,
            (<span style="color: #7fffd4;">size_t</span>)(StackYellowPages+StackRedPages+StackShadowPages) * <span style="color: #40e0d0;">Linux</span>::page_size() +
                    (2*BytesPerWord COMPILER2_PRESENT(+1)) * <span style="color: #40e0d0;">Linux</span>::vm_default_page_size());

<span style="color: #b0c4de;">#ifdef</span> ZERO
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">If this is Zero, allow at the very minimum one page each for the</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Zero stack and the native stack.  This won't make any difference</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">for 4k pages, but is significant for large pages.</span>
  <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::min_stack_allowed = MAX2(<span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::min_stack_allowed,
             (<span style="color: #7fffd4;">size_t</span>)(StackYellowPages+StackRedPages+StackShadowPages+2) * <span style="color: #40e0d0;">Linux</span>::page_size());
<span style="color: #b0c4de;">#endif</span>

  <span style="color: #7fffd4;">size_t</span> <span style="color: #9acd32;">threadStackSizeInBytes</span> = ThreadStackSize * K;
  <span style="color: #ffffff;">if</span> (threadStackSizeInBytes != 0 &amp;&amp;
      threadStackSizeInBytes &lt; <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::min_stack_allowed) {
        tty-&gt;print_cr(<span style="color: #bdb76b;">"\nThe stack size specified is too small, "</span>
                      <span style="color: #bdb76b;">"Specify at least %dk"</span>,
                      <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::min_stack_allowed/ K);
        <span style="color: #ffffff;">return</span> JNI_ERR;
  }

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;-XX:ThreadStackSize&#12398;&#20516;&#12434;&#38745;&#30340;_stack_size_at_create&#22793;&#25968;&#12395;&#20195;&#20837;&#12377;&#12427;</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Make the stack size a multiple of the page size so that</span>
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">the yellow/red zones can be guarded.</span>
  <span style="color: #40e0d0;">JavaThread</span>::set_stack_size_at_create(round_to(threadStackSizeInBytes,
        vm_page_size()));

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;&#12452;&#12491;&#12471;&#12515;&#12523;&#12473;&#12524;&#12483;&#12489;&#12398;&#12473;&#12479;&#12483;&#12463;&#12469;&#12452;&#12474;&#35373;&#23450;&#20966;&#29702;&#65288;&#9733;TODO: &#21029;&#36884;&#35519;&#26619;&#12377;&#12427;&#65289;</span>
  <span style="color: #40e0d0;">Linux</span>::capture_initial_stack(<span style="color: #40e0d0;">JavaThread</span>::stack_size_at_create());

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;&#20197;&#38477;&#30465;&#30053;&#9733;</span>
</pre>
</div>
</li>
<li>新規スレッド起動時の処理
<a href="http://hg.openjdk.java.net/jdk7u/jdk7u60/hotspot/file/ba66650acf63/src/os/linux/vm/os_linux.cpp#l901">jdk7:hotspot/src/os/linux/vm/os_linux.cpp#901</a>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #7fffd4;">bool</span> <span style="color: #40e0d0;">os</span>::<span style="color: #98fb98;">create_thread</span>(<span style="color: #7fffd4;">Thread</span>* <span style="color: #9acd32;">thread</span>, <span style="color: #7fffd4;">ThreadType</span> <span style="color: #9acd32;">thr_type</span>, <span style="color: #7fffd4;">size_t</span> <span style="color: #9acd32;">stack_size</span>) {

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;&#19968;&#37096;&#30465;&#30053;&#9733;</span>

  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;&#12473;&#12524;&#12483;&#12489;&#31278;&#21029;&#27598;&#12395;&#12473;&#12479;&#12483;&#12463;&#12469;&#12452;&#12474;&#12434;&#27770;&#12417;&#12427;</span>
  <span style="color: #ffffff;">if</span> (<span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::supports_variable_stack_size()) {
    <span style="color: #00cd66;">// </span><span style="color: #00cd66;">calculate stack size if it's not specified by caller</span>
    <span style="color: #ffffff;">if</span> (stack_size == 0) {
      stack_size = <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::default_stack_size(thr_type);

      <span style="color: #ffffff;">switch</span> (thr_type) {

      <span style="color: #00cd66;">//</span><span style="color: #00cd66;">&#9733;Java&#12527;&#12540;&#12459;&#12473;&#12524;&#12483;&#12489;&#12398;&#22580;&#21512;</span>
      <span style="color: #ffffff;">case</span> <span style="color: #40e0d0;">os</span>::java_thread:
        <span style="color: #00cd66;">// </span><span style="color: #00cd66;">Java threads use ThreadStackSize which default value can be</span>
        <span style="color: #00cd66;">// </span><span style="color: #00cd66;">changed with the flag -Xss</span>
        assert (<span style="color: #40e0d0;">JavaThread</span>::stack_size_at_create() &gt; 0, <span style="color: #bdb76b;">"this should be set"</span>);
        stack_size = <span style="color: #40e0d0;">JavaThread</span>::stack_size_at_create();
        <span style="color: #ffffff;">break</span>;

      <span style="color: #00cd66;">//</span><span style="color: #00cd66;">&#9733;JIT&#12467;&#12531;&#12497;&#12452;&#12521;&#12473;&#12524;&#12483;&#12489;&#12398;&#22580;&#21512;</span>
      <span style="color: #ffffff;">case</span> <span style="color: #40e0d0;">os</span>::compiler_thread:
        <span style="color: #ffffff;">if</span> (CompilerThreadStackSize &gt; 0) {
          stack_size = (<span style="color: #7fffd4;">size_t</span>)(CompilerThreadStackSize * K);
          <span style="color: #ffffff;">break</span>;
        } <span style="color: #00cd66;">// </span><span style="color: #00cd66;">else fall through:</span>
          <span style="color: #00cd66;">// </span><span style="color: #00cd66;">use VMThreadStackSize if CompilerThreadStackSize is not defined</span>

      <span style="color: #00cd66;">//</span><span style="color: #00cd66;">&#9733;VM&#12473;&#12524;&#12483;&#12489;&#12289;GC&#12473;&#12524;&#12483;&#12489;&#12289;&#12454;&#12457;&#12483;&#12481;&#12515;&#12540;&#12473;&#12524;&#12483;&#12489;&#12398;&#22580;&#21512;</span>
      <span style="color: #ffffff;">case</span> <span style="color: #40e0d0;">os</span>::vm_thread:
      <span style="color: #ffffff;">case</span> <span style="color: #40e0d0;">os</span>::pgc_thread:
      <span style="color: #ffffff;">case</span> <span style="color: #40e0d0;">os</span>::cgc_thread:
      <span style="color: #ffffff;">case</span> <span style="color: #40e0d0;">os</span>::watcher_thread:
        <span style="color: #ffffff;">if</span> (VMThreadStackSize &gt; 0) stack_size = (<span style="color: #7fffd4;">size_t</span>)(VMThreadStackSize * K);
        <span style="color: #ffffff;">break</span>;
      }
    }

    stack_size = MAX2(stack_size, <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::min_stack_allowed);
    <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;glic&#38306;&#25968;&#29992;&#12356;&#12390;stack&#38936;&#22495;&#12434;&#30906;&#20445;&#12377;&#12427;</span>
    pthread_attr_setstacksize(&amp;attr, stack_size);

    <span style="color: #00cd66;">// </span><span style="color: #00cd66;">&#9733;&#20197;&#38477;&#30465;&#30053;&#9733;</span>
</pre>
</div>
</li>
</ul>

<p>
以上コードの通り、JVMから起動されたスレッドの種別毎のスタックサイズが下記XXパラメータ値が適用されてい
る。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">引数</th>
<th scope="col" class="left">Linux/x86_64環境初期値</th>
<th scope="col" class="left">適用範囲</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">-XX:ThreadStackSize</td>
<td class="left">1M</td>
<td class="left">Javaスレッド</td>
</tr>

<tr>
<td class="left">-XX:VMThreadStackSize</td>
<td class="left">1M</td>
<td class="left">VM thread、GC threads、VM Periodic Task Threadなど</td>
</tr>

<tr>
<td class="left">-XX:CompilerThreadStackSize</td>
<td class="left">4M</td>
<td class="left">C1 C2 CompilerThread</td>
</tr>
</tbody>
</table>

<p>
以下は実機にて確認された各パラメータの初期値です。
</p>
<pre class="example">
$ java -XX:+PrintFlagsFinal -version | grep -e "CompilerThreadStackSize\|ThreadStackSize\|VMThreadStackSize"
     intx CompilerThreadStackSize                   = 0               {pd product}
     intx ThreadStackSize                           = 1024            {pd product}
     intx VMThreadStackSize                         = 1024            {pd product}
java version "1.7.0_75"
OpenJDK Runtime Environment (rhel-2.5.4.7.el7_1-x86_64 u75-b13)
OpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)
</pre>

<p>
<code>CompilerThreadStackSize</code> が指定しない場合下記コードにて初期値が代入される。
</p>

<p>
<a href="http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9b0ca45cd756/src/os_cpu/linux_x86/vm/os_linux_x86.cpp#l652">jdk7:hotspot/src/os_cpu/linux_x86/vm/os_linux_x86.cpp#652</a>
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00cd66;">// </span><span style="color: #00cd66;">return default stack size for thr_type</span>
<span style="color: #7fffd4;">size_t</span> <span style="color: #40e0d0;">os</span>::<span style="color: #40e0d0;">Linux</span>::<span style="color: #98fb98;">default_stack_size</span>(<span style="color: #40e0d0;">os</span>::<span style="color: #7fffd4;">ThreadType</span> <span style="color: #9acd32;">thr_type</span>) {
  <span style="color: #00cd66;">// </span><span style="color: #00cd66;">default stack size (compiler thread needs larger stack)</span>
<span style="color: #b0c4de;">#ifdef</span> AMD64
  <span style="color: #7fffd4;">size_t</span> <span style="color: #9acd32;">s</span> = (thr_type == <span style="color: #40e0d0;">os</span>::compiler_thread ? 4 * M : 1 * M);
<span style="color: #b0c4de;">#else</span>
  <span style="color: #7fffd4;">size_t</span> <span style="color: #9acd32;">s</span> = (thr_type == <span style="color: #40e0d0;">os</span>::compiler_thread ? 2 * M : 512 * K);
<span style="color: #b0c4de;">#endif</span> <span style="color: #00cd66;">// </span><span style="color: #00cd66;">AMD64</span>
  <span style="color: #ffffff;">return</span> s;
}
</pre>
</div>

<p>
次のサンプルプログラムを実行して、各スレッドのスタックサイズ値を実測してみる。
</p>

<p>
<code>HelloWorld.java</code>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffffff;">public</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">HelloWorld</span> <span style="color: #ffffff;">implements</span> <span style="color: #7fffd4;">Runnable</span> {

    <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">run</span>(){
        <span style="color: #ffffff;">while</span>(<span style="color: #40e0d0;">true</span>) {
            <span style="color: #ffffff;">try</span> {
                Thread.sleep(1 * 1000L);
                System.out.println(Thread.currentThread().toString() + <span style="color: #bdb76b;">": Hello World"</span>);
            } <span style="color: #ffffff;">catch</span> (<span style="color: #7fffd4;">Exception</span> <span style="color: #9acd32;">e</span>) {
            }
        }
    }

    <span style="color: #ffffff;">public</span> <span style="color: #ffffff;">static</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">main</span>(<span style="color: #7fffd4;">String</span>[] <span style="color: #9acd32;">args</span>) <span style="color: #ffffff;">throws</span> <span style="color: #7fffd4;">Exception</span> {
        <span style="color: #7fffd4;">Thread</span>[] <span style="color: #9acd32;">t_arry</span> =  <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">Thread</span>[5];
        <span style="color: #ffffff;">for</span> (<span style="color: #7fffd4;">int</span> <span style="color: #9acd32;">i</span> = 0; i &lt; t_arry.<span style="color: #7fffd4;">length</span>; i++) {
            t_arry[i]  =  <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">Thread</span>(<span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">HelloWorld</span>());
            t_arry[i].start();
        }
        <span style="color: #ffffff;">for</span> (<span style="color: #7fffd4;">int</span> <span style="color: #9acd32;">i</span> = 0; i &lt; t_arry.<span style="color: #7fffd4;">length</span>; i++) {
            t_arry[i].join();
        }

    }
}
</pre>
</div>

<p>
スタックサイズの実測値は次のスクリプトで取得しています。
</p>

<p>
<code>jvm_stacksize.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #00cd66;">#</span><span style="color: #00cd66;">!/bin/</span><span style="color: #ffffff;">sh</span>

<span style="color: #ffffff;">if</span> [ ! $<span style="color: #9acd32;">#</span> -eq 1 ]; <span style="color: #ffffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #bdb76b;">"Usage ${0} &lt;JVM PID&gt;"</span>
    <span style="color: #ffffff;">exit</span> 1
<span style="color: #ffffff;">fi</span>

<span style="color: #b0c4de;">printf</span> <span style="color: #bdb76b;">"[ PID ]\t[StackSize]\t[GuardPages]\t[Thread Name]\n"</span>

<span style="color: #00cd66;"># </span><span style="color: #00cd66;">jstack&#12398;&#20986;&#21147;&#32080;&#26524;&#12363;&#12425;&#12473;&#12524;&#12483;&#12489;ID&#12392;&#21517;&#21069;&#12434;&#25277;&#20986;&#12377;&#12427;</span>
jstack $<span style="color: #9acd32;">1</span> | grep nid | sed -e <span style="color: #bdb76b;">"s/^\"\(.*\)\".*nid=\(0x[0-9|a-z]*\).*$/\2,\1/"</span> | sort | <span style="color: #ffffff;">while </span><span style="color: #b0c4de;">read</span> line
<span style="color: #ffffff;">do</span>
    <span style="color: #00cd66;"># </span><span style="color: #00cd66;">&#12473;&#12524;&#12483;&#12489;ID&#12434;&#20999;&#12426;&#20986;&#12377;</span>
    <span style="color: #9acd32;">pid_hex</span>=<span style="color: #fa8072;">`echo "${line}" | awk -F"," '{print $1}'`</span>

    <span style="color: #00cd66;"># </span><span style="color: #00cd66;">&#12473;&#12524;&#12483;&#12489;&#21517;&#12434;&#20999;&#12426;&#20986;&#12377;</span>
    <span style="color: #9acd32;">thread_name</span>=<span style="color: #fa8072;">`echo "${line}" | awk -F"," '{print $2}'`</span>

    <span style="color: #00cd66;"># </span><span style="color: #00cd66;">&#12473;&#12524;&#12483;&#12489;ID&#12434;10&#36914;&#25968;&#12395;&#22793;&#25563;</span>
    <span style="color: #9acd32;">pid</span>=<span style="color: #fa8072;">`printf '%d\n' ${pid_hex}`</span>

    <span style="color: #00cd66;"># </span><span style="color: #00cd66;">/proc/&lt;pid&gt;/smaps &#12501;&#12449;&#12452;&#12523;&#12363;&#12425;&#12473;&#12479;&#12483;&#12463;&#12469;&#12452;&#12474;&#12289;&#12460;&#12540;&#12489;&#12506;&#12540;&#12472;&#12469;&#12452;&#12474;&#12434;&#21462;&#24471;&#12377;&#12427;</span>
    <span style="color: #9acd32;">guard_page</span>=<span style="color: #fa8072;">`cat /proc/$1/smaps | grep -B15 "stack:${pid}"| head -1 | awk '{print $2}'`</span>
    <span style="color: #9acd32;">stack_page</span>=<span style="color: #fa8072;">`cat /proc/$1/smaps | grep -A1 "stack:${pid}" | tail -1 | awk '{print $2}'`</span>
    <span style="color: #9acd32;">stack_size</span>=<span style="color: #fa8072;">`expr ${guard_page} + ${stack_page}`</span>
    <span style="color: #b0c4de;">printf</span> <span style="color: #bdb76b;">"%7d\t%11s\t%12s\t%s\n"</span> <span style="color: #bdb76b;">"${pid}"</span> <span style="color: #bdb76b;">"${stack_size}Kb"</span> <span style="color: #bdb76b;">"${guard_page}Kb"</span> <span style="color: #bdb76b;">"${thread_name}"</span>
<span style="color: #ffffff;">done</span>
</pre>
</div>

<p>
スタックサイズを明示的に指定して、サンプルを実行する。
</p>
<ul class="org-ul">
<li>-XX:ThreadStackSize=512
</li>
<li>-XX:VMThreadStackSize: 2048
</li>
<li>-XX:CompilerThreadStackSize=3072
</li>
</ul>
<pre class="example">
java -XX:VMThreadStackSize=2048 -XX:CompilerThreadStackSize=3072 -XX:ThreadStackSize=512 HelloWorld
Thread[Thread-0,5,main]: Hello World
Thread[Thread-4,5,main]: Hello World
Thread[Thread-1,5,main]: Hello World
Thread[Thread-3,5,main]: Hello World
Thread[Thread-2,5,main]: Hello World
★以降は省略
</pre>

<p>
測定結果
</p>
<pre class="example">
$ ./jvm_stacksize.sh `ps -ef | grep "[j]ava.*HelloWorld" | awk '{print $2}'`
[ PID ]	[StackSize]	[GuardPages]	[Thread Name]
  17285	     1048Kb	        12Kb	main
  17286	     2096Kb	         4Kb	GC task thread#0 (ParallelGC)
  17287	     2052Kb	         4Kb	GC task thread#1 (ParallelGC)
  17288	     2052Kb	         4Kb	GC task thread#2 (ParallelGC)
  17289	     2052Kb	         4Kb	GC task thread#3 (ParallelGC)
  17290	     2052Kb	         4Kb	VM Thread
  17291	    64584Kb	        12Kb	Reference Handler
  17292	      516Kb	        12Kb	Finalizer
  17293	      516Kb	        12Kb	Signal Dispatcher
  17294	     3076Kb	        12Kb	C2 CompilerThread0
  17295	     3076Kb	        12Kb	C2 CompilerThread1
  17296	      516Kb	        12Kb	Service Thread
  17297	     2052Kb	         4Kb	VM Periodic Task Thread
  17298	      516Kb	        12Kb	Thread-0
  17299	      516Kb	        12Kb	Thread-1
  17300	      516Kb	        12Kb	Thread-2
  17301	      516Kb	        12Kb	Thread-3
  17302	      516Kb	        12Kb	Thread-4
  17342	      516Kb	        12Kb	Attach Listener
</pre>

<p>
実測値はXXパラメータで指定した値より１ページ分多い。これは <code>glibc</code> 内部の
<a href="https://www.sourceware.org/git/gitweb.cgi?p=glibc.git;a=blob;f=nptl/allocatestack.c;h=8e620c46e9523092a5cf141e77f35c94dcfd9810;hb=HEAD#l349">allocate_stack</a> 処理で追加されているものです。
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> ulimit -sの影響範囲</h2>
<div class="outline-text-2" id="text-6">
<p>
Linux環境に置いて、JVM内のスレッドは全てglibcの <code>pthread_create</code> 関数経由で起動される。
スレッド起動時にスタックサイズ明示的に指定していない場合、 <code>ulimit -s</code> で設定された値
がスタックのデフォルトサイズとして適用される。前文に書いた通りJVMはスレッド起動時に明
示的 <code>pthread_attr_setstacksize</code> 関数でXXパラメータ値の元にスタックサイズを指定してい
るため、これらのスレッドのスタックサイズは <code>ulimit -s</code> の値に影響されないだ。
</p>

<p>
ただし、JVMランチャー自身は <code>ulimit -s</code> の制限値が適用される。
</p>

<p>
<code>ulimit</code> コマンドでスタックの上限値 <code>RLIMIT_STACK</code> を64Kbを設定し、サンプルプログラム
グライムを実行すると、ランチャーのスタックサイズが60Kbで収まった。
</p>
<pre class="example">
$ ulimit -s 64
$ java -Xss1024K -XX:VMThreadStackSize=2048 -XX:CompilerThreadStackSize=3072 -XX:ThreadStackSize=512 HelloWorld
Thread[Thread-1,5,main]: Hello World
Thread[Thread-3,5,main]: Hello World
Thread[Thread-0,5,main]: Hello World
Thread[Thread-2,5,main]: Hello World
Thread[Thread-4,5,main]: Hello World
★省略
</pre>

<p>
<code>pmap</code> コマンドで仮想メモリマップの最上位アドレス近くにランチャーのスタックサイズを確
認することができる。
</p>
<pre class="example">
$ pmap `ps -ef | grep "[j]ava.*HelloWorld" | awk '{print $2}'`
★省略
00007f39d068d000      4K r---- ld-2.17.so
00007f39d068e000      4K rw--- ld-2.17.so
00007f39d068f000      4K rw---   [ anon ]
00007fff7cf79000     60K rw---   [ stack ] ★ランチャーのスタックサイズ
00007fff7cffe000      8K r-x--   [ anon ]
ffffffffff600000      4K r-x--   [ anon ]
 total          3513684K
</pre>

<p>
JVM内の各スレッドのスタックサイズは下記の通りです、 <code>RLIMIT_STACK</code> に影響されていない
ことが分かります。
</p>
<pre class="example">
]$ ./jvm_stacksize.sh `ps -ef | grep "[j]ava.*HelloWorld" | awk '{print $2}'`
[ PID ]	[StackSize]	[GuardPages]	[Thread Name]
  10770	     1048Kb	        12Kb	main
  10771	     2096Kb	         4Kb	GC task thread#0 (ParallelGC)
  10772	     2052Kb	         4Kb	GC task thread#1 (ParallelGC)
  10773	     2052Kb	         4Kb	GC task thread#2 (ParallelGC)
  10774	     2052Kb	         4Kb	GC task thread#3 (ParallelGC)
  10775	    15812Kb	         4Kb	VM Thread
  10776	      516Kb	        12Kb	Reference Handler
  10777	    63556Kb	        12Kb	Finalizer
  10778	      516Kb	        12Kb	Signal Dispatcher
  10779	     3076Kb	        12Kb	C2 CompilerThread0
  10780	     3076Kb	        12Kb	C2 CompilerThread1
  10781	      516Kb	        12Kb	Service Thread
  10782	     2052Kb	         4Kb	VM Periodic Task Thread
  10783	      516Kb	        12Kb	Thread-0
  10784	      516Kb	        12Kb	Thread-1
  10785	      516Kb	        12Kb	Thread-2
  10786	      516Kb	        12Kb	Thread-3
  10787	      516Kb	        12Kb	Thread-4
  11203	      516Kb	        12Kb	Attach Listener
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> -Xssと-XX:ThreadStackSizeの違い</h2>
<div class="outline-text-2" id="text-7">
<p>
<code>-Xss</code> と <code>-XX:ThreadStackSize</code> 両方ともJavaスレッドのスタックを指定するパラメータで
ある。 ただし、JVMランチャーから起動されたイニシャルスレッドのスタックサイズの制御は
<code>-Xss</code> パラメータのみできる。
</p>

<p>
以下はJVMランチャーからイニシャルスレッド起動するまでの流れ
</p>
<pre class="example">
行
 | ★ランチャーの実行
1| openjdk/jdk/src/share/bin/main.c:93           ==&gt; int main(int, char **);
2| openjdk/jdk/src/share/bin/java.c:170            ==&gt; int JLI_Launch(int, char **, int, const char **, int, const char **, const char *, const char *, const char *, const char *, jboolean, jboolean, jboolean, jint);
3| openjdk/jdk/src/share/bin/java.c:1835             ==&gt; int ContinueInNewThread(InvocationFunctions *, jlong, int, char **, int, char *, int);
 | ★イニシャルスレッド起動
4| openjdk/jdk/src/solaris/bin/java_md_solinux.c:1021  ==&gt; int ContinueInNewThread0(int (JNICALL *continuation)(void *), jlong stack_size, void * args)
5| openjdk/jdk/src/share/bin/java.c:337                  ==&gt; int JavaMain(void *);
 | openjdk/jdk/src/share/bin/java.c:1097                 ==&gt; jboolean InitializeJVM(JavaVM **pvm, JNIEnv **penv, InvocationFunctions *ifn)
6| openjdk/hotspot/src/share/vm/prims/jni.cpp            ==&gt; jint JNI_CreateJavaVM(JavaVM**, void**, void*);
7| openjdk/hotspot/src/share/vm/runtime/thread.cpp:3271    ==&gt; jint Threads::create_vm(JavaVMInitArgs*, bool*);
8| openjdk/hotspot/src/os/linux/vm/os_linux.cpp:4898         ==&gt; jint os::init_2(void)
9| openjdk/hotspot/src/os/linux/vm/os_linux.cpp:1205           ==&gt; void os::Linux::capture_initial_stack(size_t max_size)
</pre>

<ul class="org-ul">
<li>行1: JVMランチャーのmain関数
</li>
<li>行2: <code>JLI_Launch</code> 関数にてコマンドラインパラメータのパーシング処理が実行される。
</li>
<li>行3: <code>-Xss</code> パラメータが指定されていない場合、デフォルト値(1024Kb)を取得し(4)に渡す。
</li>
<li>行4: glibcの <code>pthread_create</code> 関数を用いてイニシャルスレッドを起動する。 <code>-Xss</code> の
値がスタックサイズに適用される。
</li>
</ul>

<p>
<code>-Xss</code> と <code>-XX:ThreadStackSize</code> 片方指定する場合、と両方指定する場合効果が違うので要注意です。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">イニシャルスレッド</th>
<th scope="col" class="left">ワーカスレッド</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">-Xss2048K</td>
<td class="left">2048K</td>
<td class="left">2048K</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">-XX:ThreadStackSize=2048</td>
<td class="left">1024K</td>
<td class="left">2048K</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">-Xss2048K</td>
<td class="left">2048K</td>
<td class="left">512K</td>
</tr>

<tr>
<td class="left">-XX:ThreadStackSize=512</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> 参考</h2>
<div class="outline-text-2" id="text-8">
<p>
本記事書く際に下記コンテンツを参考した。
</p>
<ul class="org-ul">
<li><a href="http://mail.openjdk.java.net/pipermail/hotspot-dev/2011-June/004272.html">What the difference between -Xss and -XX:ThreadStackSize is?</a>
</li>
<li><a href="https://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/toc.html">Troubleshooting Guide for HotSpot VM</a>
</li>
<li><a href="http://openjdk.java.net/groups/hotspot/docs/RuntimeOverview.html">HotSpot Runtime Overview</a>
</li>
<li><a href="http://xmlandmore.blogspot.jp/2014/09/jdk-8-thread-stack-size-tuning.html?m=1">JDK 8: Thread Stack Size Tuning </a>
</li>
<li><a href="http://www.slideshare.net/m0nstermind/java-runtime-jvm">Java Runtime: повседневные обязанности</a>
</li>
<li><a href="http://brakkee.org/site/2012/10/13/java-from-the-trenches-crash-free-and-responsive-servers/">Java from the trenches: improving reliability</a>
</li>
<li><a href="https://help.blackboard.com/en-us/Learn/9.1_SP_12_and_SP_13/Administrator/010_Release_Notes/020_SP_12_Release_Notes/Performance_and_Scalability/Recommended_JVM_Tuning_Set">Recommended JVM Tuning Set</a>
</li>
<li><a href="http://stackoverflow.com/questions/11025459/where-is-the-java-stack-allocated">where is the Java stack allocated?</a>
</li>
<li><a href="http://unix.stackexchange.com/questions/145557/how-does-stack-allocation-work-in-linux">How does stack allocation work in Linux?</a>
</li>
<li><a href="http://www.oracle.com/technetwork/articles/servers-storage-dev/mem-alloc-1557798.html">How Memory Allocation Affects Performance in Multithreaded Programs</a>
</li>
<li><a href="http://stackoverflow.com/questions/15251250/what-do-the-different-hotspot-jvm-thread-types-do">What do the different (HotSpot) JVM thread types do?</a>
</li>
<li><a href="http://stackoverflow.com/questions/25309748/what-is-thread-stack-size-option-xss-given-to-jvm-why-does-it-have-a-limit-of">What is thread stack size option(-Xss) given to jvm? Why does it have a limit of atleast 68k in a windows pc?</a>
</li>
<li><a href="http://j2eedebug.blogspot.jp/2008/12/mapping-java-thread-to-pstack-and-pmap.html?m=1">Mapping java thread to pstack and pmap</a>
</li>
<li><a href="http://msugai.fc2web.com/java/perform/storage.html">JVM のメモリ構造</a>
</li>
<li><a href="http://codezine.jp/article/detail/1970?p=2">pthreadについて（スタックサイズ）</a>
</li>
<li><a href="http://www.megadriver.info/~fumi/2010/11/linux-%25E3%2581%25AE-pthread-%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2588%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6/">Linux の pthread のデフォルトスタックサイズについて</a>
</li>
<li><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/pthread_attr_setstacksize.3.html">PTHREAD_ATTR_SETSTACKSIZE</a>
</li>
<li><a href="http://docs.oracle.com/cd/E19455-01/806-2732/6jbu8v6ol/index.html#attrib-33670">マルチスレッドのプログラミング - スタックについて</a>
</li>
<li><a href="http://th0x4c.github.io/blog/2012/10/10/os-virtual-memory-map/">{OS} 仮想メモリ空間のメモリマップを調べる</a>
</li>
<li><a href="http://gntm-mdk.hatenadiary.com/entry/2015/01/21/231258">VSS RSS PSS USS の説明</a>
</li>
<li><a href="http://hllvm.group.iteye.com/group/topic/37717">咨询各位大神，使用jni，当栈内空间使用为1M时，会触发core</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[調査]JBossASソケット受信バッファーのサイズ]]></title>
    <link href="http://luozengbin.github.io/blog/2015-04-01-%5B%E8%AA%BF%E6%9F%BB%5Djbossas%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88%E5%8F%97%E4%BF%A1%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%83%BC%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA.html"/>
    <updated>2015-04-01T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[調査]jbossasソケット受信バッファーのサイズ</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 実験シナリオ</a></li>
<li><a href="#sec-2">2. テスト信用のサーブレットを準備する</a></li>
<li><a href="#sec-3">3. サーバソケットの受信バッファーサイズを確認する</a></li>
<li><a href="#sec-4">4. Acceptorスレッドを意図的ストールさせる</a></li>
<li><a href="#sec-5">5. TCPソケット受信バッファサイズを監視する</a></li>
<li><a href="#sec-6">6. パケット通信を監視する</a></li>
<li><a href="#sec-7">7. telnetからデータを順次に送りつける</a></li>
<li><a href="#sec-8">8. 監視結果解析</a></li>
<li><a href="#sec-9">9. TCPソケット受信バッファーサイズの設定について</a></li>
<li><a href="#sec-10">10. まとめ</a></li>
<li><a href="#sec-11">11. 参考</a></li>
</ul>
</div>
</div>
<p>
以下LinuxプラットフォームでJBossASアプリケーションサーバの話です。
</p>

<p>
次のケースに置いて、Acceptorスレッドやワーカスレッドの働き状態が悪くなるため、クライ
アントから送信されてデータがサーバ側のTCPソケット受信バッファーに溜まる。バッファーが
一杯になるとパケット受信ができなくなる、TCPレーヤでパケット再送が起きる。
</p>

<ul class="org-ul">
<li>サーバが過負荷状態でCPU時間がAcceptorスレッドやワーカスレッドに回らない場合
</li>
<li>FullGCによるJBossASサーバの一時停止
</li>
</ul>

<p>
この記事はTCP受信バッファーのサイズの実測値を調査致します。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 実験シナリオ</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>テスト信用のサーブレットを準備する
</li>
<li>サーバソケットの受信バッファーサイズを確認する
</li>
<li>Acceptorスレッドを意図的ストールさせる
</li>
<li>TCPソケット受信バッファサイズを監視する
</li>
<li>パケット通信を監視する
</li>
<li>telnetからデータを順次に送りつける
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> テスト信用のサーブレットを準備する</h2>
<div class="outline-text-2" id="text-2">
<p>
受信したHTTPリクエストパラメータを出力するシンプルなサーブレットをJBossASにデプロイす
る。
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffad29; font-weight: bold;">package</span> jp.co.jizai.sample.jbossas7.<span style="color: #008b8b;">tcp</span>;

<span style="color: #ffad29; font-weight: bold;">import</span> <span style="color: #008b8b;">javax</span>.<span style="color: #008b8b;">servlet</span>.<span style="color: #34cae2;">ServletException</span>;
<span style="color: #ffad29; font-weight: bold;">import</span> <span style="color: #008b8b;">javax</span>.<span style="color: #008b8b;">servlet</span>.<span style="color: #008b8b;">http</span>.<span style="color: #34cae2;">HttpServlet</span>;
<span style="color: #ffad29; font-weight: bold;">import</span> <span style="color: #008b8b;">javax</span>.<span style="color: #008b8b;">servlet</span>.<span style="color: #008b8b;">http</span>.<span style="color: #34cae2;">HttpServletRequest</span>;
<span style="color: #ffad29; font-weight: bold;">import</span> <span style="color: #008b8b;">javax</span>.<span style="color: #008b8b;">servlet</span>.<span style="color: #008b8b;">http</span>.<span style="color: #34cae2;">HttpServletResponse</span>;
<span style="color: #ffad29; font-weight: bold;">import</span> <span style="color: #008b8b;">java</span>.<span style="color: #008b8b;">io</span>.<span style="color: #34cae2;">IOException</span>;
<span style="color: #ffad29; font-weight: bold;">import</span> <span style="color: #008b8b;">java</span>.<span style="color: #008b8b;">io</span>.<span style="color: #34cae2;">PrintWriter</span>;
<span style="color: #ffad29; font-weight: bold;">import</span> <span style="color: #008b8b;">java</span>.<span style="color: #008b8b;">util</span>.<span style="color: #34cae2;">Enumeration</span>;
<span style="color: #ffad29; font-weight: bold;">import</span> <span style="color: #008b8b;">java</span>.<span style="color: #008b8b;">util</span>.<span style="color: #34cae2;">Map</span>;

<span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #ffad29; font-weight: bold;">class</span> <span style="color: #34cae2;">ShowParameterServlet</span> <span style="color: #ffad29; font-weight: bold;">extends</span> <span style="color: #34cae2;">HttpServlet</span> {

    <span style="color: #ffad29; font-weight: bold;">private</span> <span style="color: #ffad29; font-weight: bold;">static</span> <span style="color: #ffad29; font-weight: bold;">final</span> <span style="color: #34cae2;">String</span> <span style="color: #dbdb95;">CONTENT_TYPE</span> = <span style="color: #e67128;">"text/html; charset=UTF-8"</span>;

    <span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #34cae2;">void</span> <span style="color: #00ede1; font-weight: bold;">doGet</span>(<span style="color: #34cae2;">HttpServletRequest</span> <span style="color: #dbdb95;">req</span>, <span style="color: #34cae2;">HttpServletResponse</span> <span style="color: #dbdb95;">resp</span>) <span style="color: #ffad29; font-weight: bold;">throws</span> <span style="color: #34cae2;">ServletException</span>, <span style="color: #34cae2;">IOException</span> {

        process(req, resp);
    }


    <span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #34cae2;">void</span> <span style="color: #00ede1; font-weight: bold;">doPost</span>(<span style="color: #34cae2;">HttpServletRequest</span> <span style="color: #dbdb95;">req</span>, <span style="color: #34cae2;">HttpServletResponse</span> <span style="color: #dbdb95;">resp</span>) <span style="color: #ffad29; font-weight: bold;">throws</span> <span style="color: #34cae2;">ServletException</span>, <span style="color: #34cae2;">IOException</span> {
        process(req, resp);
    }

    <span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #34cae2;">void</span> <span style="color: #00ede1; font-weight: bold;">process</span>(<span style="color: #34cae2;">HttpServletRequest</span> <span style="color: #dbdb95;">req</span>, <span style="color: #34cae2;">HttpServletResponse</span> <span style="color: #dbdb95;">resp</span>) <span style="color: #ffad29; font-weight: bold;">throws</span> <span style="color: #34cae2;">ServletException</span>, <span style="color: #34cae2;">IOException</span> {
        resp.setContentType(CONTENT_TYPE);
        <span style="color: #34cae2;">PrintWriter</span> <span style="color: #dbdb95;">out</span> = resp.getWriter();
        System.out.println(<span style="color: #e67128;">"=== http parameter ==="</span>);
        <span style="color: #34cae2;">Map</span>&lt;<span style="color: #34cae2;">String</span>, <span style="color: #34cae2;">Object</span>&gt; <span style="color: #dbdb95;">paramMap</span> = (Map&lt;<span style="color: #34cae2;">String</span>, Object&gt;) req.getParameterMap();
        <span style="color: #ffad29; font-weight: bold;">for</span> (<span style="color: #008b8b;">Map</span>.<span style="color: #34cae2;">Entry</span>&lt;<span style="color: #34cae2;">String</span>, <span style="color: #34cae2;">Object</span>&gt; entry : paramMap.entrySet()) {
            out.write(String.format(<span style="color: #e67128;">"%s = %s"</span>, entry.getKey(), entry.getValue()) + <span style="color: #e67128;">"&lt;br/&gt;"</span>);
        }

        System.out.println(<span style="color: #e67128;">"=== http attribute ==="</span>);
        <span style="color: #34cae2;">Enumeration</span>&lt;<span style="color: #34cae2;">String</span>&gt; <span style="color: #dbdb95;">attrNames</span> = (<span style="color: #34cae2;">Enumeration</span>&lt;<span style="color: #34cae2;">String</span>&gt;) req.getAttributeNames();
        <span style="color: #ffad29; font-weight: bold;">while</span> (attrNames.hasMoreElements()) {
            <span style="color: #34cae2;">String</span> <span style="color: #dbdb95;">attrName</span> = attrNames.nextElement();
            out.write(String.format(<span style="color: #e67128;">"%s = %s"</span>, attrName, req.getAttribute(attrName)) + <span style="color: #e67128;">"&lt;br/&gt;"</span>);
        }
        out.close();
    }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> サーバソケットの受信バッファーサイズを確認する</h2>
<div class="outline-text-2" id="text-3">
<p>
新規接続のサーバソケットのgetReceiveBufferSize()メソッドをコールする <code>Byteman</code> スクリ
プトを実行中のJBassASにアタッチメントする。
</p>
<div class="org-src-container">

<pre class="src src-sh">RULE trace http ReceiveBufferSize
CLASS org.apache.tomcat.util.net.JIoEndpoint
METHOD processSocket
AT ENTRY
BIND socket = $<span style="color: #dbdb95;">1</span>
IF TRUE
DO
  traceln(<span style="color: #e67128;">"socket.getReceiveBufferSize() = "</span> + socket.getReceiveBufferSize()), traceStack()
ENDRULE
</pre>
</div>

<p>
クライアントブラウザからテスト用サーブレットをアクセスすると、サーバログに以下の内容
が出力される。
</p>

<pre class="example">
15:46:11,002 INFO  [stdout] (http-/0.0.0.0:8080-Acceptor-0) socket.getReceiveBufferSize() = 43690
15:46:11,004 INFO  [stdout] (http-/0.0.0.0:8080-Acceptor-0) Stack trace for thread http-/0.0.0.0:8080-Acceptor-0
15:46:11,004 INFO  [stdout] (http-/0.0.0.0:8080-Acceptor-0) org.apache.tomcat.util.net.JIoEndpoint.processSocket(JIoEndpoint.java:-1)
15:46:11,004 INFO  [stdout] (http-/0.0.0.0:8080-Acceptor-0) org.apache.tomcat.util.net.JIoEndpoint$Acceptor.run(JIoEndpoint.java:315)
15:46:11,005 INFO  [stdout] (http-/0.0.0.0:8080-Acceptor-0) java.lang.Thread.run(Thread.java:745)
</pre>

<p>
<code>[[https://docs.oracle.com/javase/jp/6/api/java/net/Socket.html#setReceiveBufferSize%2528int%2529][java.net.Socket.getReceiveBufferSize]]()</code> で取れた値→ <code>43690</code> 単位がよくわからないの
でJavaDocを引いてみた。
</p>

<pre class="example">
public int getReceiveBufferSize()
                         throws SocketException

    この Socket で使われる SO_RCVBUF オプションの値を取得します。これは、この Socket で入力用としてプラットフォームが使うバッファーのサイズです。

    戻り値:
        この Socket の SO_RCVBUF オプションの値 
    例外:
        SocketException - 使用しているプロトコルでエラー (TCP エラーなど) が発生した場合
    導入されたバージョン:
        1.2
    関連項目:
        setReceiveBufferSize(int)
</pre>

<p>
やはり、分からないので <code>SO_RCVBUF</code> オプションの単位を探って見る。
</p>

<pre class="example">
SO_RCVBUF
    ソケットの受信バッファーの最大サイズを設定・取得する (バイト単位)。 setsockopt(2)
    を使って値が設定されたときに (管理オーバヘッド用の領域を確保するために) カーネルは
    この値を 2倍し、 getsockopt(2) はこの 2倍された値を返す。 デフォルトの値は
    /proc/sys/net/core/rmem_default ファイルで設定され、許容される最大の値は
    /proc/sys/net/core/rmem_max ファイルで設定される。 このオプションの最小値は (2倍し
    た値で) 256 である
</pre>

<p>
僕の日本語理解力が低いので、正確な意味が掴めないままだが。一先ず受信バッファーサイズの
単位がバイトだそうです。 <code>43690</code> バイトは約42KB、またTCP受信バッファーカーネルパラメー
タ <code>net.ipv4.tcp_rmem</code> の値は下記の通りとなります。 <code>43690</code> は丁度 <code>net.ipv4.tcp_rmem</code>
のデフォルト値の 1/2 であることが分かりました。
</p>

<pre class="example">
# sysctl -a | grep net.ipv4.tcp_rmem
net.ipv4.tcp_rmem = 4096	87380	4194304
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Acceptorスレッドを意図的ストールさせる</h2>
<div class="outline-text-2" id="text-4">
<p>
新規接続を受け付ける処理 <code>org.apache.tomcat.util.net.JIoEndpoint.processSocket(Socket
socket)</code> でスレッドを30秒間Sleepされる <code>Byteman</code> スクリプトを実行中のJBossASにアタッチ
メントする。
</p>
<div class="org-src-container">

<pre class="src src-sh">RULE pause acceptor thread
CLASS org.apache.tomcat.util.net.JIoEndpoint
METHOD processSocket
AT ENTRY
BIND socket = $<span style="color: #dbdb95;">1</span>
IF TRUE
DO
  Thread.sleep(300000)
ENDRULE
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> TCPソケット受信バッファサイズを監視する</h2>
<div class="outline-text-2" id="text-5">
<p>
以下のコマンドでTCPソケット受信バッファサイズを監視する
</p>
<pre class="example">
$ watch -n 2 'netstat -an | grep ESTABLISHED | grep 8080'
</pre>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> パケット通信を監視する</h2>
<div class="outline-text-2" id="text-6">
<p>
クライアント側にて以下のコマンドでパケット通信の監視を行う
</p>
<pre class="example">
$sudo tcpdump -n -i virbr0 port 8080
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> telnetからデータを順次に送りつける</h2>
<div class="outline-text-2" id="text-7">
<p>
<code>net.ipv4.tcp_rmem</code> パラメータデフォルト値 <code>87380</code> より大きい電文を送るようにHTTPヘッ
ダーに <code>Content-Length: 120100</code> を指定する。
</p>

<pre class="example">
$ telnet jbossas-lab02 8080
POST /jbossas7-tcp-basic/ShowParameterServlet HTTP/1.1
Host: jbossas-lab02:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: ja,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: http://jbossas-lab002:8080/jbossas7-tcp-basic/
Connection: Close
Content-Type: application/x-www-form-urlencoded
Content-Length: 120100

★まず100バイト分を送る(エンターは2バイト分になります)
param1=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ★エンターを押す

★以下4000バイト文字を30回繰り返しサーバに送る
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
</pre>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> 監視結果解析</h2>
<div class="outline-text-2" id="text-8">
<p>
以下TCPソケット受信バッファサイズの監視結果、文中の★マークは結果の解析コメントとなり
ます。
</p>
<pre class="example">
# while [ true ]; do netstat -an | grep ESTABLISHED | grep 8080; sleep  2; done
★1 TCP3WHS 接続確立
tcp        0      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 

★2 HTTPヘッダー受信
tcp      447      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 

★3 リクエストデータの受信
tcp      547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp     4547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp     8547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    12547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    16547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    20547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    24547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    28547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    32547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    36547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    40547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 

★4 アプリ予約バッファサイズに達した、以降は管理領域を食い始めた
★  このタイミングからサーバ受信ウィンドウサイズが徐々に縮める
tcp    44547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    48547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    52547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    56547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    60547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    64547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    68547      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 

★5 以降TCPバッファが満タン
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED 
tcp    72211      0 192.168.122.66:8080         192.168.122.1:40976         ESTABLISHED
</pre>


<p>
パケット監視結果は以下の通りです。
</p>
<pre class="example">
★1 TCP3WHS 接続確立
16:45:01.262499 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [S], seq 3028524293, win 29200, options [mss 1460,sackOK,TS val 50120659 ecr 0,nop,wscale 7], length 0
16:45:01.262697 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [S.], seq 1682372075, ack 3028524294, win 14480, options [mss 1460,sackOK,TS val 3798305 ecr 50120659,nop,wscale 7], length 0
16:45:01.262773 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], ack 1, win 229, options [nop,nop,TS val 50120659 ecr 3798305], length 0


★2 HTTPヘッダー送信
16:45:09.935452 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 1:57, ack 1, win 229, options [nop,nop,TS val 50123261 ecr 3798305], length 56: HTTP: POST /jbossas7-tcp-basic/ShowParameterServlet HTTP/1.1
16:45:09.935789 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 57, win 114, options [nop,nop,TS val 3806979 ecr 50123261], length 0
16:45:09.935850 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 57:422, ack 1, win 229, options [nop,nop,TS val 50123261 ecr 3806979], length 365: HTTP
16:45:09.935905 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 422, win 122, options [nop,nop,TS val 3806979 ecr 50123261], length 0
16:45:10.330264 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 422:446, ack 1, win 229, options [nop,nop,TS val 50123379 ecr 3806979], length 24: HTTP
16:45:10.330448 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 446, win 122, options [nop,nop,TS val 3807373 ecr 50123379], length 0
16:45:10.897750 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 446:448, ack 1, win 229, options [nop,nop,TS val 50123550 ecr 3807373], length 2: HTTP
16:45:10.897911 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 448, win 122, options [nop,nop,TS val 3807941 ecr 50123550], length 0

★3 リクエストデータの送信
16:45:19.464509 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 448:548, ack 1, win 229, options [nop,nop,TS val 50126120 ecr 3807941], length 100: HTTP
16:45:19.464668 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 548, win 122, options [nop,nop,TS val 3816507 ecr 50126120], length 0
16:45:26.602423 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 548:4548, ack 1, win 229, options [nop,nop,TS val 50128261 ecr 3816507], length 4000: HTTP
16:45:26.602602 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 4548, win 145, options [nop,nop,TS val 3823645 ecr 50128261], length 0
16:45:32.436162 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 4548:8548, ack 1, win 229, options [nop,nop,TS val 50130011 ecr 3823645], length 4000: HTTP
16:45:32.436338 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 8548, win 167, options [nop,nop,TS val 3829479 ecr 50130011], length 0
16:45:35.452590 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 8548:12548, ack 1, win 229, options [nop,nop,TS val 50130916 ecr 3829479], length 4000: HTTP
16:45:35.452721 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 12548, win 190, options [nop,nop,TS val 3832495 ecr 50130916], length 0
16:45:38.082228 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 12548:16548, ack 1, win 229, options [nop,nop,TS val 50131705 ecr 3832495], length 4000: HTTP
16:45:38.082396 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 16548, win 212, options [nop,nop,TS val 3835125 ecr 50131705], length 0
16:45:40.743705 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 16548:20548, ack 1, win 229, options [nop,nop,TS val 50132504 ecr 3835125], length 4000: HTTP
16:45:40.743848 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 20548, win 235, options [nop,nop,TS val 3837787 ecr 50132504], length 0
16:45:43.016683 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 20548:24548, ack 1, win 229, options [nop,nop,TS val 50133185 ecr 3837787], length 4000: HTTP
16:45:43.016863 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 24548, win 258, options [nop,nop,TS val 3840060 ecr 50133185], length 0
16:45:45.721066 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 24548:28548, ack 1, win 229, options [nop,nop,TS val 50133997 ecr 3840060], length 4000: HTTP
16:45:45.721253 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 28548, win 280, options [nop,nop,TS val 3842764 ecr 50133997], length 0
16:45:49.227814 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 28548:32548, ack 1, win 229, options [nop,nop,TS val 50135049 ecr 3842764], length 4000: HTTP
16:45:49.227964 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 32548, win 253, options [nop,nop,TS val 3846271 ecr 50135049], length 0
16:45:51.671841 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 32548:36548, ack 1, win 229, options [nop,nop,TS val 50135782 ecr 3846271], length 4000: HTTP

★4 ここから再送が発生する
16:45:51.680266 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 35444:36548, ack 1, win 229, options [nop,nop,TS val 50135785 ecr 3846271], length 1104: HTTP
16:45:51.711839 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 36548, win 225, options [nop,nop,TS val 3848755 ecr 50135782,nop,nop,sack 1 {35444:36548}], length 0
16:45:55.390996 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 36548:40548, ack 1, win 229, options [nop,nop,TS val 50136898 ecr 3848755], length 4000: HTTP
16:45:55.430802 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 40548, win 197, options [nop,nop,TS val 3852474 ecr 50136898], length 0
16:45:59.291140 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 40548:43444, ack 1, win 229, options [nop,nop,TS val 50138068 ecr 3852474], length 2896: HTTP
16:45:59.291169 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 43444:44548, ack 1, win 229, options [nop,nop,TS val 50138068 ecr 3852474], length 1104: HTTP
16:45:59.310296 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 43444:44548, ack 1, win 229, options [nop,nop,TS val 50138074 ecr 3852474], length 1104: HTTP
16:45:59.330773 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 44548, win 166, options [nop,nop,TS val 3856374 ecr 50138068,nop,nop,sack 1 {43444:44548}], length 0
16:46:01.367501 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 44548:47444, ack 1, win 229, options [nop,nop,TS val 50138691 ecr 3856374], length 2896: HTTP
16:46:01.367533 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 47444:48548, ack 1, win 229, options [nop,nop,TS val 50138691 ecr 3856374], length 1104: HTTP
16:46:01.406803 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 48548, win 135, options [nop,nop,TS val 3858450 ecr 50138691], length 0
16:46:03.523326 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 48548:51444, ack 1, win 229, options [nop,nop,TS val 50139337 ecr 3858450], length 2896: HTTP
16:46:03.523356 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 51444:52548, ack 1, win 229, options [nop,nop,TS val 50139337 ecr 3858450], length 1104: HTTP
16:46:03.553582 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 51444:52548, ack 1, win 229, options [nop,nop,TS val 50139347 ecr 3858450], length 1104: HTTP
16:46:03.553716 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 52548, win 104, options [nop,nop,TS val 3860596 ecr 50139337,nop,nop,sack 1 {51444:52548}], length 0
16:46:06.322183 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 52548:55444, ack 1, win 229, options [nop,nop,TS val 50140177 ecr 3860596], length 2896: HTTP
16:46:06.322212 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 55444:56548, ack 1, win 229, options [nop,nop,TS val 50140177 ecr 3860596], length 1104: HTTP
16:46:06.361777 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 56548, win 73, options [nop,nop,TS val 3863405 ecr 50140177], length 0
16:46:08.944983 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 56548:57996, ack 1, win 229, options [nop,nop,TS val 50140964 ecr 3863405], length 1448: HTTP
16:46:08.945017 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 57996:59444, ack 1, win 229, options [nop,nop,TS val 50140964 ecr 3863405], length 1448: HTTP
16:46:08.945027 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 59444:60548, ack 1, win 229, options [nop,nop,TS val 50140964 ecr 3863405], length 1104: HTTP
16:46:08.945188 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 57996, win 62, options [nop,nop,TS val 3865988 ecr 50140964], length 0
16:46:08.983605 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 59444:60548, ack 1, win 229, options [nop,nop,TS val 50140976 ecr 3865988], length 1104: HTTP
16:46:08.983765 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 60548, win 43, options [nop,nop,TS val 3866027 ecr 50140964,nop,nop,sack 1 {59444:60548}], length 0
16:46:10.874178 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 60548:63444, ack 1, win 229, options [nop,nop,TS val 50141543 ecr 3866027], length 2896: HTTP
16:46:10.874209 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 63444:64548, ack 1, win 229, options [nop,nop,TS val 50141543 ecr 3866027], length 1104: HTTP
16:46:10.913789 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 64548, win 12, options [nop,nop,TS val 3867957 ecr 50141543], length 0
16:46:13.263314 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 64548:65996, ack 1, win 229, options [nop,nop,TS val 50142259 ecr 3867957], length 1448: HTTP
16:46:13.263477 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 65996, win 1, options [nop,nop,TS val 3870306 ecr 50142259], length 0
16:46:13.483589 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 65996:66124, ack 1, win 229, options [nop,nop,TS val 50142326 ecr 3870306], length 128: HTTP
16:46:13.483812 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 66124, win 46, options [nop,nop,TS val 3870527 ecr 50142326], length 0
16:46:13.483865 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 66124:67572, ack 1, win 229, options [nop,nop,TS val 50142326 ecr 3870527], length 1448: HTTP
16:46:13.483885 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 67572:68548, ack 1, win 229, options [nop,nop,TS val 50142326 ecr 3870527], length 976: HTTP
16:46:13.523583 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 67572:68548, ack 1, win 229, options [nop,nop,TS val 50142338 ecr 3870527], length 976: HTTP
16:46:13.523752 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 68548, win 28, options [nop,nop,TS val 3870567 ecr 50142326,nop,nop,sack 1 {67572:68548}], length 0
16:46:15.144825 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 68548:69996, ack 1, win 229, options [nop,nop,TS val 50142824 ecr 3870567], length 1448: HTTP
16:46:15.144860 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], seq 69996:71444, ack 1, win 229, options [nop,nop,TS val 50142824 ecr 3870567], length 1448: HTTP
16:46:15.145025 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 69996, win 17, options [nop,nop,TS val 3872188 ecr 50142824], length 0
16:46:15.184796 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 71444, win 6, options [nop,nop,TS val 3872228 ecr 50142824], length 0
16:46:15.406939 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [P.], seq 71444:72212, ack 1, win 229, options [nop,nop,TS val 50142903 ecr 3872228], length 768: HTTP


★5 ここからサーバから受信可能なTCPウィンドウサイズが0の応答パケットが出始めた
16:46:15.407110 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 72212, win 0, options [nop,nop,TS val 3872450 ecr 50142903], length 0
16:46:15.626933 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], ack 1, win 229, options [nop,nop,TS val 50142969 ecr 3872450], length 0
16:46:15.627096 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 72212, win 0, options [nop,nop,TS val 3872670 ecr 50142903], length 0
16:46:16.066943 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], ack 1, win 229, options [nop,nop,TS val 50143101 ecr 3872670], length 0
16:46:16.067143 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 72212, win 0, options [nop,nop,TS val 3873110 ecr 50142903], length 0
16:46:16.950253 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], ack 1, win 229, options [nop,nop,TS val 50143366 ecr 3873110], length 0
16:46:16.950401 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 72212, win 0, options [nop,nop,TS val 3873993 ecr 50142903], length 0
16:46:18.716950 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], ack 1, win 229, options [nop,nop,TS val 50143896 ecr 3873993], length 0
16:46:18.717129 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 72212, win 0, options [nop,nop,TS val 3875760 ecr 50142903], length 0
16:46:22.250259 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], ack 1, win 229, options [nop,nop,TS val 50144956 ecr 3875760], length 0
16:46:22.250438 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 72212, win 0, options [nop,nop,TS val 3879293 ecr 50142903], length 0
16:46:29.303610 IP 192.168.122.1.40976 &gt; 192.168.122.66.8080: Flags [.], ack 1, win 229, options [nop,nop,TS val 50147072 ecr 3879293], length 0
16:46:29.303785 IP 192.168.122.66.8080 &gt; 192.168.122.1.40976: Flags [.], ack 72212, win 0, options [nop,nop,TS val 3886347 ecr 50142903], length 0
</pre>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> TCPソケット受信バッファーサイズの設定について</h2>
<div class="outline-text-2" id="text-9">
<p>
JavaDocから引用
</p>

<ul class="org-ul">
<li><a href="https://docs.oracle.com/javase/jp/6/api/java/net/Socket.html#setReceiveBufferSize%2528int%2529">java.net.Socket.setReceiveBufferSize</a>
この Socket の SO_RCVBUF オプションを指定された値に設定します。SO_RCVBUF オプション
は、使用するネットワーク入出力バッファーに設定するサイズのヒントとして、プラットフォー
ムのネットワークコードが使います。

<p>
受信バッファーのサイズを増やすと、大規模な接続でのネットワーク入出力のパフォーマンス
を上げることができます。一方、サイズを減らすと、受信データのバックログを減らすことが
できます。
</p>

<p>
SO_RCVBUF は <code>ヒント</code> なので、アプリケーションでバッファーのサイズ設定を調べる必要が
ある場合は、getReceiveBufferSize() を呼び出してください。
</p>

<p>
SO_RCVBUF の値は、リモートピアに通知される TCP 受信ウィンドウの設定にも使用されます。
一般に、ソケットが接続されているかぎり、このウィンドウサイズはいつでも変更できます。
ただし、64K を超える受信ウィンドウを要求する場合は、ソケットをリモートピアに接続する
前に変更を要求する必要があります。次の 2 つの場合に注意してください。
</p>

<p>
ServerSocket から受け入れたソケットの場合、ServerSocket をローカルアドレスにバインド
する前に、ServerSocket.setReceiveBufferSize(int) を呼び出してこれを実行する必要があ
ります。
</p>

<p>
クライアントソケットの場合、ソケットをそのリモートピアに接続する前に、
setReceiveBufferSize() を呼び出す必要があります。
</p>
</li>
<li><a href="https://docs.oracle.com/javase/jp/6/api/java/net/ServerSocket.html#setReceiveBufferSize%2528int%2529">java.net.ServerSocket.setReceiveBufferSize</a>
  この ServerSocket から受け入れられたソケットの SO_RCVBUF オプションのデフォルト推
奨値を設定します。受け入れられたソケット内に実際に設定されている値を確認してください。
それには、accept() からソケットが返されたあとで Socket.getReceiveBufferSize() を呼び
出します。

<p>
  SO_RCVBUF の値は、内部ソケット受信バッファーのサイズの設定と、リモートピアに通知さ
れる TCP 受信ウィンドウのサイズの設定の両方に使用されます。
</p>

<p>
  その後、Socket.setReceiveBufferSize(int) を呼び出すことで値を変更できます。ただし、
アプリケーションが RFC1323 で定義されている 64K バイトを超える受信ウィンドウを使用可
能にする必要がある場合には、ローカルアドレスにバインドする前に 推奨値を
ServerSocket で設定する必要があります。つまり、引数なしコンストラクタを使って
ServerSocket を作成し、次に setReceiveBufferSize() を呼び出し、最後に bind() を呼び
出して ServerSocket をアドレスにバインドする必要があることを意味します。
</p>

<p>
  これに失敗してもエラーは発生せず、バッファーサイズは要求された値に設定されます。た
だし、この ServerSocket から受け取るソケットの TCP 受信ウィンドウは 64K バイト以下に
なります。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> まとめ</h2>
<div class="outline-text-2" id="text-10">
<ul class="org-ul">
<li>JBossASソケット受信バッファーのデフォルトサイズは <code>net.ipv4.tcp_rmem</code> の1/2が適用さ
れる(約42KB)。
</li>
<li>リクエストデータサイズが42KBバイト以下の場合、パケット再送発生しない
</li>
<li>実際に受信できる最大サイズは <code>net.ipv4.tcp_rmem</code> 値の8割ぐらい
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> 参考</h2>
<div class="outline-text-2" id="text-11">
<ul class="org-ul">
<li><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man7/socket.7.html">Section: Linux Programmer&#8217;s Manual (7)</a>
</li>
<li><a href="https://docs.oracle.com/javase/jp/6/api/java/net/Socket.html">Socket (Java Platform SE 6)</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]JBoss ASでBytemanを使う]]></title>
    <link href="http://luozengbin.github.io/blog/2015-04-01-%5B%E3%83%A1%E3%83%A2%5Djbossas%E3%81%A7byteman%E3%82%92%E4%BD%BF%E3%81%86.html"/>
    <updated>2015-04-01T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]jbossasでbytemanを使う</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 前提</a></li>
<li><a href="#sec-2">2. インストール</a></li>
<li><a href="#sec-3">3. JBossASプロセスへのアタッチ</a></li>
<li><a href="#sec-4">4. トレース用スクリプトの作成</a></li>
<li><a href="#sec-5">5. スクリプトの実行</a></li>
<li><a href="#sec-6">6. 参考</a></li>
</ul>
</div>
</div>
<p>
ミドルウェアの内部動作をトレースするためによく使うので手順を残しておきます。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 前提</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>JBossAS 7系
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> インストール</h2>
<div class="outline-text-2" id="text-2">
<pre class="example">
$ wget http://downloads.jboss.org/byteman/2.2.1/byteman-download-2.2.1-bin.zip
$ unzip byteman-download-2.2.1-bin.zip
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> JBossASプロセスへのアタッチ</h2>
<div class="outline-text-2" id="text-3">
<pre class="example">
$ export BYTEMAN_HOME=`pwd`/byteman-download-2.2.1
$ export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.65.x86_64
$ JBOSS_PID=`ps -ef | grep [j]boss-modules.jar | awk '{print $2}'`
$ ${BYTEMAN_HOME}/bin/bminstall.sh -b ${JBOSS_PID}
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> トレース用スクリプトの作成</h2>
<div class="outline-text-2" id="text-4">
<p>
JBossASサーバソケット受信バッファーサイズを調べるスクリプト
<code>trace_socket_receive_buffer_size.btm</code> を作成する
</p>

<pre class="example">
RULE trace http ReceiveBufferSize
CLASS org.apache.tomcat.util.net.JIoEndpoint
METHOD processSocket
AT ENTRY
BIND socket = $1
IF TRUE
DO
  traceln("socket.getReceiveBufferSize() = " + socket.getReceiveBufferSize()), traceStack()
ENDRULE
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> スクリプトの実行</h2>
<div class="outline-text-2" id="text-5">
<pre class="example">
$ ${BYTEMAN_HOME}/bin/bmsubmit.sh trace_socket_receive_buffer_size.btm
</pre>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 参考</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><a href="https://developer.jboss.org/wiki/ABytemanTutorial#how_do_i_run_jboss_as_with_byteman">A Byteman Tutorial</a>
</li>
<li><a href="http://nekop.hatenablog.com/entry/20101220/1292825812">BytemanによるJava黒魔術</a>
</li>
<li><a href="http://d.hatena.ne.jp/Kazuhira/20131022/1382455739">バイトコード操作ツール、Bytemanを試す</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[まとめ]JBoss as 7過負荷時TCPコネクションの振る舞い]]></title>
    <link href="http://luozengbin.github.io/blog/2015-04-01-%5B%E3%81%BE%E3%81%A8%E3%82%81%5Djbossas%E9%81%8E%E8%B2%A0%E8%8D%B7%E6%99%82tcp%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%8C%AF%E3%82%8B%E8%88%9E%E3%81%84.html"/>
    <updated>2015-04-01T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[まとめ]jbossas過負荷時tcpコネクションの振る舞い</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 前提事項</a></li>
<li><a href="#sec-2">2. 最大ワーカスレッド数の設定方法</a></li>
<li><a href="#sec-3">3. スレッド起動のタイミング</a></li>
<li><a href="#sec-4">4. 過負荷時の挙動</a>
<ul>
<li><a href="#sec-4-1">4.1. A.クライアントからPSHパケット再送が発生するパターン</a></li>
<li><a href="#sec-4-2">4.2. B.TCP3WHSパケット再送が発生するパターン</a></li>
<li><a href="#sec-4-3">4.3. C.新規接続が拒否されるパターン</a></li>
</ul>
</li>
<li><a href="#sec-5">5. 過負荷の対策</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 前提事項</h2>
<div class="outline-text-2" id="text-1">
<p>
本記事は以下の環境を前提とする。
</p>

<ul class="org-ul">
<li>Linux/x86_64
</li>
<li>JBoss AS 7
</li>
</ul>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 最大ワーカスレッド数の設定方法</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>方式1: -Dorg.apache.tomcat.util.net.MAX_THREADS=999
</li>
<li>方式2: コネクタ定義のmax-connectionsで指定する
</li>
</ul>

<p>
両方指定した場合、方式2が優先される。指定しない場合 512 x JVMに割り当てたコア数
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> スレッド起動のタイミング</h2>
<div class="outline-text-2" id="text-3">
<p>
サーバ起動時にワーカースレッドの初期値が0、リクエストが来るたびに新規スレッドを作る。
スレッドの数がmax-connectionsの数に達した時にログに以下のメッセージがを出力される。
</p>

<pre class="example">
INFO [JIoEndpoint] Maximum number of threads (xxx) created for connector with address /127.0.0.1 and port 8080
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 過負荷時の挙動</h2>
<div class="outline-text-2" id="text-4">
<p>
下記AとBの何れが起きた場合、クライアントからすると無応答や応答が激遅いことが感じるので
防止の対策を講じることをおすすめします。
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> A.クライアントからPSHパケット再送が発生するパターン</h3>
<div class="outline-text-3" id="text-4-1">
<p>
以下の状況に置いて、クライアントからのリクエスデータがサーバ側のTCPバッファーに詰ま
る。TCPバッファーが一杯になると、パケットがdropされるのでクライアントからのデータ再
送が発生する。
</p>

<ul class="org-ul">
<li>CPU高負荷時、Acceptorスレッドが回らない状況
</li>
<li>GCによって、Acceptorスレッドの働きが良くない状況
</li>
<li>CPU高負荷時、ワーカスレッドがリクエストデータ受信処理で止まっている
</li>
<li>GCによって、ワーカスレッドがリクエストデータ受信処理で止まっている
</li>
</ul>

<p>
また、Acceptorスレッドが止まる場合新規接続(3WHS完了)がbacklogキューに溜まるので
backlogキューが溢れる可能性もあります。
</p>

<p>
上記に関して、Threadサブシステム利用時も同様です。
</p>

<p>
TCPバッファーがについて、TCP接続単位にTCPバッファーが持っている、デフォルト値は
<a href="https://github.com/torvalds/linux/blob/master/net/ipv4/tcp.c#L3076">net.ipv4.tcp_rmem</a> カーネルパラメータ値の1/2になります、約42KB。
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> B.TCP3WHSパケット再送が発生するパターン</h3>
<div class="outline-text-3" id="text-4-2">
<p>
CPU高負荷でAcceptorスレッドが止まってかつbacklogキューが溢れた場合、コネクションの確立
ができない、クライアントからのsyn(1)やack(3)の再送が起きる。
TCP SYNの再送間隔は以下の通り、約64秒でタイムアウトになる。
</p>
<pre class="example">
1回目 +1秒
2回目 +2秒
3回目 +4秒
4回目 +8秒
5回目 +16秒
6回目 +32秒  タイムアウト
</pre>
<p>
クライアントからすると応答が激遅いと感じることがある。
</p>

<p>
※上記に関して、Threadサブシステム利用時も同様です。
</p>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> C.新規接続が拒否されるパターン</h3>
<div class="outline-text-3" id="text-4-3">
<p>
同時接続数がmax-connections値を超えた場合、Acceptorスレッドが新規コネクションを受付し、
その後のワーカースレッド割り当て処理でワーカースレッドがないことを気付き、ソケットをク
ローズする(FINパケットを送出)。
</p>

<p>
注意：
このケースに置いて必ずじもCPU高負荷とは限らない、ワーカスレッドがアプリに掴み放しの場
合も起こりえる。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 過負荷の対策</h2>
<div class="outline-text-2" id="text-5">
<p>
実際の運用上はどちらも発生しりえる。それぞれのパターンに置いてLBがどう振る舞うかを明確
した上でワーカースレッドのbusy数とCPUの使用率を監視し、閉塞運用、スペアインスタンスの
運用などを設計することが大事だと思います。
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
