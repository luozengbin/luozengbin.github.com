<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2014-07-06T14:58:38+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[メモ]Otcopressにプラグインを導入する-その１]]></title>
    <link href="http://luozengbin.github.io/blog/2014-07-01-%5B%E3%83%A1%E3%83%A2%5Dotcopress%E3%81%AB%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B-%E3%81%9D%E3%81%AE%EF%BC%91.html"/>
    <updated>2014-07-01T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]otcopressにプラグインを導入する-その１</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">TagCloudとカテゴリリスト</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://github.com/tokkonopapa/octopress-tagcloud">このから</a> ダウンロードする
</p>
<pre class="example">
[akira@jizai tmp]$ git clone https://github.com/tokkonopapa/octopress-tagcloud.git
Cloning into 'octopress-tagcloud'...
remote: Reusing existing pack: 65, done.
remote: Total 65 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (65/65), done.
Checking connectivity... done.
[akira@jizai tmp]$
</pre>

<p>
<code>octopress-tagcloud/plugin/</code> 配下のファイルを <code>octopress/plugins</code> へコピーする。
<code>octopress-tagcloud/source/</code> 配下のファイルを <code>octopress/source</code> へコピーする。
</p>

<pre class="example">
[akira@jizai tmp]$ cd octopress-tagcloud/
[akira@jizai octopress-tagcloud]$ cp -rfv plugins/* ~/.emacs.d/blogs/octopress/plugins
`plugins/tag_cloud.rb' -&gt; `/home/akira/.emacs.d/blogs/octopress/plugins/tag_cloud.rb'
[akira@jizai octopress-tagcloud]$ cp -rfv source/* ~/.emacs.d/blogs/octopress/source
`source/_includes/custom/asides/tag_cloud.html' -&gt; `/home/akira/.emacs.d/blogs/octopress/source/_includes/custom/asides/tag_cloud.html'
`source/_includes/custom/asides/category_list.html' -&gt; `/home/akira/.emacs.d/blogs/octopress/source/_includes/custom/asides/category_list.html'
[akira@jizai octopress-tagcloud]$
</pre>

<p>
<code>octopress/_config.yml</code> の <code>default_asides</code> 項目に <code>custom/asides/tag_cloud.html</code> と
<code>custom/asides/category_list.html</code> を追加する。
</p>
<pre class="example">
default_asides: [...., custom/asides/tag_cloud.html, custom/asides/category_list.html, ..... ]
</pre>

<p>
このままだとTagCloudカテゴリリストが同じものになったしまうので、<a href="http://komasaru.github.io/blog/2012/12/19/octopress-add-tag-cloud/">ここ</a> と <a href="http://rcmdnk.github.io/blog/2013/04/12/blog-octopress/">ここ</a> の記事を
参考してカテゴライズ機能を流用してTagCloud機能を実装する。以下TagCloud機能を実現する
ためには変更及び追加したファイル一覧です。
</p>

<pre class="example">
[akira@hakusai octopress]$ git status
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

	modified:   _config.yml
	modified:   sass/partials/_archive.scss
	modified:   sass/partials/_blog.scss
	modified:   source/_includes/archive_post.html
	modified:   source/_includes/post/categories.html
	modified:   source/_layouts/page.html
	modified:   source/_layouts/post.html

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

	plugins/tag_cloud.old.rb
	plugins/tag_cloud.rb
	plugins/tag_generator.rb
	source/_includes/custom/asides/related.html
	source/_includes/custom/asides/tag_cloud.html
	source/_includes/custom/tag_feed.xml
	source/_includes/post/tags.html
	source/_layouts/tag_index.html
</pre>

<p>
記事書く際にヘッダの属性リストに <code>tags</code> と <code>category</code> を記述するすればOKです。
</p>

<pre class="example">
---
title: "[メモ]Otcopressにプラグインを導入する-その１"
date: 2014-07-01
layout: post
category: misc
tags: Octopress blog
published: true
comments: true
---
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">QRコード</h2>
<div class="outline-text-2" id="text-2">
<p>
Google Chart APIで記事URLのQRコードイメージを自動的に生成する。
</p>

<p>
<code>octopress/source/_includes/custom/asides/qrcode.html</code>
</p>
<pre class="example">
&lt;section&gt;
  &lt;!-- create at 2017/07/01 
       Google Chart Tools: Infographics
       https://developers.google.com/chart/infographics/docs/qr_codes?csw=1
  --&gt;

  &lt;div style="position: relative; text-align: center"&gt;

    &lt;!-- Google Chart API でQRコード取得 --&gt;
    &lt;img src="http://chart.apis.google.com/chart?chs=180x180&amp;amp;cht=qr&amp;amp;choe=UTF-8&amp;amp;chl=http://luozengbin.github.io/blog/2014-07-01-%5B%E3%83%A1%E3%83%A2%5Dotcopress%E3%81%AB%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B-%E3%81%9D%E3%81%AE%EF%BC%91.html" alt="post-qrcode" height="180" width="180" /&gt;

    &lt;!-- サイトのfaviconを重ねて表示する --&gt;
    &lt;div style="position: absolute; top: 75px; width: 100%; margin: 0 auto; text-align: center"&gt;
      &lt;img style="border: 0.2em solid #FFF;" src="http://luozengbin.github.io/favicon.png" alt="post-qrcode" height="30" width="30" /&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/section&gt;
</pre>

<p>
<code>octopress/_config.yml</code> の <code>default_asides</code> 項目に <code>custom/asides/qrcode.html</code> を追加
する。
</p>
<pre class="example">
default_asides: [...., custom/asides/qrcode.html, ..... ]
</pre>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">月間アーカイブ</h2>
<div class="outline-text-2" id="text-3">
<p>
作成中&#x2026;
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">参考リンク</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><a href="http://komasaru.github.io/blog/2012/12/19/octopress-add-tag-cloud/">Octopress - タグクラウドの追加</a>
</li>
<li><a href="http://rcmdnk.github.io/blog/2013/04/12/blog-octopress/">Octopressでのタグの運用</a>
</li>
<li><a href="http://komasaru.github.io/blog/2013/02/15/octopress-monthly-archives/">Octopress - 月別アーカイブ！</a>
</li>
<li><a href="http://rcmdnk.github.io/blog/2013/10/01/blog-octopress/">月間アーカイブ for Octopress</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[検証]SSHトンネル機能でVPN環境の構築]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-30-%5B%E6%A4%9C%E8%A8%BC%5DSSH%E3%83%88%E3%83%B3%E3%83%8D%E3%83%AB%E6%A9%9F%E8%83%BD%E3%81%A7VPN%E7%92%B0%E5%A2%83%E3%81%AE%E6%A7%8B%E7%AF%89.html"/>
    <updated>2014-06-30T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]SSHトンネル機能でVPN環境の構築</id>
    <content type="html"><![CDATA[<p>
友人に自宅のLAN内のコンテンツを共有するため、VPNについて検証しました。
自宅のルータはYamahaのRTX810です。このルータのVPN機能を使えば簡単に出来てしまうので面
白くないと思って、敢えてSSHのトンネル機能を使って0円VPN環境を構築してみた。
</p>

<p>
更に難易度を上げて、自宅WAN側のグローバルIPを公開せずにAmazonEC2インスタンスをVPN経路
に挟むことにしました。
</p>

<p>
<!-- more -->
</p>

<p>
通信経路イメージは以下のようになります。
</p>
<ul class="org-ul">
<li>区間１、友人PCとAmazonEC2間SSHトンネリングして通信する
</li>
<li>区間２、AmazonEC2間とRaspberry Pi間SSHトンネリングして通信する
</li>
<li>AmazonEC2インスタンスにて２つのSSHトンネルをethernet bridgeかiptablesによる結び付ける
</li>
<li>区間２のRaspberry PiにてProxy ARPかiptablesによるLANとの通信経路を制御する
</li>
</ul>

<pre class="example">
+-------------区間１---------+      +-------------区間２-----------------------+

                                                        ________________________
                                                       /      自宅LAN
                                                      |
                                                     /
                                __                  /
                            ___/  \_               |
+--------------+          _/        \__           / (DNAT)         +---------------+
|              |         /  (sshd)     \          +---------+      |   (sshd)      |
|  Tomodati    +--ssh--- |  Amazon EC2  ---ssh----+ RTX810  +------+ Raspberry Pi  |
|              |         \_           __/         +---------+      |               |
+--------------+           \__     __/            \                +---------------+
                              \___/                |
                                                    \
                                                     \
                                                      |
                                                       \________________________
</pre>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">SSHトンネリング</h2>
<div class="outline-text-2" id="text-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">方式</th>
<th scope="col" class="left">通信イメージ</th>
<th scope="col" class="left">broadcast</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">ppp over ssh</td>
<td class="left">トンネルの両端に仮想ダイヤルアップPPPで結び付ける</td>
<td class="left">☓</td>
</tr>

<tr>
<td class="left">TUNデバイス</td>
<td class="left">トンネルの両端に仮想TUNデバイスで結び付ける</td>
<td class="left">△</td>
</tr>

<tr>
<td class="left">TAPデバイス</td>
<td class="left">トンネルの両端に仮想tapデバイスで結び付ける</td>
<td class="left">◯</td>
</tr>
</tbody>
</table>

<ul class="org-ul">
<li>Point-to-Point TUN DeviceTUN
<ul class="org-ul">
<li>TUNデバイスはLayer3をエミュレートし、IPフレームを転送します。
</li>
<li>IP-in-IP トンネリング (Point-to-Point: PPP通信と似ている)
</li>
<li>GRE トンネリング (※未確認)
</li>
</ul>
</li>
<li>Ethernet TAP Device
<ul class="org-ul">
<li>TAPデバイスはLayer2(Ethernet)をエミュレートし、Ethernetフレームを転送します。
</li>
</ul>
</li>
</ul>

<p>
TUNデバイスとTAPデバイス利用するに当たって、 <code>tun</code> というカーネルモジュールが必要とし
ます。 SSHトンネリング時に自動的にロードしてくれます。
</p>

<pre class="example">
[akira@tomodati ~]$ modinfo tun
filename:       /lib/modules/3.15.2-1-ARCH/kernel/drivers/net/tun.ko.gz
alias:          devname:net/tun
alias:          char-major-10-200
license:        GPL
author:         (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
description:    Universal TUN/TAP device driver
depends:
intree:         Y
vermagic:       3.15.2-1-ARCH SMP preempt mod_unload modversions
[akira@tomodati ~]$
</pre>

<p>
<code>tun</code> カーネルモジュールのデバイス初期化処理のコード（カーネルバージョン:3.12）
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #888a85;">/* </span><span style="color: #888a85;">Initialize net device. </span><span style="color: #888a85;">*/</span>
<span style="color: #729fcf; font-weight: bold;">static</span> <span style="color: #8ae234; font-weight: bold;">void</span> <span style="color: #edd400; font-weight: bold;">tun_net_init</span>(<span style="color: #729fcf; font-weight: bold;">struct</span> <span style="color: #8ae234; font-weight: bold;">net_device</span> *<span style="color: #ff6347;">dev</span>)
{
    <span style="color: #729fcf; font-weight: bold;">struct</span> <span style="color: #8ae234; font-weight: bold;">tun_struct</span> *<span style="color: #ff6347;">tun</span> = netdev_priv(dev);

    <span style="color: #729fcf; font-weight: bold;">switch</span> (tun-&gt;flags &amp; TUN_TYPE_MASK) {
    <span style="color: #729fcf; font-weight: bold;">case</span> TUN_TUN_DEV:
        dev-&gt;netdev_ops = &amp;tun_netdev_ops;

        <span style="color: #888a85;">/* </span><span style="color: #888a85;">Point-to-Point TUN Device </span><span style="color: #888a85;">*/</span>
        dev-&gt;hard_header_len = 0;
        dev-&gt;addr_len = 0;
        dev-&gt;mtu = 1500;

        <span style="color: #888a85;">/* </span><span style="color: #888a85;">Zero header length </span><span style="color: #888a85;">*/</span>
        dev-&gt;type = ARPHRD_NONE;
        dev-&gt;flags = IFF_POINTOPOINT | IFF_NOARP | IFF_MULTICAST;
        dev-&gt;tx_queue_len = TUN_READQ_SIZE;  <span style="color: #888a85;">/* </span><span style="color: #888a85;">We prefer our own queue length </span><span style="color: #888a85;">*/</span>
        <span style="color: #729fcf; font-weight: bold;">break</span>;

    <span style="color: #729fcf; font-weight: bold;">case</span> TUN_TAP_DEV:
        dev-&gt;netdev_ops = &amp;tap_netdev_ops;
        <span style="color: #888a85;">/* </span><span style="color: #888a85;">Ethernet TAP Device </span><span style="color: #888a85;">*/</span>
        ether_setup(dev);
        dev-&gt;priv_flags &amp;= ~IFF_TX_SKB_SHARING;
        dev-&gt;priv_flags |= IFF_LIVE_ADDR_CHANGE;

        eth_hw_addr_random(dev);

        dev-&gt;tx_queue_len = TUN_READQ_SIZE;  <span style="color: #888a85;">/* </span><span style="color: #888a85;">We prefer our own queue length </span><span style="color: #888a85;">*/</span>
        <span style="color: #729fcf; font-weight: bold;">break</span>;
    }
}
</pre>
</div>

<p>
TUNデバイスのIP-in-IP方式とppp方式どちらもPPPプロトコルを使ってSSHトンネル両端間で通信
するため、本検証ではppp方式を検証対象外としました。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">TUNデバイス利用方式</h2>
<div class="outline-text-2" id="text-2">
<p>
TUNデバイスでトンネリングする、iptablesとルーティングテーブルで交通を整理する。
</p>

<ul class="org-ul">
<li>区間１:SSHトンネルでTomodatiとAmazonEC2間Point-To-Pointで通信できるようにする
</li>
<li>区間２:SSHトンネルでAmazonEC2とRaspberryPi間Point-To-Pointで通信できるようにする
</li>
<li>AmazonEC2にて区間１と区間２のパケットをルーティングさせる（★ルータ的な役割）
</li>
</ul>

<p>
以下は通信イメージ図です。区間１と区間２リンク層の物理NICを表していない。
</p>
<pre class="example">
       +-----------区間１---------+                  +----------区間２------+
       |                          |                  |                      |
       |                          |                  |                      |
 &lt;&lt;Tomodati&gt;&gt;              &lt;&lt;AmazonEC2&gt;&gt;                             &lt;&lt;RaspberryPi&gt;&gt;
┏━━━━━━━┓        ┏━━━━━━━━━━━━━━━━┓      ┏━━━━━━━━━━━┓
┃              ┃        ┃[sshd]                          ┃      ┃[sshd]                ┃
┃    ┏━━┓  ┃ &lt;ssh&gt;  ┃  ┏━━┓            ┏━━┓  ┃&lt;ssh&gt; ┃  ┏━━┓   ┏━━┓ ┃
┃    ┃tun0┣━╋━━━━╋━┫tun0┃&gt;&gt;&gt; SNAT &gt;&gt;&gt;┃tun1┣━╋━━━╋━┫tun1┃   ┃eth0┣━━192.168.100.0/24
┃    ┗━━┛  ┃        ┃  ┗━━┛            ┗━━┛  ┃      ┃  ┗━━┛   ┗━━┛ ┃         ^
┃  192.168.3.1 ┃        ┃192.168.3.2          192.168.4.1┃      ┃ 192.168.4.2          ┃         |
┗━━━━━━━┛        ┗━━━━━━━━━━━━━━━━┛      ┗━━━━━━━━━━━┛         |
        |                                                                                              |
        |                      多重VPN経路を通して、192.168.100.0/24へアクセスする                     |
        +----------------------------------------------------------------------------------------------+
</pre>

<p>
構築手順
</p>
<ul class="org-ul">
<li>1. sshdに対してトンネリングを有効化する
</li>
<li>2. rootユーザログインできるように公開鍵を登録する ※1
</li>
<li>3. SSHトンネルを開設する
</li>
<li>4. 各TUNデバイスにIPアドレスを付与する
</li>
<li>5. 区間１トンネルと区間２トンネルを結び付ける
</li>
</ul>

<p>
※1: sshログイン時にtapデバイスファイルを自動生成するためにクライアント側とサーバ側に
     root特権を持つアカウントを利用せざるを得ない。
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">1.sshdに対してトンネリングを有効化する</h3>
<div class="outline-text-3" id="text-2-1">
<p>
AmazonEC2インスタンスとRaspberryPiが設定対象となります。 <code>/etc/ssh/sshd_config</code> ファイ
ルに以下の内容を追加して、 <code>sshd</code> サービスをリロードする。
</p>

<pre class="example">
########################################################################
# トンネリング機能を有効化する
#    point-to-point … Layer 3 のトンネリングのみを許可 (TUNデバイスを使用)
#    ethernet … Layer 2 のトンネリングのみを許可 (tapデバイスを使用)
#    yes … 両方のタイプのトンネリングを許可 (クライアントがトンネリングのタイプを選べる)
#    no … トンネリングを許可しない
########################################################################
PermitTunnel yes
</pre>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">2.rootユーザログインできるように公開鍵を登録する</h3>
<div class="outline-text-3" id="text-2-2">
<p>
区間１はAmazonEC2へのログインですので、EC2インスタンス作成時に生成された秘密鍵でログ
インできる。
</p>

<p>
区間２のログインは公開鍵方式を使うため、以下の手順で鍵生成と登録を実施する。
</p>
<ul class="org-ul">
<li>Tomodatiにて <code>ssh-keygen</code> で鍵ペアを作成する。
</li>
<li>生成された公開鍵 <code>id_rsa.pub</code> の内容をAmazonEC2の <code>/root/.ssh/authorized_keys</code> に追加する。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">3.SSHトンネルを開設する</h3>
<div class="outline-text-3" id="text-2-3">
<p>
rootユーザでsshコマンドにオプションを付けてログインすることでSSHトンネルが開設される。
一々オプションを指定するのが面倒なので、 <code>/root/.ssh/config</code> にまとめて書きましょう。
</p>

<p>
区間１のSSHトンネルを開設するための <code>/root/.ssh/config</code>
</p>
<pre class="example">
Host     amazon-vpn
  HostName        xxxxxxxx.compute.amazonaws.com   ★AmazonEC2インスタンスのPublic DNS
  User            root
  IdentityFile    /tmp/private-ec2.pem             ★秘密鍵
  LogLevel        DEBUG
  Tunnel          point-to-point                   ★tun方式
  TunnelDevice    0:0                              ★デバイスペアの番号(tun0 ... tun0)
  RequestTTY      no
  PermitLocalCommand yes
  LocalCommand    /tmp/setup_tun0_client           ★ログイン成功後ローカルで実行するコマンドの定義
</pre>

<p>
区間２のSSHトンネルを開設するための <code>/root/.ssh/config</code>
</p>
<pre class="example">
Host    jitaku-vpn
  HostName        xxxxx.mydns.jp  ★RTX810のWAN側のグローバルIP
  User            root
  Port            22              ★SSHポート
  LogLevel        DEBUG
  Tunnel          point-to-point
  TunnelDevice    1:1
  RequestTTY      no
  PermitLocalCommand yes
  LocalCommand    /tmp/setup_tun1_client
</pre>

<p>
区間１のSSHトンネル起動時のログ
</p>
<pre class="example">
[root@tomodati ~]# ssh amazon-vpn
debug1: permanently_set_uid: 0/0
debug1: permanently_drop_suid: 0
debug1: identity file /tmp/private-ec2.pem type -1
debug1: identity file /tmp/private-ec2.pem-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.6.1
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1 Ubuntu-2ubuntu2
debug1: match: OpenSSH_6.6.1p1 Ubuntu-2ubuntu2 pat OpenSSH_6.6.1* compat 0x04000000
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5-etm@openssh.com none
debug1: kex: client-&gt;server aes128-ctr hmac-md5-etm@openssh.com none
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ECDSA d8:71:41:32:08:0d:8a:4c:24:6a:74:45:21:7d:ef:0c
debug1: Host 'xxxxxxxx.compute.amazonaws.com' is known and matches the ECDSA host key.
debug1: Found key in /root/.ssh/known_hosts:3
debug1: ssh_ecdsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /tmp/private-ec2.pem
debug1: key_parse_private2: missing begin marker
debug1: read PEM private key done: type RSA
debug1: Authentication succeeded (publickey).
Authenticated to xxxxxxxx.compute.amazonaws.com.
debug1: Requesting tun unit 0 in mode 1
debug1: sys_tun_open: tun0 mode 1 fd 3
debug1: channel 0: new [tun]
debug1: channel 1: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
</pre>

<p>
Tomodatiに <code>tun0</code> デバイスが生成されたことを確認する。
</p>
<pre class="example">
[root@tomodati ~]# ip link show | grep tun0
11: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 500
</pre>

<p>
区間２開設後、AmazonEC2に <code>tun1</code> デバイスが生成されたことを確認する。
</p>
<pre class="example">
root@ip-xxxxxxxx:~# ip link show | grep tun
★tun0 は区間１開設時生成されたデバイス
26: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 500

★tun1 は区間２開設時生成されたデバイス
27: tun1: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 500
root@ip-xxxxxxxx:~#
</pre>

<p>
RaspberryPiに生成された <code>tun1</code> デバイスを確認する
</p>
<pre class="example">
[root@pipi ~]# ifconfig | grep tun
tun1: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500
[root@pipi ~]#
</pre>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">4.各TUNデバイスにIPアドレスを付与する</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Tomodatiの <code>tun0</code> デバイスに <code>192.168.3.1</code> アドレスを指定する、Point-To-Point通信のた
め、対向側のTUNデバイスのIPアドレスも指定する。
</p>
<pre class="example">
★IPアドレス指定
[root@tomodati ~]# ifconfig tun0 192.168.3.1 pointopoint 192.168.3.2

★IPアドレス確認
[root@tomodati ~]# ifconfig tun0
tun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500
        inet 192.168.3.1  netmask 255.255.255.255  destination 192.168.3.2
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

★ルーティングテーブルに自動で追加された経路
[root@tomodati ~]# ip route show | grep tun
192.168.3.2 dev tun0  proto kernel  scope link  src 192.168.3.1
[root@tomodati ~]#
</pre>

<p>
AmazonEC2インスタンスのTUNデバイスにアドレスを指定する。
</p>
<pre class="example">
★区間１：tun0デバイスのIP指定
root@ip-xxxxxxxx:~# ifconfig tun0 192.168.3.2 pointopoint 192.168.3.1
root@ip-xxxxxxxx:~# ifconfig tun0
tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
          inet addr:192.168.3.2  P-t-P:192.168.3.1  Mask:255.255.255.255
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:500 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

★区間２：tun1デバイスのIP指定
root@ip-xxxxxxxx:~# ifconfig tun1 192.168.4.1 pointopoint 192.168.4.2
root@ip-xxxxxxxx:~# ifconfig tun1
tun1      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
          inet addr:192.168.4.1  P-t-P:192.168.4.2  Mask:255.255.255.255
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:500 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

★ルーティングテーブルに自動で追加された経路
root@ip-xxxxxxxx:~# ip route show | grep tun
192.168.3.1 dev tun0  proto kernel  scope link  src 192.168.3.2 
192.168.4.2 dev tun1  proto kernel  scope link  src 192.168.4.1 
root@ip-xxxxxxxx:~#
</pre>

<p>
RaspberryPiのTUNデバイスにアドレスを指定する。
</p>

<pre class="example">
★IPアドレス指定
[root@pipi ~]# ifconfig tun1 192.168.4.2 pointopoint 192.168.4.1
[root@pipi ~]# ifconfig tun1
tun1: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500
        inet 192.168.4.2  netmask 255.255.255.255  destination 192.168.4.1
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

★ルーティングテーブルに自動で追加された経路
[root@pipi ~]# ip route show | grep tun
192.168.4.1 dev tun1  proto kernel  scope link  src 192.168.4.2 
[root@pipi ~]#
</pre>
</div>
</div>

<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5">5.区間１トンネルと区間２トンネルを結び付ける</h3>
<div class="outline-text-3" id="text-2-5">
<p>
AmazonEC2にてiptablesのSNAT機能を用いて区間１と区間２のパケットをルーティングさせる。
</p>
<pre class="example">
★ パケット転送を許可する
root@ip-xxxxxxxx:~# sysctl -w net.ipv4.ip_forward=1

★ tun0からtun1へ転送時にMASQUERADEを行う
root@ip-xxxxxxxx:~# iptables -t nat -A POSTROUTING -o tun1 -s 192.168.3.0/24 -j MASQUERADE
</pre>

<p>
区間１と区間２の各ノードに <code>192.168.100.0/24</code> への転送ルートを定義する。
</p>

<p>
Tomodatiに <code>192.168.100.0/24</code> への転送ルートを定義する。
</p>
<pre class="example">
[root@tomodati ~]# ip route add 192.168.100.0/24 via 192.168.3.2 dev tun0
[root@tomodati ~]# ip route show
192.168.3.2 dev tun0  proto kernel  scope link  src 192.168.3.1

★ 192.168.100.0/24への通信はすべてtun0を経路する
192.168.100.0/24 via 192.168.3.2 dev tun0
</pre>

<p>
AmazonEC2に <code>192.168.100.0/24</code> への転送ルートを定義する。
</p>
<pre class="example">
★ 区間１から =192.168.100.0/24= へのパケットを転送を許可する
root@ip-xxxxxxxx:~# iptables -A FORWARD -i tun0 -p tcp -d 192.168.100.0/24 -j ACCEPT

★ =192.168.100.0/24= への転送ルートを追加する
root@ip-xxxxxxxx:~# ip route add 192.168.100.0/24 via 192.168.4.2 dev tun1

★ 192.168.100.0/24への通信はすべてtun1を経路する
root@ip-xxxxxxxx:~# ip route show
192.168.3.1 dev tun0  proto kernel  scope link  src 192.168.3.2
192.168.4.2 dev tun1  proto kernel  scope link  src 192.168.4.1
192.168.100.0/24 via 192.168.4.2 dev tun1
</pre>

<p>
RaspberryPiに <code>192.168.100.0/24</code> への転送ルートを定義する。
</p>

<pre class="example">
★ ローカルサブネットへルーティング時のDNAT設定
[root@pipi ~]# sysctl -w net.ipv4.ip_forward=1

★ tun1 から eth0 出て行く時にMASQUERADEする
[root@pipi ~]# iptables -t nat -A POSTROUTING -o eth0 -s 192.168.4.0/24 -j MASQUERADE
</pre>

<p>
ここまで、区間１から <code>192.168.100.0/24</code> への接続ができるようになります。逆方向の接続
は同じ考え方でiptables、ルーティングテーブルを駆使すればできると思います。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">TAPデバイス利用方式</h2>
<div class="outline-text-2" id="text-3">
<p>
TAPデバイスはLayer2(Ethernet)をエミュレートできるため <code>bridge</code> カーネルモジュールや
ARP Proxy 機能と組み合わせて柔軟なVPNを構成することが可能になります。
</p>

<p>
VPNネットワーク構成概要
</p>
<ul class="org-ul">
<li>VPN部分を自宅LANのサブネットセグメントとして定義する
</li>
<li>区間１、区間２はTAPデバイスよりSSHトンネリングする
</li>
<li>区間１と区間２はBridgeで繋ぐ (★AmazonEC2はハブ的な役割)
</li>
<li>RaspberryPiノード上のtapとeth0間でARP PROXYし、２つセグメントを繋ぐ
</li>
</ul>

<p>
以下は通信イメージ図です。一部リンク層の物理NICを表していない。
</p>
<pre class="example">
   +---------------------------------------------------------------------------------------------------------------------+
   |                                                                            〜自宅のLANセグメント〜                  |
   |   +-----------------------------------------------------------------+                                               |
   |   |         〜多重VPNによるサブネットセグメント〜                   |                                               |
   |   |           network   : 192.168.100.48/29                         |    network   : 192.168.100.0/24               |
   |   |           netmask   : 255.255.255.248                           |    netmask   : 255.255.255.0                  |
   |   |           broadcast : 192.168.100.55                            |    broadcast : 192.168.100.255                |
   |   |           gateway   : 192.168.100.54                            |    gateway   : 192.168.100.1                  |
   |   |           ip range  : 192.168.100.49〜192.168.100.54            |    ip range  : 192.168.100.1〜192.168.100.254 |
   |   |                                                                 |                                               |
   |   |                                                                 |                                               |
   |   +-----------区間１--------+                  +--------区間２------+                                               |
   |   |                         |                  |                    |                                               |
 &lt;&lt;Tomodati&gt;&gt;              &lt;&lt;AmazonEC2&gt;&gt;                             &lt;&lt;RaspberryPi&gt;&gt;                                     |
┏━━━━━━━┓        ┏━━━━━━━━━━━━━━━┓      ┏━━━━━━━━━━━━━━━━┓                   |
┃              ┃        ┃[sshd]                        ┃      ┃[sshd]                          ┃                   |
┃              ┃        ┃        ┏━━━━━┓        ┃      ┃                                ┃                   |
┃              ┃        ┃      ┏┫    br0   ┣┓      ┃      ┃                                ┃                   |
┃              ┃        ┃      ┃┗━━━━━┛┃      ┃      ┃                                ┃                   |
┃192.168.100.49┃        ┃      ┃192.168.100.50┃      ┃      ┃192.168.100.54                  ┃                   |
┃    ┏━━┓  ┃ &lt;ssh&gt;  ┃  ┏━┻┓          ┏┻━┓  ┃&lt;ssh&gt; ┃  ┏━━┓             ┏━━┓ ┃                   |
┃    ┃tap0┣━╋━━━━╋━┫tap0┃          ┃tap1┣━╋━━━╋━┫tap1┃&lt;&lt;ARP PROXY&gt;&gt;┃eth0┣━━192.168.100.0/24--+
┃    ┗━━┛  ┃        ┃  ┗━━┛          ┗━━┛  ┃      ┃  ┗━━┛             ┗━━┛ ┃         ^
┗━━━━━━━┛        ┗━━━━━━━━━━━━━━━┛      ┗━━━━━━━━━━━━━━━━┛         |
        |                                                                                                      |
        |                      多重VPN経路を通して、192.168.100.0/24へアクセスする                             |
        +------------------------------------------------------------------------------------------------------+
</pre>

<p>
区間２のRaspberryPiノード上のtap1とeth0の繋ぐ方法について、=ARP PROXY= 以外にBridge方
式もできる。Bridge方式だと <code>192.168.100.0/24</code> セグメントのブロードキャストパケットが
全部AamzonEC2に転送されて、AWSの課金が飛んでしまう可能性があるため、 <code>ARP PROXY</code> 方
式のほうが適していると勝手な判断です。
</p>

<p>
構築の詳細手順を割愛します。検証で作成したスクリプトを以下に示します。
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">区間１の設定</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Tomodati <code>/root/.ssh/config</code> ：SSHクライアント設定
</p>
<pre class="example">
Host     amazon-vpn-tap
  HostName        xxxxxxxx.compute.amazonaws.com   ★AmazonEC2インスタンスのPublic DNS
  User            root
  IdentityFile    /tmp/private-ec2.pem             ★秘密鍵
  LogLevel        DEBUG
  Tunnel          ethernet                         ★tap方式
  TunnelDevice    0:0                              ★デバイスペアの番号(tap0 ... tap0)
  RequestTTY      no
  PermitLocalCommand yes
  LocalCommand    /tmp/setup_tap0_client           ★ログイン成功後ローカルで実行するコマンドの定義
</pre>

<p>
Tomodati <code>/tmp/setup_tap0_client</code>
</p>
<pre class="example">
#!/bin/sh

## tap0のIPアドレスアサイン
ifconfig tap0 192.168.100.49/29

## 192.168.100.0/24 セグメントへのルート定義
ip route add 192.168.100.0/24 via 192.168.100.54 dev tap0
</pre>

<p>
AmazonEC2 <code>/root/.ssh/authorized_keys</code>
</p>
<pre class="example">
★rootユーザでログイン後 /root/.ssh/setup_tap0 を実行する定義
no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command="/root/.ssh/setup_tap0" ssh-rsa xxxxxxxxx
                                                         ~~~~~~~ ←rootユーザで実行できるコマンドを限定する
</pre>

<p>
AmazonEC2 <code>/root/.ssh/setup_tap0</code> 、brctlコマンドは <code>bridge-utils</code> パッケージに含まれ
ている。
</p>
<pre class="example">
#!/bin/bash

## br0 ブリッジデバイスを作成
brctl addbr br0

## br0 ブリッジデバイスにIPをアサインする
ifconfig br0 192.168.100.51/29

## tap0デバイスを活性化する
ip link set tap0 up

## tap0デバイスを br0 ブリッジに刺す
brctl addif br0 tap0
</pre>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">区間２の設定</h3>
<div class="outline-text-3" id="text-3-2">
<p>
AmazonEC2 <code>/root/.ssh/config</code> ：SSHクライアント設定
</p>
<pre class="example">
Host     jitaku-vpn-tap
  HostName        xxxxx.mydns.jp  ★RTX810のWAN側のグローバルIP
  User            root
  Port            22              ★SSHポート
  LogLevel        DEBUG
  Tunnel          ethernet                         ★tap方式
  TunnelDevice    1:1
  RequestTTY      no
  PermitLocalCommand yes
  LocalCommand    /tmp/setup_tap1_client           ★ログイン成功後ローカルで実行するコマンドの定義
</pre>

<p>
AmazonEC2 <code>/tmp/setup_tap1_client</code>
</p>
<pre class="example">
#!/bin/sh

## tap1デバイスを活性化する
ip link set tap1 up

## tap1デバイスを br0 ブリッジに刺す
brctl addif br0 tap1

## 192.168.100.0/24 セグメントへのルート定義
ip route add 192.168.100.0/24 via 192.168.100.54 dev br0
</pre>

<p>
RaspberryPi <code>/root/.ssh/authorized_keys</code>
</p>
<pre class="example">
★rootユーザでログイン後 /root/.ssh/setup_tap1 を実行する定義
no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command="/root/.ssh/setup_tap1" ssh-rsa xxxxxxxxx
</pre>

<p>
RaspberryPi <code>/root/.ssh/setup_tap1</code>
</p>
<pre class="example">
#!/bin/sh

## tap1デバイスにIPをアサインする
ifconfig tap1 192.168.100.54/29

## APR PROXY機能を有効にする
sysctl -w net.ipv4.ip_forward=1
sysctl -w net.ipv4.conf.eth0.proxy_arp=1
</pre>
</div>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">おまけに</h2>
<div class="outline-text-2" id="text-4">
<p>
今後機会があれば、TUNデバイス方式とTAPデバイス方式の性能を比較したいと思います。
TAP の方が Ethernetヘッダが付加されるため、TUNより通信量が多いいのでTUNの方がが
性能がいいかもしれない。但しTUN方式はPoint-To-Point通信であるため、BroadCastや
MultiCastが出来ない部分とネットワークセグメント間のパケット転送の設定（iptabels）
が面倒の部分もあります。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">参考リンク</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="http://www.komoto.org/vpn/index.html">VPN技術について</a>
</li>
<li><a href="http://www.unixuser.org/~euske/doc/openssh/book/chap6.html#real-vpn">入門OpenSSH - 第6章 すすんだ使い方</a>
</li>
<li><a href="http://www.usupi.org/sysad/248.html">SSH でVPNを実現する</a>
</li>
<li><a href="http://www.usupi.org/sysad/066.html">お試しネットワーク環境を作る ～ Proxy ARP 編</a>
</li>
<li><a href="http://web.mit.edu/rhel-doc/4/RH-DOCS/rhel-sg-ja-4/s1-firewall-ipt-fwd.html">Red Hat Enterprise Linux 4: セキュリティガイド</a>
</li>
<li><a href="https://access.redhat.com/site/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Firewalls-FORWARD_and_NAT_Rules.html">FORWARD および NAT ルール</a>
</li>
<li><a href="http://sgros.blogspot.jp/2011/11/tunneling-everything-with-ssh-or-how-to.html">Tunneling everything with SSH&#x2026; or how to make VPNs&#x2026;</a>
</li>
<li><a href="http://sgros.blogspot.jp/2011/11/ssh-vpns-bridged-connection-to-lan.html">SSH VPNs: Bridged connection to LAN using tap</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]Emacsで漢字→かな変換]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-29-%5B%E3%83%A1%E3%83%A2%5Demacs%E3%81%A7%E6%BC%A2%E5%AD%97%E2%86%92%E3%81%8B%E3%81%AA%E5%A4%89%E6%8F%9B.html"/>
    <updated>2014-06-29T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]emacsで漢字→かな変換</id>
    <content type="html"><![CDATA[<p>
Emacsをドキュメントビューアとして使っていますが、時々漢字の読み方がわからないことに遭
遇します。漢字から意味を読み取ったとしても、読み方がわからない場合が多いい。いままで
一々ブラウザに切り替えて調べました。せっかくEmacsを使っているので自動化してみました。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">考案</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>スクラップ開発：選択テキストを漢字なか変換Webサービスに投げって応答を表示する
</li>
<li>既存のものを使う
</li>
</ol>

<p>
効率を考えて２の近道を選択しました。
</p>

<p>
ひとまず、 <code>list-packages</code> でELPAに登録されたパッケージを検索した、意外に当てはまる
ものもが見つかりませんでした。googleしたら <code>skk-kakasi.el</code> が浮上してきた。
</p>

<p>
例の <code>Meadow/Emacs memo</code> の <a href="http://www.bookshelf.jp/soft/meadow_21.html#SEC197">21.3.2 漢字をひらがなへ変換 ― skk-kakasi</a> セクションに
機能紹介がありました。以下はその内容の引用です。
</p>

<pre class="example">
これは SKK に附属しています。 skk-kakasi.el です。
動作には kakasi が必要です。
例えば,
読み方の分からない文字をリージョンで選択し, skk-gyakubiki-message とすると, ミニバッファ
によみ方が出力されます. ただし, 第 1 候補のみ. C-u M-x skk-gyakubiki-messageとすると,
すべての候補が出力されます. 他にも漢字の混ざった文章にふり仮名をという文章を選択し,
skk-hurigana-regionとすると漢字 [かんじ] の混ざ [まざ] った文章 [ぶんしょう] にふり仮
名 [かな] をとできます. 他にもいろいろと用意されているので, 一度ソースを読んで見てくだ
さい. ちゃんと日本 語で詳しく説明してありますよ．
</pre>

<p>
早速導入してみた、以下はその手順です。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><code>skk-kakasi.el</code> の導入手順</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>skk-kakasi.el</code> の導入に必要なもの
</p>
<ul class="org-ul">
<li>KAKASI - 漢字→かな(ローマ字)変換プログラム： <a href="http://kakasi.namazu.org/">http://kakasi.namazu.org/</a>
</li>
<li>ddskk：<a href="http://openlab.ring.gr.jp/skk/ddskk-ja.html">http://openlab.ring.gr.jp/skk/ddskk-ja.html</a>
</li>
</ul>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">KAKASIのインストール</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Archlinuxをお使いなので <code>sudo pacman -S kakasi</code> で一発でインストールが出来ました。
</p>

<pre class="example">
[akira@jizai .emacs.d]$ sudo pacman -S kakasi
依存関係を解決しています...
相互衝突をチェックしています...

パッケージ (1): kakasi-2.3.6-1

Total Download Size:    0.69 MiB
Total Installed Size:   2.36 MiB

:: インストールを行いますか？ [Y/n] 
:: パッケージを取得します ...
 kakasi-2.3.6-1-x86_64                                                                                708.8 KiB  3.96M/s 00:00 [#############################################################################] 100%
(1/1) キーリングのキーを確認                                                                                                   [#############################################################################] 100%
(1/1) パッケージの整合性をチェック                                                                                             [#############################################################################] 100%
(1/1) パッケージファイルのロード                                                                                               [#############################################################################] 100%
(1/1) ファイルの衝突をチェック                                                                                                 [#############################################################################] 100%
(1/1) 空き容量を確認                                                                                                           [#############################################################################] 100%
(1/1) インストール kakasi                                                                                                      [#############################################################################] 100%

★インストールされたファイル一式を確認する
[akira@jizai .emacs.d]$ pacman -Ql kakasi
kakasi /usr/
kakasi /usr/bin/
kakasi /usr/bin/atoc_conv
kakasi /usr/bin/kakasi
kakasi /usr/bin/kakasi-config
kakasi /usr/bin/mkkanwa
kakasi /usr/bin/rdic_conv
kakasi /usr/bin/wx2_conv
kakasi /usr/include/
kakasi /usr/include/libkakasi.h
kakasi /usr/lib/
kakasi /usr/lib/libkakasi.so
kakasi /usr/lib/libkakasi.so.2
kakasi /usr/lib/libkakasi.so.2.1.0
kakasi /usr/share/
kakasi /usr/share/kakasi/
kakasi /usr/share/kakasi/itaijidict
kakasi /usr/share/kakasi/kanwadict
kakasi /usr/share/man/
kakasi /usr/share/man/man1/
kakasi /usr/share/man/man1/kakasi-config.1.gz
kakasi /usr/share/man/man1/kakasi.1.gz
[akira@jizai .emacs.d]$
</pre>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">ddskk のインストール</h3>
<div class="outline-text-3" id="text-2-2">
<p>
ddskk のインストール手順はいくつがあります。詳細はddskkのインストールマニュアルへ参照する。
</p>

<p>
本家から最新版のダウンロード
</p>
<pre class="example">
$ wget http://openlab.ring.gr.jp/skk/maintrunk/ddskk-20140622.tar.gz
$ tar xzvf ddskk-20140622.tar.gz
$ cd ddskk-20140622
</pre>

<p>
<code>ddskk-20140622/SKK-CFG</code> ファイルの最後にインストール先を指定する。
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #888a85;">;;; </span><span style="color: #888a85;">&#36766;&#26360;&#12501;&#12449;&#12452;&#12523;&#12398;&#26684;&#32013;&#20808;</span>
(setq SKK_DATADIR <span style="color: #ad7fa8; font-style: italic;">"~/.emacs.d/etc/skk"</span>)

<span style="color: #888a85;">;;; </span><span style="color: #888a85;">&#12489;&#12461;&#12517;&#12513;&#12531;&#12488;</span>
(setq SKK_INFODIR <span style="color: #ad7fa8; font-style: italic;">"~/.emacs.d/share/info-ja/skk"</span>)

<span style="color: #888a85;">;;; </span><span style="color: #888a85;">skk lisp&#26412;&#20307;</span>
(setq SKK_LISPDIR <span style="color: #ad7fa8; font-style: italic;">"~/.emacs.d/lisp/skk"</span>)

<span style="color: #888a85;">;;; </span><span style="color: #888a85;">skk-large-jisyo &#12398;&#20516;&#12434;&#33258;&#21205;&#35373;&#23450;&#12377;&#12427;</span>
(setq SKK_SET_JISYO t)
</pre>
</div>

<p>
DDSKKのインストール
</p>
<pre class="example">
★ インストーラが SKK の各ファイルをどこにインストールしようとしているかを確認する
$ make what-where

★ インストール
$ make install
</pre>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">動作確認</h3>
<div class="outline-text-3" id="text-2-3">
<p>
<code>(require 'skk-kakasi)</code> でskk-kakasi.elをロードし、適当に漢字を含むテキストを選択し
<code>skk-gyakubiki-message</code> を実行する。
</p>

<video controls>
   <source src="video/2014-06-29-skk-gyakubiki-message.mp4">
   <source src="video/2014-06-29-skk-gyakubiki-message.webm">
</video>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">更に自動化する</h2>
<div class="outline-text-2" id="text-3">
<p>
<code>pos-tip.el</code> と連携してtooltip形でカッコ良く表示する。漢字の読み方をチラ見に便利。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #729fcf; font-weight: bold;">require</span> '<span style="color: #8ae234;">skk-autoloads</span>)
(<span style="color: #729fcf; font-weight: bold;">require</span> '<span style="color: #8ae234;">skk-kakasi</span>)
(<span style="color: #729fcf; font-weight: bold;">require</span> '<span style="color: #8ae234;">pos-tip</span>)

<span style="color: #888a85;">;;; </span><span style="color: #888a85;">&#12405;&#12426;&#20206;&#21517;&#22793;&#25563;&#32080;&#26524;&#12434;pos-tip&#12391;&#34920;&#31034;&#12377;&#12427;</span>
(<span style="color: #729fcf; font-weight: bold;">defun</span> <span style="color: #edd400; font-weight: bold;">skk-hurigana-tip</span> (start end <span style="color: #8ae234; font-weight: bold;">&amp;optional</span> all)
  <span style="color: #888a85;">"&#38936;&#22495;&#12398;&#28450;&#23383;&#12395;&#20840;&#12390;&#12405;&#12426;&#12364;&#12394;&#12434;&#20184;&#12369;&#12289;&#12509;&#12483;&#12503;&#12450;&#12483;&#12503;&#12377;&#12427;&#12290;"</span>
  (interactive <span style="color: #ad7fa8; font-style: italic;">"r\nP"</span>)
  (pos-tip-show (skk-hurigana-1 start end all)))

<span style="color: #888a85;">;;; </span><span style="color: #888a85;">&#36969;&#24403;&#12395;&#12461;&#12540;&#12434;&#21106;&#12426;&#24403;&#12390;&#12377;&#12427;</span>
(global-set-key (kbd <span style="color: #ad7fa8; font-style: italic;">"C-x x"</span>) 'skk-hurigana-tip)
</pre>
</div>


<p>
<code>popwin.el</code> でpopupバッファーで表示する。変換結果を流用したい場合に便利。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #729fcf; font-weight: bold;">require</span> '<span style="color: #8ae234;">skk-autoloads</span>)
(<span style="color: #729fcf; font-weight: bold;">require</span> '<span style="color: #8ae234;">skk-kakasi</span>)
(<span style="color: #729fcf; font-weight: bold;">require</span> '<span style="color: #8ae234;">popwin</span>)

<span style="color: #888a85;">;;; </span><span style="color: #888a85;">&#12405;&#12426;&#20206;&#21517;&#22793;&#25563;&#32080;&#26524;&#12496;&#12483;&#12501;&#12449;&#21517;</span>
(<span style="color: #729fcf; font-weight: bold;">defvar</span> <span style="color: #ff6347;">skk-kakasi-popbuf-name</span> <span style="color: #ad7fa8; font-style: italic;">" *skk-kakasi*"</span> <span style="color: #888a85;">"&#12405;&#12426;&#20206;&#21517;&#22793;&#25563;&#32080;&#26524;&#12496;&#12483;&#12501;&#12449;&#21517;"</span>)

(<span style="color: #729fcf; font-weight: bold;">defun</span> <span style="color: #edd400; font-weight: bold;">skk-hurigana-popup</span> (start end <span style="color: #8ae234; font-weight: bold;">&amp;optional</span> all)
  (interactive <span style="color: #ad7fa8; font-style: italic;">"r\nP"</span>)
  (<span style="color: #729fcf; font-weight: bold;">let</span> ((str0 (buffer-substring-no-properties start end))
        (str1 (skk-hurigana-1 start end all))
        (str2 (skk-gyakubiki-1 start end all)))
    (<span style="color: #729fcf; font-weight: bold;">with-current-buffer</span> (get-buffer-create skk-kakasi-popbuf-name)
      (setq buffer-read-only nil)
      (erase-buffer)
      (insert <span style="color: #ad7fa8; font-style: italic;">"KAKASI - &#28450;&#23383;&#8594;&#12363;&#12394;(&#12525;&#12540;&#12510;&#23383;)&#22793;&#25563;&#32080;&#26524;:\n"</span>)
      (insert <span style="color: #ad7fa8; font-style: italic;">"-------------------------------------\n\n"</span>)
      (insert str0 <span style="color: #ad7fa8; font-style: italic;">"\n\n"</span>)
      (insert str1 <span style="color: #ad7fa8; font-style: italic;">"\n\n"</span>)
      (insert str2 <span style="color: #ad7fa8; font-style: italic;">"\n\n"</span>)
      (setq buffer-read-only t))
    (display-buffer (get-buffer skk-kakasi-popbuf-name))))

<span style="color: #888a85;">;;; </span><span style="color: #888a85;">&#36969;&#24403;&#12395;&#12461;&#12540;&#12434;&#21106;&#12426;&#24403;&#12390;&#12377;&#12427;</span>
(global-set-key (kbd <span style="color: #ad7fa8; font-style: italic;">"C-x X"</span>) 'skk-hurigana-popup)
</pre>
</div>

<video controls>
   <source src="video/2014-06-29-skk-hurigana-popup.mp4">
   <source src="video/2014-06-29-skk-hurigana-popup.webm">
</video>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">もう一歩</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>オンライン辞書サービスを使って単語の解釈を表示したい
</li>
<li>テキスト読み上げ機能と連携したい
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]リモートXの接続方法]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-21-%5B%E3%83%A1%E3%83%A2%5D%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88x%E3%81%AE%E6%8E%A5%E7%B6%9A%E6%96%B9%E6%B3%95.html"/>
    <updated>2014-06-21T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]リモートxの接続方法</id>
    <content type="html"><![CDATA[<p>
リモートLinuxサーバでXアプリを利用するケースはしばしばあります。
実現方式について調べてみた。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">No</th>
<th scope="col" class="left">サーバ側</th>
<th scope="col" class="left">クライアント側</th>
<th scope="col" class="left">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="left">DISPLAY変数の指定</td>
<td class="left">xhostよりアクセス許可</td>
<td class="left">クライアント側6000番ポートの開放が必要</td>
</tr>

<tr>
<td class="right">2</td>
<td class="left">SSH X11 Forwarding</td>
<td class="left">ssh -X で接続する</td>
<td class="left">サーバ側：X11Forwarding yes が必要　</td>
</tr>

<tr>
<td class="right">3</td>
<td class="left">Xdmcp(udp:177)</td>
<td class="left">Xサーバとして動く</td>
<td class="left">Display Managerがエントリ画面になる</td>
</tr>

<tr>
<td class="right">4</td>
<td class="left">VNCサーバ(tcp:5901〜)</td>
<td class="left">VNCビューア</td>
<td class="left">よく使われる</td>
</tr>

<tr>
<td class="right">5</td>
<td class="left">XRDP</td>
<td class="left">XRDPクライアントソフト</td>
<td class="left">WindowsのRemote Desktop Procotol</td>
</tr>
</tbody>
</table>

<p>
VNCとXRDP以外のサーバとクライアントの役割
</p>
<ul class="org-ul">
<li>サーバ側:       Xアプリを動かす側
</li>
<li>クライアント側: Xサーバを動かす側
</li>
</ul>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">検証環境</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>クライアント: GDM経由でGnome3が動いているGUI環境
</li>
<li>サーバ: CUIモードLinux環境
</li>
</ul>

<pre class="example">
┏━━━━━━━┓      ┏━━━━━━━┓
┃ クライアント ┃      ┃   サーバ     ┃
┃  mimi-air    ┣━━━┫    pipi      ┃
┃192.168.100.13┃      ┃192.169.100.4 ┃
┗━━━━━━━┛      ┗━━━━━━━┛
</pre>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">xhostによるXアプリを起動する方式</h2>
<div class="outline-text-2" id="text-2">
<p>
通信イメージ
</p>
<pre class="example">
┏━━━━━━━━━━━━━━━━━┓        ┏━━━━━━━┓
┃    クライアント（Xサーバ）       ┃        ┃   サーバ     ┃
┃ Unixソケット                tcp  ┃        ┃   Xアプリ    ┃
┃ /tmp/.X11-unix/X0   &lt;----&gt;  6000 &lt;&lt;━━━━┫$DISPLAY      ┃
┗━━━━━━━━━━━━━━━━━┛        ┗━━━━━━━┛
</pre>

<p>
GDMパラメータにTCP接続許可の設定を行う。
</p>
<ul class="org-ul">
<li><code>/etc/gdm/custom.conf</code> に <code>DisallowTcp=false</code> を追加する。
</li>
<li><code>/usr/share/gdm/gdm.schemas</code> に <code>security/DisallowTCP</code> の値を <code>false</code> へ変更する。
</li>
</ul>

<p>
設定後、GDMを再起動して <code>netstat</code> コマンドで <code>6000</code> ポートがリスニング状態であること
を確認したうえで、 <code>xhost</code> コマンドでサーバからのアクセスを許可するようにする。
XサーバのTCP受け待ちポート番号は <code>6000+スクリン番号</code> 式で決まる。 Xサーバがスクリン１
で起動された場合TCP受け待ちポート番号が6001となります。通常は０番スクリーンが利用され
る。
</p>

<pre class="example">
[akira@mimi-air ~]$ sudo netstat -nutpl | grep 6000
tcp        0      0 0.0.0.0:6000            0.0.0.0:*               LISTEN      2115/Xorg
tcp6       0      0 :::6000                 :::*                    LISTEN      2115/Xorg

★アクセス許可
[akira@mimi-air ~]$ xhost + 192.168.100.4
192.168.100.4 being added to access control list

★アクセス許可リストの確認
[akira@mimi-air ~]$ xhost
access control enabled, only authorized clients can connect
INET:pipi
SI:localuser:akira
SI:localuser:gdm
SI:localuser:root
[akira@mimi-air ~]$
</pre>

<p>
サーバ側の <code>DISPLAY</code> 環境変数をクライアントをXサーバへ指すように変更する。
</p>
<pre class="example">
★環境変数設定
[akira@pipi ~]$ export DISPLAY=192.168.100.13:0.0

★環境変数確認
[akira@pipi ~]$ env | grep DISPLAY
DISPLAY=192.168.100.13:0.0

★Xアプリ起動して確認する
[akira@pipi ~]$ leafpad
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">SSH X11フォワード方式</h2>
<div class="outline-text-2" id="text-3">
<p>
通信イメージ
</p>
<pre class="example">
┏━━━━━━━━━━━━━━━━━┓        ┏━━━━━━━━━━━━━━━━━━━━━━┓
┃    クライアント（Xサーバ）       ┃        ┃      サーバ (Xアプリ)                      ┃
┃ Unixソケット                tcp  ┃ ssh -X ┃tcp                      Unixソケット       ┃
┃ /tmp/.X11-unix/X0   &lt;----&gt;  ssh  &lt;&lt;━━━━┫sshd &lt;---&gt; tcp:6010 &lt;--&gt; /tmp/.X11-unix/X10 ┃
┗━━━━━━━━━━━━━━━━━┛        ┗━━━━━━━━━━━━━━━━━━━━━━┛
</pre>

<p>
設定作業と接続手順
</p>
<ul class="org-ul">
<li>サーバ側のSSHにX11フォワードを許可するようにする。
</li>
<li>クライアントから <code>ssh -X</code> で接続する。
</li>
</ul>

<p>
クライアントからサーバに接続するに際にサーバサイトで以下の処理が実装される。
</p>
<ul class="org-ul">
<li>DISPLAY環境変数を <code>localhost:10.0</code> に設定する。
</li>
<li><code>xauth</code> コマンドで <code>~/.Xauthority</code> に認証用クッキーを追加する。
</li>
</ul>

<p>
<code>ssh -X</code> で接続時にエラーが起きた場合、 <code>-v</code> オプションでデバッグメッセージの出力を有
効にするとトラブルの原因究明に効果的かもしれない。
</p>

<pre class="example">
■サーバ側
------------------------------------------------------------

★サーバ側のX11Forwarding設定値を確認する
[akira@pipi ~]$ cat /etc/ssh/sshd_config | grep X11Forwarding
X11Forwarding yes
[akira@pipi ~]$ 

■クライアント側
------------------------------------------------------------
★-Xオプションつけてサーバへ接続する
[akira@mimi-air ~]$ ssh -X pipi
Last login: Sun Jun 22 08:58:59 2014 from 192.168.100.13

■サーバ側
------------------------------------------------------------
★DISPLAY環境変数の確認
[akira@pipi ~]$ env | grep DISPLAY
DISPLAY=localhost:10.0

★~/.Xauthorityに登録されたクッキーの確認
[akira@pipi ~]$ xauth list
pipi/unix:10  MIT-MAGIC-COOKIE-1  75af091faa9e151987efb8fb46c5e2d3

★6010ポートのリスリング状態の確認
[akira@pipi ~]$ sudo netstat -nutpl | grep 6010 
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      9772/sshd: akira@pt 

★Xアプリを起動して見る
[akira@pipi ~]$ leafpad 
Xlib:  extension "RANDR" missing on display "localhost:10.0".
Gtk-Message: Failed to load module "canberra-gtk-module"
leafpad: can't save config file - /home/akira/.config/leafpad/leafpadrc
</pre>

<p>
サーバ側X11フォワードが有効でない、クライアントにて <code>ssh -X localhost</code> でX11のunixソケッ
トをTCPの6010ポートに変換する。クライアントからサーバへ接続時にローカルの6010ポートを
サーバ側にフォワードする方式もあります。この場合、サーバ側の <code>DISPLAY</code> 環境変数と
<code>~/.Xauthority</code> の認証クッキーの追加を手動で行う必要があります。
</p>

<p>
以下はその接続イメージです。
</p>
<pre class="example">
┏━━━━━━━━━━━━━━┓    ┏━━━━━━━━━━━━━━┓
┃    クライアント（Xサーバ） ┃    ┃     サーバ(Xアプリ)        ┃
┃ Unixソケット               ┃    ┃                            ┃
┃ /tmp/.X11-unix/X0          ┃    ┃        /tmp/.X11-unix/X10  ┃
┃     ↓                     ┃    ┃                ↑          ┃
┃  tcp:6010 &lt;-------&gt; ssh    ┣━━┫ sshd &lt;---&gt; localhost:6010  ┃
┗━━━━━━━━━━━━━━┛    ┗━━━━━━━━━━━━━━┛
</pre>

<p>
設定作業と接続手順
</p>
<ul class="org-ul">
<li>ローカルののSSHにX11フォワードを許可するようにする。
</li>
<li>クライアントにて <code>ssh -X localhost</code> で接続する。
</li>
<li><code>ssh -R 6010</code> でサーバへ接続する
</li>
<li>サーバ側の <code>DISPLAY</code> 環境変数を設定する
</li>
<li>サーバ側の <code>~/.Xauthority</code> 認証クッキーを追加する
</li>
</ul>

<pre class="example">
■クライアント側
------------------------------------------------------------
★クライアント側のssh設定の確認
[akira@mimi-air ~]$ cat /etc/ssh/sshd_config | grep X11Forwarding
X11Forwarding yes

★X11のUnixソケットをTCPへ変換する
[akira@mimi-air ~]$ ssh -X localhost
Last login: Sat Jun 21 13:10:45 2014 from localhost.localdomain

[akira@mimi-air ~]$ sudo netstat -nutpl | grep 6010
[sudo] password for akira: 
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      18706/sshd: akira@p 
tcp6       0      0 ::1:6010                :::*                    LISTEN      18706/sshd: akira@p 

★sshポートフォワーディングしてサーバへ接続する
[akira@mimi-air ~]$ ssh -R 6010:localhost:6010 pipi
Last login: Sun Jun 22 09:52:34 2014 from 192.168.100.13

■サーバ側
------------------------------------------------------------
★ポートフォワーディング有効であることを確認する
[akira@pipi ~]$ sudo netstat -nutpl | grep 6010
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      11106/sshd: akira@p 

★DISPLAY環境変数の指定
[akira@pipi ~]$ export DISPLAY=localhost:10.0

★Xアプリ起動失敗：X認証失敗が原因です
[akira@pipi ~]$ leafpad 
leafpad: Cannot open display: 

■クライアント側
------------------------------------------------------------
[akira@mimi-air ~]$ X11 connection rejected because of wrong authentication.

★X認証用クッキーを確認する
[akira@mimi-air ~]$ xauth list
mimi-air/unix:10  MIT-MAGIC-COOKIE-1  47ed008f47dc3eae07294ee49b26fb35
[akira@mimi-air ~]$ 

■サーバ側
------------------------------------------------------------
★既存のサーバサイトのX認証クッキーを削除する
[akira@pipi ~]$ xauth list
pipi/unix:10  MIT-MAGIC-COOKIE-1  75af091faa9e151987efb8fb46c5e2d3
[akira@pipi ~]$ xauth remove unix:10

★クライアント側登録されたX認証クッキーをサーバ側にも登録する
[akira@pipi ~]$ xauth add unix:10 MIT-MAGIC-COOKIE-1  47ed008f47dc3eae07294ee49b26fb35

★Xアプリ起動成功
[akira@pipi ~]$ leafpad 
Xlib:  extension "RANDR" missing on display "localhost:10.0".
Gtk-Message: Failed to load module "canberra-gtk-module"
leafpad: can't save config file - /home/akira/.config/leafpad/leafpadrc
[akira@pipi ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">VNC方式</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/Vncserver_%2528%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%2529">Archlinux Wiki: Vncserver (日本語)</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">ローカルで異なるユーザでXアプリの起動</h2>
<div class="outline-text-2" id="text-5">
<p>
以下のようにコンソールからローカルの環境の別ユーザでXアプリを起動しようとするとエラー
になります。
</p>

<pre class="example">
★sudo -u で試す
[akira@mimi-air ~]$ sudo -u milan leafpad 
[sudo] password for akira: 
No protocol specified
leafpad: ディスプレイをオープンできません: 

★suでユーザ切り替えたから試す
[akira@mimi-air ~]$ su - milan
パスワード:
[milan@mimi-air ~]$ leafpad 
leafpad: ディスプレイをオープンできません: 
[milan@mimi-air ~]$
</pre>

<p>
次の手順で設定すれば、普通に起動出来ます。
</p>
<ul class="org-ul">
<li><code>DISPLAY</code> 環境変数の指定
</li>
<li><code>xauth</code> でX認証クッキーの登録
</li>
</ul>

<pre class="example">
[akira@mimi-air ~]$ su - milan
パスワード:
[milan@mimi-air ~]$ export DISPLAY=:0
[milan@mimi-air ~]$ xauth list
[milan@mimi-air ~]$ xauth add unix:0 MIT-MAGIC-COOKIE-1  75de7d9075e9582838e38aad909df062
[milan@mimi-air ~]$ leafpad 
[milan@mimi-air ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">参考サイト</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><a href="http://vega.sra-tohoku.co.jp/~kabe/vsd/ssh-x.html">最近の豪華なX11環境でsshを使ってＸプロトコルを中継する</a>
</li>
<li><a href="http://www.ibm.com/developerworks/jp/linux/tutorials/l-basics/">Linux ビギナーのための基本タスク</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[検証]ADF印刷プレビュー機能]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-18-%5B%E6%A4%9C%E8%A8%BC%5Dadf%E5%8D%B0%E5%88%B7%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC.html"/>
    <updated>2014-06-18T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]adf印刷プレビュー</id>
    <content type="html"><![CDATA[<p>
Oracle ADFの印刷機能にたずさわる機会がありましたので、一部調査した内容を
ここでメモしておきます。サンプルコードは <a href="https://github.com/luozengbin/ADFSamples/tree/master/PrintPreview">Github</a> に登録しています。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">検証内容</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><code>af:showPrintablePageBehavior</code> タグの使い方
</li>
<li>印刷内容の制御
</li>
<li>IE印刷プレビュー画面を出す
</li>
</ol>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">af:showPrintablePageBehaviorタグの使い方</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>af:showPrintablePageBehavior</code> タグを画面に任意のcommandコンポネントの子コンポネント
として入れれば、そのcommandコンポネントがトリガーされると印刷プレビュー画面が新規ブラ
ウザ画面にて表示される。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">印刷内容の制御</h2>
<div class="outline-text-2" id="text-3">
<p>
基本的に全画面(同じjspx)の内容が印刷プレビュー画面に表示される。一部コンポネント
(例： <code>af:menuBar</code> ) は表示しない仕様となっている。またレイアウトコンテナに
<code>af:panelSplitter</code> や <code>af:panelAccordion</code> が使用された場合、アクティビティとなってい
るレイアウトアイテムしかが印刷画面に表示しない。 <code>af:showPrintablePageBehavior</code> タグ
の配置場所にもよります。
</p>

<p>
また、 <code>f:view</code> タグの <code>beforePhase</code> リスナーにて印刷プレビュー画面に表示する内容を
カスタマイズ(非表示制御)することができる。
</p>

<p>
サンプル <code>DataView.jspx</code> の定義
</p>

<p>
<div><script src='https://gist.github.com/0094c8013bc3eed1c962.js'></script>
<noscript><pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;jsp:root xmlns:jsp=&quot;http://java.sun.com/JSP/Page&quot; version=&quot;2.1&quot;
          xmlns:f=&quot;http://java.sun.com/jsf/core&quot;
          xmlns:h=&quot;http://java.sun.com/jsf/html&quot;
          xmlns:af=&quot;http://xmlns.oracle.com/adf/faces/rich&quot;&gt;
  &lt;jsp:directive.page contentType=&quot;text/html;charset=UTF-8&quot;/&gt;

  &lt;!--★beforePhaseリスナーの登録  --&gt;
  &lt;f:view beforePhase=&quot;#{pageFlowScope.DataViewBean.beforePhaseMethod}&quot;&gt;
    &lt;af:document id=&quot;d1&quot;&gt;
      &lt;af:form id=&quot;f1&quot;&gt;
        &lt;af:resource type=&quot;javascript&quot; source=&quot;/js/CustomPrint.js&quot;/&gt;
        &lt;af:panelStretchLayout id=&quot;psl1&quot;&gt;
          &lt;f:facet name=&quot;bottom&quot;&gt;
            &lt;af:panelGroupLayout layout=&quot;scroll&quot;
                                 xmlns:af=&quot;http://xmlns.oracle.com/adf/faces/rich&quot;
                                 id=&quot;pgl2&quot;&gt;
              &lt;af:panelGroupLayout id=&quot;pgl3&quot;&gt;
                &lt;!--  ★印刷ボタンの定義 --&gt;
                &lt;af:commandButton text=&quot;印刷&quot; id=&quot;cb1&quot;
                                  inlineStyle=&quot;font-size:large;&quot;&gt;
                  &lt;af:showPrintablePageBehavior/&gt;
                &lt;/af:commandButton&gt;
              &lt;/af:panelGroupLayout&gt;
            &lt;/af:panelGroupLayout&gt;
          &lt;/f:facet&gt;
          &lt;f:facet name=&quot;center&quot;&gt;
            &lt;af:table var=&quot;row&quot; rowBandingInterval=&quot;0&quot; id=&quot;t1&quot;
                      value=&quot;#{pageFlowScope.DataViewBean.dataList}&quot;&gt;
              &lt;af:column sortable=&quot;false&quot; headerText=&quot;列1&quot; id=&quot;c2&quot; width=&quot;200&quot;&gt;
                &lt;af:outputText value=&quot;#{row.col1}&quot; id=&quot;ot5&quot;/&gt;
              &lt;/af:column&gt;
              &lt;af:column sortable=&quot;false&quot; headerText=&quot;列2&quot; id=&quot;c5&quot; width=&quot;200&quot;&gt;
                &lt;af:outputText value=&quot;#{row.col2}&quot; id=&quot;ot1&quot;/&gt;
              &lt;/af:column&gt;
              &lt;af:column sortable=&quot;false&quot; headerText=&quot;列3&quot; id=&quot;c1&quot; width=&quot;200&quot;&gt;
                &lt;af:outputText value=&quot;#{row.col3}&quot; id=&quot;ot3&quot;/&gt;
              &lt;/af:column&gt;
              &lt;af:column sortable=&quot;false&quot; headerText=&quot;列4&quot; id=&quot;c3&quot; width=&quot;200&quot;&gt;
                &lt;af:outputText value=&quot;#{row.col4}&quot; id=&quot;ot2&quot;/&gt;
              &lt;/af:column&gt;
            &lt;/af:table&gt;
          &lt;/f:facet&gt;
          &lt;f:facet name=&quot;start&quot;/&gt;
          &lt;f:facet name=&quot;end&quot;/&gt;
          &lt;f:facet name=&quot;top&quot;&gt;
            &lt;af:panelGroupLayout id=&quot;pgl1&quot; layout=&quot;horizontal&quot;&gt;
              &lt;af:outputLabel value=&quot;印刷プレビューテスト&quot; id=&quot;ol1&quot; inlineStyle=&quot;font-size:xx-large;&quot;/&gt;

              &lt;!-- ★以降は印刷しないように --&gt;
              &lt;af:menuBar id=&quot;mb1&quot;&gt;
                &lt;af:menu text=&quot;menu 1&quot; id=&quot;m1&quot;/&gt;
                &lt;af:menu text=&quot;menu 2&quot; id=&quot;m2&quot;/&gt;
                &lt;af:menu text=&quot;menu 3&quot; id=&quot;m3&quot;/&gt;
              &lt;/af:menuBar&gt;
              &lt;af:inputText label=&quot;Label 1&quot; id=&quot;it1&quot;/&gt;
              &lt;af:inputText label=&quot;Label 2&quot; id=&quot;it2&quot;/&gt;
            &lt;/af:panelGroupLayout&gt;
          &lt;/f:facet&gt;
        &lt;/af:panelStretchLayout&gt;
      &lt;/af:form&gt;
    &lt;/af:document&gt;
  &lt;/f:view&gt;
&lt;/jsp:root&gt;</code></pre></noscript></div>

</p>

<p>
サンプル <code>beforePhase</code> リスナー
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #729fcf; font-weight: bold;">public</span> <span style="color: #8ae234; font-weight: bold;">void</span> <span style="color: #edd400; font-weight: bold;">beforePhaseMethod</span>(<span style="color: #8ae234; font-weight: bold;">PhaseEvent</span> <span style="color: #ff6347;">phaseEvent</span>) {

    System.out.println(<span style="color: #ad7fa8; font-style: italic;">"----------   phaseEvent   -------------"</span>);
    System.out.println(<span style="color: #ad7fa8; font-style: italic;">"phaseEvent.getPhaseId():"</span> + phaseEvent.getPhaseId());

    <span style="color: #888a85;">//</span><span style="color: #888a85;">only perform action if RENDER_RESPONSE phase is reached</span>
    <span style="color: #729fcf; font-weight: bold;">if</span> (phaseEvent.getPhaseId() == <span style="color: #8ae234;">PhaseId</span>.RENDER_RESPONSE) {

        <span style="color: #8ae234; font-weight: bold;">FacesContext</span> <span style="color: #ff6347;">fctx</span> = FacesContext.getCurrentInstance();
        <span style="color: #888a85;">//</span><span style="color: #888a85;">check internal request parameter</span>
        <span style="color: #8ae234; font-weight: bold;">Map</span> <span style="color: #ff6347;">requestMap</span> = fctx.getExternalContext().getRequestMap();

        <span style="color: #888a85;">// </span><span style="color: #888a85;">&#12522;&#12463;&#12456;&#12473;&#12488;&#12467;&#12531;&#12486;&#12461;&#12473;&#12488;&#12395;&#21360;&#21047;&#12425;&#12375;&#12365;&#12461;&#12540;&#12434;&#29305;&#23450;</span>
        <span style="color: #8ae234; font-weight: bold;">Object</span> <span style="color: #ff6347;">showPrintableBehavior</span> = requestMap.get(<span style="color: #ad7fa8; font-style: italic;">"oracle.adfinternal.view.faces.el.PrintablePage"</span>);
        <span style="color: #729fcf; font-weight: bold;">if</span> (showPrintableBehavior != <span style="color: #8ae234;">null</span>) {
            <span style="color: #888a85;">// </span><span style="color: #888a85;">&#21360;&#21047;&#30011;&#38754;&#12398;&#12459;&#12473;&#12479;&#12510;&#12452;&#12474;</span>
            <span style="color: #729fcf; font-weight: bold;">if</span> (<span style="color: #8ae234;">Boolean</span>.TRUE == showPrintableBehavior) {
                <span style="color: #888a85;">// </span><span style="color: #888a85;">&#12467;&#12531;&#12509;&#12493;&#12531;&#12488;ID&#12434;&#29992;&#12356;&#12390;&#38560;&#12377;&#20966;&#29702;&#12434;&#23455;&#26045;&#12377;&#12427;</span>
                UiComponentControlUtil.setUnRendered(<span style="color: #ad7fa8; font-style: italic;">"mb1"</span>, <span style="color: #ad7fa8; font-style: italic;">"it1"</span>, <span style="color: #ad7fa8; font-style: italic;">"it2"</span>);
                UiComponentControlUtil.callbackJavascript(<span style="color: #ad7fa8; font-style: italic;">"customPrint();"</span>);
            }
        }
    }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">IE印刷プレビュー画面を出す</h2>
<div class="outline-text-2" id="text-4">
<p>
いい方法が見つからない、とりあえずWebBrowserというIEに含まれたActiveXコンポーネントを
利用します。
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #729fcf; font-weight: bold;">function</span> <span style="color: #edd400; font-weight: bold;">customPrint</span>() {
  <span style="color: #729fcf; font-weight: bold;">if</span> (getBrowser().indexOf(<span style="color: #ad7fa8; font-style: italic;">'ie8'</span>) !== -1 ) {
    <span style="color: #729fcf; font-weight: bold;">if</span>(window.ActiveXObject == <span style="color: #8ae234;">null</span> || document.body.insertAdjacentHTML == <span style="color: #8ae234;">null</span>) {
      <span style="color: #729fcf; font-weight: bold;">return</span>;
    }
    <span style="color: #729fcf; font-weight: bold;">var</span> <span style="color: #ff6347;">sWebBrowserCode</span> = <span style="color: #ad7fa8; font-style: italic;">'&lt;object width="0" height="0" classid="CLSID:8856F961-340A-11D0-A96B-00C04FD705A2"&gt;&lt;/object&gt;'</span>;
    document.body.insertAdjacentHTML(<span style="color: #ad7fa8; font-style: italic;">'beforeEnd'</span>, sWebBrowserCode);
    <span style="color: #729fcf; font-weight: bold;">var</span> <span style="color: #ff6347;">objWebBrowser</span> = document.body.lastChild;
    <span style="color: #729fcf; font-weight: bold;">if</span>(objWebBrowser == <span style="color: #8ae234;">null</span>) <span style="color: #729fcf; font-weight: bold;">return</span>;
    objWebBrowser.ExecWB(7, 1);
    document.body.removeChild(objWebBrowser);
  } <span style="color: #729fcf; font-weight: bold;">else</span> {
    window.print();
  }

  <span style="color: #888a85;">// </span><span style="color: #888a85;">&#21360;&#21047;&#12503;&#12524;&#12499;&#12517;&#12540;&#30011;&#38754;&#38281;&#12376;&#12427;&#8594;HTML&#30011;&#38754;&#12434;&#38281;&#12376;&#12427;</span>
  window.onfocus = <span style="color: #729fcf; font-weight: bold;">function</span>(){
   (window.open(<span style="color: #ad7fa8; font-style: italic;">''</span>,<span style="color: #ad7fa8; font-style: italic;">'_self'</span>).opener=window).close(); 
  };
}
</pre>
</div>

<p>
ブラウザのセキュリティ設定に注意が必要です。
</p>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">参考</h2>
<div class="outline-text-2" id="text-5">
<p>
Oracle Fusion Middleware Tag Reference for Oracle ADF Faces 11g Release 1 (11.1.1.5.0)
<a href="http://docs.oracle.com/cd/E21764_01/apirefs.1111/e12419/tagdoc/af_showPrintablePageBehavior.html">http://docs.oracle.com/cd/E21764_01/apirefs.1111/e12419/tagdoc/af_showPrintablePageBehavior.html</a>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[検証]firewalldを遊んでみた]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-16-%5B%E6%A4%9C%E8%A8%BC%5Dfirewalld%E3%82%92%E9%81%8A%E3%82%93%E3%81%A7%E3%81%BF%E3%81%9F.html"/>
    <updated>2014-06-16T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]firewalldを遊んでみた</id>
    <content type="html"><![CDATA[<p>
自宅の <code>Raspberry Pi</code> にfirewalldを入れて遊んで見ました。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">firewalld情報収集から始まる</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>iptablesが土台となります、firewalldの設定はipatbles設定へ変換される
</li>
<li>D-BUSのAPI経由でアプリケーションから制御が可能
</li>
<li>受送信ルールはゾーンファイルにて定義する
</li>
<li>受送信サービスタイプ（サービス名＋ポートより識別する）による通信制限が可能
</li>
<li>受送信ICMPタイプによる通信制限が可能
</li>
<li>通信元のIPサブネットによる通信制限が可能
</li>
<li>NICポートごとにゾーンファイルを適用することが可能
（複数同時適用可能かは未検証）
</li>
</ul>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">検証環境</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Archlinux : <a href="https://www.archlinux.org/">https://www.archlinux.org/</a>
</li>
<li>firewalld-0.3.10-1 : <a href="https://www.archlinux.org/packages/community/any/firewalld/">https://www.archlinux.org/packages/community/any/firewalld/</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">firewalldのパッケージ構成</h2>
<div class="outline-text-2" id="text-3">
<pre class="example">
/etc/
/etc/conf.d/
/etc/conf.d/firewalld           ★firewalldサービス起動パラメータの定義
/etc/dbus-1/
/etc/dbus-1/system.d/
/etc/dbus-1/system.d/FirewallD.conf
/etc/firewalld/
/etc/firewalld/firewalld.conf
/etc/firewalld/icmptypes/      ★独自ICMPタイプの定義はここに追加
/etc/firewalld/lockdown-whitelist.xml
/etc/firewalld/services/       ★独自サービス定義はここに追加
/etc/firewalld/zones/          ★独自のゾーンファイルはここに追加
/etc/xdg/
/etc/xdg/autostart/
/etc/xdg/autostart/firewall-applet.desktop
/usr/
/usr/bin/
/usr/bin/firewall-applet       ★GUIツール
/usr/bin/firewall-cmd
/usr/bin/firewall-config
/usr/bin/firewall-offline-cmd
/usr/bin/firewalld
/usr/lib/
/usr/lib/firewalld/
/usr/lib/firewalld/icmptypes/  ★ICMPタイプの定義
/usr/lib/firewalld/icmptypes/destination-unreachable.xml
/usr/lib/firewalld/icmptypes/echo-reply.xml
/usr/lib/firewalld/icmptypes/echo-request.xml
/usr/lib/firewalld/icmptypes/parameter-problem.xml
/usr/lib/firewalld/icmptypes/redirect.xml
/usr/lib/firewalld/icmptypes/router-advertisement.xml
/usr/lib/firewalld/icmptypes/router-solicitation.xml
/usr/lib/firewalld/icmptypes/source-quench.xml
/usr/lib/firewalld/icmptypes/time-exceeded.xml
/usr/lib/firewalld/services/  ★サービス定義
/usr/lib/firewalld/services/amanda-client.xml
/usr/lib/firewalld/services/amanda-k5-client.xml
/usr/lib/firewalld/services/bacula-client.xml
/usr/lib/firewalld/services/bacula.xml
/usr/lib/firewalld/services/dhcp.xml
/usr/lib/firewalld/services/dhcpv6-client.xml
/usr/lib/firewalld/services/dhcpv6.xml
/usr/lib/firewalld/services/dns.xml
/usr/lib/firewalld/services/freeipa-ldap.xml
/usr/lib/firewalld/services/freeipa-ldaps.xml
/usr/lib/firewalld/services/freeipa-replication.xml
/usr/lib/firewalld/services/ftp.xml
/usr/lib/firewalld/services/high-availability.xml
/usr/lib/firewalld/services/http.xml
/usr/lib/firewalld/services/https.xml
/usr/lib/firewalld/services/imaps.xml
/usr/lib/firewalld/services/ipp-client.xml
/usr/lib/firewalld/services/ipp.xml
/usr/lib/firewalld/services/ipsec.xml
/usr/lib/firewalld/services/kerberos.xml
/usr/lib/firewalld/services/kpasswd.xml
/usr/lib/firewalld/services/ldap.xml
/usr/lib/firewalld/services/ldaps.xml
/usr/lib/firewalld/services/libvirt-tls.xml
/usr/lib/firewalld/services/libvirt.xml
/usr/lib/firewalld/services/mdns.xml
/usr/lib/firewalld/services/mountd.xml
/usr/lib/firewalld/services/ms-wbt.xml
/usr/lib/firewalld/services/mysql.xml
/usr/lib/firewalld/services/nfs.xml
/usr/lib/firewalld/services/ntp.xml
/usr/lib/firewalld/services/openvpn.xml
/usr/lib/firewalld/services/pmcd.xml
/usr/lib/firewalld/services/pmproxy.xml
/usr/lib/firewalld/services/pmwebapi.xml
/usr/lib/firewalld/services/pmwebapis.xml
/usr/lib/firewalld/services/pop3s.xml
/usr/lib/firewalld/services/postgresql.xml
/usr/lib/firewalld/services/privoxy.xml
/usr/lib/firewalld/services/proxy-dhcp.xml
/usr/lib/firewalld/services/puppetmaster.xml
/usr/lib/firewalld/services/radius.xml
/usr/lib/firewalld/services/rpc-bind.xml
/usr/lib/firewalld/services/samba-client.xml
/usr/lib/firewalld/services/samba.xml
/usr/lib/firewalld/services/sane.xml
/usr/lib/firewalld/services/smtp.xml
/usr/lib/firewalld/services/ssh.xml
/usr/lib/firewalld/services/synergy.xml
/usr/lib/firewalld/services/telnet.xml
/usr/lib/firewalld/services/tftp-client.xml
/usr/lib/firewalld/services/tftp.xml
/usr/lib/firewalld/services/tor-socks.xml
/usr/lib/firewalld/services/transmission-client.xml
/usr/lib/firewalld/services/vnc-server.xml
/usr/lib/firewalld/services/wbem-https.xml
/usr/lib/firewalld/services/xmpp-bosh.xml
/usr/lib/firewalld/services/xmpp-client.xml
/usr/lib/firewalld/services/xmpp-local.xml
/usr/lib/firewalld/services/xmpp-server.xml
/usr/lib/firewalld/zones/                          ★デフォルトで用意されたゾーンの定義ファイル
/usr/lib/firewalld/zones/block.xml
/usr/lib/firewalld/zones/dmz.xml
/usr/lib/firewalld/zones/drop.xml
/usr/lib/firewalld/zones/external.xml
/usr/lib/firewalld/zones/home.xml
/usr/lib/firewalld/zones/internal.xml
/usr/lib/firewalld/zones/public.xml                ★デフォルトはこちらのゾーンが適用される
/usr/lib/firewalld/zones/trusted.xml
/usr/lib/firewalld/zones/work.xml
/usr/lib/python3.4/
/usr/lib/python3.4/site-packages/
/usr/lib/python3.4/site-packages/firewall/
/usr/lib/python3.4/site-packages/firewall/__init__.py
/usr/lib/python3.4/site-packages/firewall/client.py
/usr/lib/python3.4/site-packages/firewall/config/
/usr/lib/python3.4/site-packages/firewall/config/__init__.py
/usr/lib/python3.4/site-packages/firewall/config/dbus.py
/usr/lib/python3.4/site-packages/firewall/core/
/usr/lib/python3.4/site-packages/firewall/core/__init__.py
/usr/lib/python3.4/site-packages/firewall/core/base.py
/usr/lib/python3.4/site-packages/firewall/core/ebtables.py
/usr/lib/python3.4/site-packages/firewall/core/fw.py
/usr/lib/python3.4/site-packages/firewall/core/fw_config.py
/usr/lib/python3.4/site-packages/firewall/core/fw_direct.py
/usr/lib/python3.4/site-packages/firewall/core/fw_icmptype.py
/usr/lib/python3.4/site-packages/firewall/core/fw_policies.py
/usr/lib/python3.4/site-packages/firewall/core/fw_service.py
/usr/lib/python3.4/site-packages/firewall/core/fw_test.py
/usr/lib/python3.4/site-packages/firewall/core/fw_zone.py
/usr/lib/python3.4/site-packages/firewall/core/io/
/usr/lib/python3.4/site-packages/firewall/core/io/__init__.py
/usr/lib/python3.4/site-packages/firewall/core/io/direct.py
/usr/lib/python3.4/site-packages/firewall/core/io/firewalld_conf.py
/usr/lib/python3.4/site-packages/firewall/core/io/icmptype.py
/usr/lib/python3.4/site-packages/firewall/core/io/io_object.py
/usr/lib/python3.4/site-packages/firewall/core/io/lockdown_whitelist.py
/usr/lib/python3.4/site-packages/firewall/core/io/service.py
/usr/lib/python3.4/site-packages/firewall/core/io/zone.py
/usr/lib/python3.4/site-packages/firewall/core/ipXtables.py
/usr/lib/python3.4/site-packages/firewall/core/logger.py
/usr/lib/python3.4/site-packages/firewall/core/modules.py
/usr/lib/python3.4/site-packages/firewall/core/prog.py
/usr/lib/python3.4/site-packages/firewall/core/rich.py
/usr/lib/python3.4/site-packages/firewall/core/watcher.py
/usr/lib/python3.4/site-packages/firewall/dbus_utils.py
/usr/lib/python3.4/site-packages/firewall/errors.py
/usr/lib/python3.4/site-packages/firewall/functions.py
/usr/lib/python3.4/site-packages/firewall/fw_types.py
/usr/lib/python3.4/site-packages/firewall/server/
/usr/lib/python3.4/site-packages/firewall/server/__init__.py
/usr/lib/python3.4/site-packages/firewall/server/config.py
/usr/lib/python3.4/site-packages/firewall/server/config_icmptype.py
/usr/lib/python3.4/site-packages/firewall/server/config_service.py
/usr/lib/python3.4/site-packages/firewall/server/config_zone.py
/usr/lib/python3.4/site-packages/firewall/server/decorators.py
/usr/lib/python3.4/site-packages/firewall/server/firewalld.py
/usr/lib/python3.4/site-packages/firewall/server/server.py
/usr/lib/systemd/
/usr/lib/systemd/system/
/usr/lib/systemd/system/firewalld.service     ★systemdサービス定義ファイル
/usr/share/
/usr/share/appdata/
/usr/share/appdata/firewall-config.appdata.xml
/usr/share/applications/
/usr/share/applications/firewall-config.desktop
/usr/share/bash-completion/
/usr/share/bash-completion/completions/
/usr/share/bash-completion/completions/firewall-cmd
/usr/share/firewalld/
/usr/share/firewalld/firewall-config.glade
/usr/share/firewalld/gtk3_chooserbutton.py
/usr/share/glib-2.0/
/usr/share/glib-2.0/schemas/
/usr/share/glib-2.0/schemas/org.fedoraproject.FirewallApplet.gschema.xml
/usr/share/glib-2.0/schemas/org.fedoraproject.FirewallConfig.gschema.xml
/usr/share/icons/(★iconディレクトリ配下は省略)
/usr/share/locale/(★localeディレクトリ配下は省略)
/usr/share/man/
/usr/share/man/man1/
/usr/share/man/man1/firewall-applet.1.gz
/usr/share/man/man1/firewall-cmd.1.gz
/usr/share/man/man1/firewall-config.1.gz
/usr/share/man/man1/firewall-offline-cmd.1.gz
/usr/share/man/man1/firewalld.1.gz
/usr/share/man/man5/
/usr/share/man/man5/firewalld.conf.5.gz
/usr/share/man/man5/firewalld.dbus.5.gz
/usr/share/man/man5/firewalld.direct.5.gz
/usr/share/man/man5/firewalld.icmptype.5.gz
/usr/share/man/man5/firewalld.lockdown-whitelist.5.gz
/usr/share/man/man5/firewalld.richlanguage.5.gz
/usr/share/man/man5/firewalld.service.5.gz
/usr/share/man/man5/firewalld.zone.5.gz
/usr/share/man/man5/firewalld.zones.5.gz
/usr/share/polkit-1/
/usr/share/polkit-1/actions/
/usr/share/polkit-1/actions/org.fedoraproject.FirewallD1.desktop.policy
/usr/share/polkit-1/actions/org.fedoraproject.FirewallD1.policy
/usr/share/polkit-1/actions/org.fedoraproject.FirewallD1.server.policy
</pre>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">定義ファイルの見本</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">publicゾーン定義ファイル</h3>
<div class="outline-text-3" id="text-4-1">
<pre class="example">
[akira@pipi ~]$ cat /usr/lib/firewalld/zones/public.xml 
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;zone&gt;
  &lt;short&gt;Public&lt;/short&gt;
  &lt;description&gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;
  &lt;service name="ssh"/&gt;
  &lt;service name="dhcpv6-client"/&gt;
&lt;/zone&gt;
[akira@pipi ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">SSHサービス定義ファイル</h3>
<div class="outline-text-3" id="text-4-2">
<p>
プロトコール名とポート番号で識別する。
</p>
<pre class="example">
[akira@pipi ~]$ cat /usr/lib/firewalld/services/ssh.xml 
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;service&gt;
  &lt;short&gt;SSH&lt;/short&gt;
  &lt;description&gt;Secure Shell (SSH) is a protocol for logging into and executing commands on remote machines. It provides secure encrypted communications. If you plan on accessing your machine remotely via SSH over a firewalled interface, enable this option. You need the openssh-server package installed for this option to be useful.&lt;/description&gt;
  &lt;port protocol="tcp" port="22"/&gt;
&lt;/service&gt;
[akira@pipi ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">ICMPタイプ定義ファイル</h3>
<div class="outline-text-3" id="text-4-3">
<p>
shortタグのICMPタイプ名で識別する。使用可能なタイプ名は <code>iptables -p icmp -h</code> で確認
できる。
</p>
<pre class="example">
[akira@pipi ~]$ cat /usr/lib/firewalld/icmptypes/destination-unreachable.xml 
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;icmptype&gt;
  &lt;short&gt;Destination Unreachable&lt;/short&gt;
  &lt;description&gt;This error message is generated by a host or gateway if the destination is not reachable.&lt;/description&gt;
&lt;/icmptype&gt;

★使用可能なICMPタイプ名の確認
[akira@pipi ~]$ iptables -p icmp -h
--省略--
Valid ICMP Types:
any
echo-reply (pong)
destination-unreachable
   network-unreachable
   host-unreachable
   protocol-unreachable
   port-unreachable
   fragmentation-needed
   source-route-failed
   network-unknown
   host-unknown
   network-prohibited
   host-prohibited
   TOS-network-unreachable
   TOS-host-unreachable
   communication-prohibited
   host-precedence-violation
   precedence-cutoff
source-quench
redirect
   network-redirect
   host-redirect
   TOS-network-redirect
   TOS-host-redirect
echo-request (ping)
router-advertisement
router-solicitation
time-exceeded (ttl-exceeded)
   ttl-zero-during-transit
   ttl-zero-during-reassembly
parameter-problem
   ip-header-bad
   required-option-missing
timestamp-request
timestamp-reply
address-mask-request
address-mask-reply
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">firewalldコマンドインタフェース</h2>
<div class="outline-text-2" id="text-5">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">firewall-cmd</td>
<td class="left">&#x2013;reload</td>
<td class="left">定義の変更を反映する</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;complete-reload</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;state</td>
<td class="left">ステータスの確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-all-zones</td>
<td class="left">ゾーン設定の確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;get-services</td>
<td class="left">定義済みサービス一覧の取得</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;get-icmptypes</td>
<td class="left">定義済みICMP応答一覧の取得</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;get-default-zone</td>
<td class="left">デフォルトゾーンの確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;set-default-zone=&lt;ゾーン名&gt;</td>
<td class="left">デフォルトゾーンの変更</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-interface=&lt;nic名&gt;</td>
<td class="left">対象nicの適用ゾーンを除去</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★サービスの許可設定</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-services &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">対象ゾーンに許可されたサービス</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-service=&lt;サービス名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">指定のサービスが許可されているか確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-service=&lt;サービス名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">許可するサービスを追加</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-service=&lt;サービス名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">許可するサービスを削除</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★ICMPタイプの拒否設定</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-icmp-blocks &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">禁止されているICMPタイプを表示</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-icmp-block=&lt;ICMPタイプ名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">ICMPタイプが禁止されているか確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-icmp-block=&lt;ICMPタイプ名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">拒否するICMPタイプの追加</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-icmp-block=&lt;ICMPタイプ名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">拒否するICMPタイプの除外</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★IPマスカレードのOn/Off設定</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-masquerade &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">現在の設定を確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-masquerade &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">IPマスカレードを有効化</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-masquerade &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">IPマスカレードを無効化</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★nicに適用する</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-interface=&lt;nic名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">対象nicにゾーンを適用</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-interface=eth1</td>
<td class="left">適用ゾーンを除去</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-interfaces &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">ゾーンが適用されるNICポートを表示</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;change-interface=&lt;nic名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">nicに適用するゾーンを変更する</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-interface=interface=h1</td>
<td class="left">nicに対象ゾーンが適用されたかの確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★通信元のIPサブネットによる通信制限</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-sources &#x2013;zone=&lt;ゾーン&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;get-zone-of-source=&lt;サブネット&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-source=&lt;サブネット&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-source=&lt;サブネット&gt; &#x2013;zone=&lt;ゾーン&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;change-source=&lt;サブネット&gt; &#x2013;zone=&lt;ゾーン&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-source=&lt;サブネット&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★システム保守時役立つコマンド</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;panic-on</td>
<td class="left">すべてのネットワーク通信が遮断する</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;panic-off</td>
<td class="left">パニックモードを止める</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">インストールとサービスの有効化</h2>
<div class="outline-text-2" id="text-6">
<p>
<code>pacman</code> コマンドでインストール
</p>
<pre class="example">
[akira@pipi ~]$ sudo pacman -S firewalld 
依存関係を解決しています...
相互衝突をチェックしています...

パッケージ (1): firewalld-0.3.10-1

Total Installed Size:   2.64 MiB

:: インストールを行いますか？ [Y/n] 
(1/1) キーリングのキーを確認                                                                                                 [############################################################################] 100%
(1/1) パッケージの整合性をチェック                                                                                           [############################################################################] 100%
(1/1) パッケージファイルのロード                                                                                             [############################################################################] 100%
(1/1) ファイルの衝突をチェック                                                                                               [############################################################################] 100%
(1/1) 空き容量を確認                                                                                                         [############################################################################] 100%
(1/1) インストール firewalld                                                                                                 [############################################################################] 100%
[akira@pipi ~]$
</pre>

<p>
<code>systemctl</code> コマンドでサービスの有効化、起動
</p>
<pre class="example">
★サービスの有効化
[akira@pipi ~]$ sudo systemctl enable firewalld.service
[sudo] password for akira: 
ln -s '/usr/lib/systemd/system/firewalld.service' '/etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service'
ln -s '/usr/lib/systemd/system/firewalld.service' '/etc/systemd/system/basic.target.wants/firewalld.service'

★サービスの起動
[akira@pipi ~]$ sudo systemctl start firewalld.service

★サービス起動時のログ
[akira@pipi ~]$ sudo tail -f /var/log/everything.log
Jun 16 10:15:29 pipi systemd[1]: Starting firewalld - dynamic firewall daemon...
Jun 16 10:15:29 pipi systemd[1]: Failed to reset devices.list on /system.slice: Invalid argument
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jun 16 10:15:31 pipi kernel: [ 6372.219681] nf_conntrack version 0.5.0 (16384 buckets, 65536 max)
Jun 16 10:15:31 pipi kernel: [ 6372.360695] ip6_tables: (C) 2000-2006 Netfilter Core Team
Jun 16 10:15:31 pipi kernel: [ 6372.486263] Ebtables v2.0 registered
Jun 16 10:15:31 pipi kernel: [ 6372.504222] Bridge firewalling registered
Jun 16 10:15:32 pipi systemd[1]: Started firewalld - dynamic firewall daemon.

★サービスステータスの確認
[akira@pipi ~]$ sudo systemctl status firewalld.service
● firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled)
   Active: active (running) since 月 2014-06-16 10:15:32 JST; 3min 22s ago
 Main PID: 8679 (firewalld)
   CGroup: /system.slice/firewalld.service
           └─8679 /usr/bin/python -Es /usr/bin/firewalld --nofork --nopid

 6月 16 10:15:32 pipi systemd[1]: Started firewalld - dynamic firewall daemon.
[akira@pipi ~]$ firewall-cmd --state
</pre>

<p>
<code>/usr/lib/systemd/system/firewalld.service</code> サービス起動ファイルの中身
</p>
<pre class="example">
[Unit]
Description=firewalld - dynamic firewall daemon
Before=network.target
Before=libvirtd.service
Before=NetworkManager.service
Conflicts=iptables.service ip6tables.service ebtables.service  ★iptables, ebtablesサービスとのコンフリクト定義

[Service]
EnvironmentFile=-/etc/conf.d/firewalld                         ★起動パラメータファイル
ExecStart=/usr/bin/firewalld --nofork --nopid $FIREWALLD_ARGS  ★起動コマンド
ExecReload=/bin/kill -HUP $MAINPID                             ★停止コマンド
# supress to log debug and error output also to /var/log/messages
StandardOutput=null
StandardError=null
Type=dbus
BusName=org.fedoraproject.FirewallD1

[Install]
WantedBy=basic.target
Alias=dbus-org.fedoraproject.FirewallD1.service
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">pingをブロックしてみた</h2>
<div class="outline-text-2" id="text-7">
<p>
<code>public</code> ゾーンデフォルト状態ではすべてのICMPタイプを許可する。ここではpingをブロック
するようにしてみた。
</p>
<pre class="example">
★echo-requestをブロックする
[akira@pipi ~]$ sudo firewall-cmd --add-icmp-block=echo-request --zone=public
success
★設定の確認
[akira@pipi ~]$ sudo firewall-cmd --list-icmp-blocks --zone=public
echo-request

★iptablesにて設定を確認する
[akira@pipi ~]$ sudo iptables-save
~~省略~~
-A IN_public_deny -p icmp -m icmp --icmp-type 8 -j REJECT --reject-with icmp-host-prohibited ★タイプコードが8のicmpパケットを拒否するようにする
COMMIT
# Completed on Mon Jun 16 11:13:17 2014
</pre>

<p>
windows端末から確認して見る、見事にブロックができた。
</p>
<pre class="example">
C:\Users\akira&gt;ping 192.168.100.4

192.168.100.4 に ping を送信しています 32 バイトのデータ:
192.168.100.4 からの応答: 宛先ホストに到達できません。
192.168.100.4 からの応答: 宛先ホストに到達できません。
192.168.100.4 からの応答: 宛先ホストに到達できません。
192.168.100.4 からの応答: 宛先ホストに到達できません。

192.168.100.4 の ping 統計:
    パケット数: 送信 = 4、受信 = 4、損失 = 0 (0% の損失)、

C:\Users\akira&gt;
</pre>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">sambaサービスを許可してみた</h2>
<div class="outline-text-2" id="text-8">
<pre class="example">
[akira@pipi ~]$ sudo firewall-cmd --add-service=samba --zone=public
success
[akira@pipi ~]$ sudo iptables-save
~~省略~~~
-A IN_public_allow -p udp -m udp --dport 137 -m conntrack --ctstate NEW -j ACCEPT
-A IN_public_allow -p udp -m udp --dport 138 -m conntrack --ctstate NEW -j ACCEPT
-A IN_public_allow -p tcp -m tcp --dport 139 -m conntrack --ctstate NEW -j ACCEPT
-A IN_public_allow -p tcp -m tcp --dport 445 -m conntrack --ctstate NEW -j ACCEPT
~~省略~~~
</pre>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">独自ルールで通信履歴をロギングしてみた</h2>
<div class="outline-text-2" id="text-9">
<p>
<code>Rich Language</code> を用いて、特定のクライアントからhttpサービスを利用時にロギングする。
</p>
<pre class="example">
★ルール追加
[akira@pipi ~]$ sudo firewall-cmd --add-rich-rule='rule family="ipv4" source address="192.168.100.3" port port="80" protocol="tcp" log prefix="http connection" level="info" accept' --zone=pipi
success

★iptablesの確認
[akira@pipi ~]$ sudo iptables-save
# Generated by iptables-save v1.4.21 on Mon Jun 16 13:54:04 2014
~~省略~~
-A IN_pipi_log -s 192.168.100.3/32 -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW -j LOG --log-prefix "http connection" --log-level 6
COMMIT

★Apacheサーバの起動
[akira@pipi ~]$ sudo systemctl start httpd

★ログ確認
[akira@pipi ~]$ sudo tail -f /var/log/everything.log
Jun 16 14:12:25 pipi systemd[1]: Starting Apache Web Server...
Jun 16 14:12:26 pipi systemd[1]: PID file /run/httpd/httpd.pid not readable (yet?) after start.
Jun 16 14:12:26 pipi systemd[1]: Started Apache Web Server.
Jun 16 14:13:00 pipi kernel: [ 2076.795011] http connectionIN=eth0 OUT= MAC=8c:89:a5:45:1d:ef:00:21:85:a9:65:7b:08:00 SRC=192.168.100.3 DST=192.168.100.4 LEN=52 TOS=0x00 PREC=0x00 TTL=128 ID=28405 DF PROTO=TCP SPT=53049 DPT=80 WINDOW=8192 RES=0x00 SYN URGP=0 
Jun 16 14:13:44 pipi kernel: [ 2120.509739] http connectionIN=eth0 OUT= MAC=8c:89:a5:45:1d:ef:00:21:85:a9:65:7b:08:00 SRC=192.168.100.3 DST=192.168.100.4 LEN=52 TOS=0x00 PREC=0x00 TTL=128 ID=28755 DF PROTO=TCP SPT=53059 DPT=80 WINDOW=8192 RES=0x00 SYN URGP=
</pre>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">独自のゾーンファイルにしてみた</h2>
<div class="outline-text-2" id="text-10">
<p>
<code>/etc/firewalld/zones/</code> 配下に独自のゾーンファイルを作成する。
</p>
<pre class="example">
[akira@pipi ~]$ sudo touch /etc/firewalld/zones/pipi.xml
[akira@pipi ~]$ cat /etc/firewalld/zones/pipi.xml
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;zone&gt;
  &lt;short&gt;Pipi&lt;/short&gt;
  &lt;description&gt;For use in pipi areas.&lt;/description&gt;
  &lt;service name="ssh"/&gt;
  &lt;service name="samba"/&gt;
  &lt;!-- &lt;service name="samba-client"/&gt; --&gt;
  &lt;service name="dhcpv6-client"/&gt;
&lt;/zone&gt;
[akira@pipi ~]$
</pre>

<p>
<code>/etc/firewalld/firewalld.conf</code> ファイルにDefaultZoneを独自ゾーン名(ファイル名)に変更える。
</p>
<pre class="example">
# firewalld config file

# default zone
# The default zone used if an empty zone string is used.
# Default: public
DefaultZone=pipi  ★ここです
~~省略~~
</pre>

<p>
サービスを再起動する
</p>
<pre class="example">
[akira@pipi ~]$ sudo systemctl stop firewalld   ★サービス停止
[akira@pipi ~]$ sudo iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[akira@pipi ~]$ sudo systemctl start firewalld  ★サービス起動
[akira@pipi ~]$ sudo iptables-save 
~~省略~~
-A IN_pipi -j IN_pipi_allow
-A IN_pipi_allow -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT
-A IN_pipi_allow -p udp -m udp --dport 137 -m conntrack --ctstate NEW -j ACCEPT
-A IN_pipi_allow -p udp -m udp --dport 138 -m conntrack --ctstate NEW -j ACCEPT
-A IN_pipi_allow -p tcp -m tcp --dport 139 -m conntrack --ctstate NEW -j ACCEPT
-A IN_pipi_allow -p tcp -m tcp --dport 445 -m conntrack --ctstate NEW -j ACCEPT
COMMIT
# Completed on Mon Jun 16 13:31:04 2014
[akira@pipi ~]$
</pre>

<p>
<code>firewall-cmd --permanent</code> を用いて、pingのブロック設定を永続化させる。
</p>
<pre class="example">
[akira@pipi ~]$ sudo firewall-cmd --permanent --zone=pipi --add-icmp-block=echo-request
success
[akira@pipi ~]$ sudo systemctl restart firewalld
★ icmp-blockタグが自動的にゾーン定義ファイルに反映される。
[akira@pipi ~]$ sudo cat /etc/firewalld/zones/pipi.xml
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;zone&gt;
  &lt;short&gt;Pipi&lt;/short&gt;
  &lt;description&gt;For use in pipi areas.&lt;/description&gt;
  &lt;service name="ssh"/&gt;
  &lt;service name="dhcpv6-client"/&gt;
  &lt;service name="samba"/&gt;
  &lt;icmp-block name="echo-request"/&gt;
&lt;/zone&gt;
[akira@pipi ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">NICポートにゾーンの適用</h2>
<div class="outline-text-2" id="text-11">
<p>
起動した状態で <code>--remove-interface</code> で適用ゾーンをクリアしようとすると
<code>UNKNOWN_INTERFACE</code> で怒られた。一度 <code>--add-interface</code> してから使えるようになる。
</p>
<pre class="example">
[akira@hakusai ~]$ sudo firewall-cmd --remove-interface=eth0
Error: UNKNOWN_INTERFACE: eth0
[akira@hakusai ~]$ sudo firewall-cmd --add-interface=eth0 --zone=home
success
[akira@hakusai ~]$ sudo firewall-cmd --remove-interface=eth0
</pre>
</div>
</div>

<div id="outline-container-sec-12" class="outline-2">
<h2 id="sec-12">GUIツールを使って見た</h2>
<div class="outline-text-2" id="text-12">
<p>
firewalldのGUIインタフェースツール <code>/usr/bin/firewall-applet</code> として提供されている。
<code>/etc/xdg/autostart/firewall-applet.desktop</code> がインストルされた場合、OSがGUIモードで
起動するとfirewall-appletが自動起動される。システムトレイにアイコンが表示される。
<img src="img/firewalld-applet-01.png" alt="firewalld-applet-01.png" />
</p>

<p>
ゾーン設定変種画面
<img src="img/firewalld-applet-02.png" alt="firewalld-applet-02.png" />
</p>
<p>
サービス定義画面
<img src="img/firewalld-applet-03.png" alt="firewalld-applet-03.png" />
</p>
</div>
</div>

<div id="outline-container-sec-13" class="outline-2">
<h2 id="sec-13">参考した資料</h2>
<div class="outline-text-2" id="text-13">
<p>
Linux女子部　firewalld徹底入門！
<a href="http://www.slideshare.net/enakai/firewalld-study-v10">http://www.slideshare.net/enakai/firewalld-study-v10</a>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]Otcopressコンテンツ投稿自動化]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-15-%5B%E3%83%A1%E3%83%A2%5Dotcopress%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E6%8A%95%E7%A8%BF%E8%87%AA%E5%8B%95%E5%8C%96.html"/>
    <updated>2014-06-15T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]otcopressコンテンツ投稿自動化</id>
    <content type="html"><![CDATA[<p>
emacsからblog投稿ツールいくつ試しました、最近以下のツール組み合わせで落ち着いた。
</p>
<ul class="org-ul">
<li>静的コンテンツ生成エンジン <code>Octopress</code> ： <a href="http://Octopress.org/">http://Octopress.org/</a>
</li>
<li>コンテンツ公開サービス <code>Github Page</code> : <a href="https://pages.github.com/">https://pages.github.com/</a>
</li>
<li>org-modesでOctopress記事を書く： <a href="https://github.com/yoshinari-nomura/org-Octopress">https://github.com/yoshinari-nomura/org-Octopress</a>
</li>
<li>自動化スクリプト
</li>
</ul>

<p>

</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Octopress + Github Page でブログ環境を構築する</h2>
<div class="outline-text-2" id="text-1">
<p>
同じ環境で複数Rubyバージョンを利用できるようにするためRbenvを導入する。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Rbenvのインストール</h3>
<div class="outline-text-3" id="text-1-1">
<pre class="example">
$ cd ~
$ git clone git://github.com/sstephenson/rbenv.git .rbenv
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$ source ~/.bashrc
</pre>

<p>
rbenvでインストール可能なバージョンリストを確認する。 <code>rbenv install -l</code>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> RbenvによるRubyバージョンの切り替え</h3>
<div class="outline-text-3" id="text-1-2">
<pre class="example">
$ rbenv install 1.9.3-p0
$ rbenv global 1.9.3-p0
$ rbenv rehash
$ rbenv global
$ ruby --version
</pre>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> Octopressのインストール</h3>
<div class="outline-text-3" id="text-1-3">
<p>
GithubからOctopressをダウンロードする
</p>
<pre class="example">
$ git clone git://github.com/imathis/Octopress.git Octopress
$ cd Octopress
$ ruby --version  # ruby バージョン確認
</pre>

<p>
必要なrubyライブラリをインストールする
</p>
<pre class="example">
$ gem install bundler
$ rbenv rehash
$ bundle install
</pre>

<p>
Octopressテーマの初期化
</p>
<pre class="example">
$ rake install
</pre>

<p>
octostrap3 Themeへ変更
</p>
<pre class="example">
$ cd Octopress
$ git clone https://github.com/kAworu/octostrap3 .themes/octostrap3
$ rake 'install[octostrap3]'
</pre>

<p>
静的コンテンツの生成
</p>
<pre class="example">
$ rake generate
</pre>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> Github Pageサイトの準備</h3>
<div class="outline-text-3" id="text-1-4">
<p>
ここでは省略します。
</p>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> OctopressコンテンツをGithub Pageにコミットする</h3>
<div class="outline-text-3" id="text-1-5">
<pre class="example">
$rake setup_github_pages    # githubリポジトリのurlを入力する
$rake generate
$rake deploy
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> emacsから記事を書く道具の整備</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>elpa</code> を通して、=org-mode= で記事を書くための <code>org-ocotpress</code> をインストールする。
org-ocotpressは MELPAに登録してあるので、 <code>M-x package-install org-ocotpress</code> で
インストールする。 <code>org-ocotpress</code> から記事を管理するため、emacsの設定とOcotpress
のpermalink設定を以下のように変える。
</p>

<p>
<code>octopress/_config.yml</code>
</p>
<pre class="example">
permalink: /blog/:year-:month-:day-:title.html
</pre>

<p>
<code>emacs設定</code>
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #729fcf; font-weight: bold;">require</span> '<span style="color: #8ae234;">org-octopress</span>)
(setq org-octopress-directory-top       (concat user-emacs-directory <span style="color: #ad7fa8; font-style: italic;">"blogs/octopress/source"</span>))
(setq org-octopress-directory-posts     (concat user-emacs-directory <span style="color: #ad7fa8; font-style: italic;">"blogs/octopress/source/_posts"</span>))
(setq org-octopress-directory-org-top   (concat user-emacs-directory <span style="color: #ad7fa8; font-style: italic;">"blogs/octopress/source"</span>))
(setq org-octopress-directory-org-posts (concat user-emacs-directory <span style="color: #ad7fa8; font-style: italic;">"blogs/octopress/source/blog"</span>))
(setq org-octopress-setup-file          (concat user-emacs-directory <span style="color: #ad7fa8; font-style: italic;">"blogs/octopress/setupfile.org"</span>))
</pre>
</div>

<p>
<code>blogs/octopress/setupfile.org</code>
</p>
<pre class="example">
#+OPTIONS: H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:nil -:t f:nil *:t &lt;:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: author:nil
#+OPTIONS: email:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil
#+MACRO: more @@html:&lt;!-- more --&gt;@@
#+MACRO: twitter [[http://twitter.com/$1][@$1]]
#+MACRO: github [[https://github.com/$1/$2][$2]]
#+PROPERTY: cache yes
#+STARTUP: odd
#+STARTUP: content
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 自動化スクリプト</h2>
<div class="outline-text-2" id="text-3">
<p>
コンテンツプレビュー自動化elispとshell script
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #729fcf; font-weight: bold;">defvar</span> <span style="color: #ff6347;">org-octopress-top</span>
  (concat user-emacs-directory <span style="color: #ad7fa8; font-style: italic;">"blogs/octopress/"</span>)
  <span style="color: #888a85;">"octopress&#12502;&#12525;&#12464;&#12486;&#12531;&#12503;&#12524;&#12540;&#12488;&#12487;&#12451;&#12524;&#12463;&#12488;&#12522;"</span>)

(<span style="color: #729fcf; font-weight: bold;">defun</span> <span style="color: #edd400; font-weight: bold;">org-octopress-preview</span> ()
  <span style="color: #888a85;">"preview octopress content by call external shell script."</span>
  (interactive)
  (message <span style="color: #ad7fa8; font-style: italic;">"preview octopress content ...."</span>)
  (<span style="color: #729fcf; font-weight: bold;">lexical-let*</span> ((default-directory org-octopress-top)
                 (preview-url <span style="color: #ad7fa8; font-style: italic;">"http://localhost:4000"</span>))
    (deferred:$
      (deferred:process-shell <span style="color: #ad7fa8; font-style: italic;">"blog_preview.sh"</span> org-octopress-top)
      (deferred:nextc it
        (<span style="color: #729fcf; font-weight: bold;">lambda</span> (x)
          (message <span style="color: #ad7fa8; font-style: italic;">"*** preview blog ***"</span>)
          (message x)
          (message <span style="color: #ad7fa8; font-style: italic;">"launch preview url %s"</span> preview-url)
          (browse-url preview-url))))))
</pre>
</div>

<p>
<code>blog_preview.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #888a85;">#</span><span style="color: #888a85;">!/bin/</span><span style="color: #729fcf; font-weight: bold;">sh</span>
<span style="color: #888a85;">## </span><span style="color: #888a85;">Usage: blog_preview.sh</span>
<span style="color: #888a85;">##</span>
<span style="color: #888a85;">## </span><span style="color: #888a85;">Options: $1 octopress&#12487;&#12451;&#12524;&#12463;&#12488;&#12522;&#12398;&#20301;&#32622;</span>
<span style="color: #888a85;">##</span>
<span style="color: #888a85;">## </span><span style="color: #888a85;">Comment: octopress&#37197;&#19979;&#12395;blog&#38745;&#30340;</span>
<span style="color: #888a85;">##          </span><span style="color: #888a85;">&#12467;&#12531;&#12486;&#12531;&#12484;&#12398;&#29983;&#25104;&#12392;&#12503;&#12524;&#12499;&#12517;&#12540;</span>
<span style="color: #888a85;">##################################################################### </span>

<span style="color: #ff6347;">RUBY_VER</span>=<span style="color: #ad7fa8; font-style: italic;">"1.9.3-p0"</span>
<span style="color: #ff6347;">OCTOPRESS_DIR</span>=$<span style="color: #ff6347;">1</span>

which rbenv
<span style="color: #729fcf; font-weight: bold;">if</span> [ $<span style="color: #ff6347;">?</span> = 0 ]; <span style="color: #729fcf; font-weight: bold;">then</span>
    <span style="color: #888a85;"># </span><span style="color: #888a85;">ruby &#12496;&#12540;&#12472;&#12519;&#12531;&#20999;&#12426;&#26367;&#12360;&#20966;&#29702;</span>
    rbenv global $<span style="color: #ff6347;">RUBY_VER</span>
    rbenv rehash
    <span style="color: #ff6347;">global_ver</span>=<span style="color: #fa8072;">`rbenv global`</span>
    <span style="color: #729fcf; font-weight: bold;">if</span> [ $<span style="color: #ff6347;">global_ver</span> = $<span style="color: #ff6347;">RUBY_VER</span> ]; <span style="color: #729fcf; font-weight: bold;">then</span>
        <span style="color: #888a85;"># </span><span style="color: #888a85;">blog&#12467;&#12531;&#12486;&#12531;&#12484;&#29983;&#25104;&#12392;&#12487;&#12503;&#12525;&#12452;</span>
        <span style="color: #729fcf;">echo</span> <span style="color: #ad7fa8; font-style: italic;">"run rake with `ruby --version`"</span>
        <span style="color: #729fcf;">pushd</span> $<span style="color: #ff6347;">OCTOPRESS_DIR</span>
        rake generate
        <span style="color: #729fcf; font-weight: bold;">if</span> [ -z <span style="color: #ad7fa8; font-style: italic;">"`netstat -nutl | grep 4000`"</span> ] ; <span style="color: #729fcf; font-weight: bold;">then</span>
            <span style="color: #729fcf;">echo</span> <span style="color: #ad7fa8; font-style: italic;">"&gt;&gt;&gt; Startup Preview"</span>
            rake preview &amp;
            sleep 2
        <span style="color: #729fcf; font-weight: bold;">fi</span>
        <span style="color: #729fcf;">popd</span>
    <span style="color: #729fcf; font-weight: bold;">fi</span>
<span style="color: #729fcf; font-weight: bold;">fi</span>
</pre>
</div>

<p>
コンテンツをgithubへ自動同期化elispとshell script
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #729fcf; font-weight: bold;">defun</span> <span style="color: #edd400; font-weight: bold;">org-octopress-deploy</span> ()
  <span style="color: #888a85;">"deploy octopress content to github page service."</span>
  (interactive)
  (message <span style="color: #ad7fa8; font-style: italic;">"deploy octopress content ...."</span>)
  (<span style="color: #729fcf; font-weight: bold;">lexical-let*</span> ((default-directory org-octopress-top))
    (deferred:$
      (deferred:process-shell <span style="color: #ad7fa8; font-style: italic;">"blog_deploy.sh"</span> org-octopress-top)
      (deferred:nextc it
        (<span style="color: #729fcf; font-weight: bold;">lambda</span> (x)
          (message <span style="color: #ad7fa8; font-style: italic;">"*** deploy blog ***"</span>)
          (message x))))))
</pre>
</div>

<p>
<code>blog_deploy.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #888a85;">#</span><span style="color: #888a85;">!/bin/</span><span style="color: #729fcf; font-weight: bold;">sh</span>
<span style="color: #888a85;">#</span><span style="color: #888a85;">!/bin/sh</span>
<span style="color: #888a85;">## </span><span style="color: #888a85;">Usage: blog_deploy.sh</span>
<span style="color: #888a85;">##</span>
<span style="color: #888a85;">## </span><span style="color: #888a85;">Options: $1 octopress&#12487;&#12451;&#12524;&#12463;&#12488;&#12522;&#12398;&#20301;&#32622;</span>
<span style="color: #888a85;">##   </span>
<span style="color: #888a85;">## </span><span style="color: #888a85;">Comment: octopress&#37197;&#19979;&#12395;blog&#38745;&#30340;</span>
<span style="color: #888a85;">##          </span><span style="color: #888a85;">&#12467;&#12531;&#12486;&#12531;&#12484;&#12398;&#29983;&#25104;&#12392;&#12487;&#12503;&#12525;&#12452;</span>
<span style="color: #888a85;">##################################################################### </span>

<span style="color: #ff6347;">RUBY_VER</span>=<span style="color: #ad7fa8; font-style: italic;">"1.9.3-p0"</span>
<span style="color: #ff6347;">OCTOPRESS_DIR</span>=$<span style="color: #ff6347;">1</span>

which rbenv
<span style="color: #729fcf; font-weight: bold;">if</span> [ $<span style="color: #ff6347;">?</span> = 0 ]; <span style="color: #729fcf; font-weight: bold;">then</span>
    <span style="color: #888a85;"># </span><span style="color: #888a85;">ruby &#12496;&#12540;&#12472;&#12519;&#12531;&#20999;&#12426;&#26367;&#12360;&#20966;&#29702;</span>
    rbenv global $<span style="color: #ff6347;">RUBY_VER</span>
    rbenv rehash
    <span style="color: #ff6347;">global_ver</span>=<span style="color: #fa8072;">`rbenv global`</span>
    <span style="color: #729fcf; font-weight: bold;">if</span> [ $<span style="color: #ff6347;">global_ver</span> = $<span style="color: #ff6347;">RUBY_VER</span> ]; <span style="color: #729fcf; font-weight: bold;">then</span>
        <span style="color: #888a85;"># </span><span style="color: #888a85;">blog&#12467;&#12531;&#12486;&#12531;&#12484;&#29983;&#25104;&#12392;&#12487;&#12503;&#12525;&#12452;</span>
        <span style="color: #729fcf;">echo</span> <span style="color: #ad7fa8; font-style: italic;">"run rake with `ruby --version`"</span>
        <span style="color: #729fcf;">pushd</span> $<span style="color: #ff6347;">OCTOPRESS_DIR</span>
        rake generate
        rake deploy
        <span style="color: #729fcf;">popd</span>
    <span style="color: #729fcf; font-weight: bold;">fi</span>
<span style="color: #729fcf; font-weight: bold;">fi</span>
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[検証]SMTPプロトコール監視してみた]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-13-%5B%E6%A4%9C%E8%A8%BC%5Dsmtp%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%BC%E3%83%AB%E7%9B%A3%E8%A6%96%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F.html"/>
    <updated>2014-06-13T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]smtpプロトコール監視してみた</id>
    <content type="html"><![CDATA[<p>
自宅のPC環境にMTA(postfix)サーバを構築しました。
１周間ほど保持したので、telnet、nc、tcpdumpコマンドから
メール送信処理の中身を観測してみたいと思います。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">概要</h2>
<div class="outline-text-2" id="text-1">
<p>
VM環境を立てるのが面倒のため、loopbackインタフェースを通して
ローカル環境内で検証を行う。
</p>
<pre class="example">
+--------------+         +-------------+
|              |         |             |
| クライアント +-- lo ----+  MTAサーバ |
|              |         |             |
+--------------+         +-------------+
  127.0.0.1                127.0.0.1:25
</pre>

<p>
<!-- more -->
</p>

<p>
ドメイン、メール送受信情報
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">MTAサーバFQDN</td>
<td class="left">mail.home</td>
</tr>

<tr>
<td class="left">クライアントFQDN</td>
<td class="left">jizai.home</td>
</tr>

<tr>
<td class="left">送信者メール</td>
<td class="left">akira@mail.home</td>
</tr>

<tr>
<td class="left">受信者メール</td>
<td class="left">root@mail.home</td>
</tr>
</tbody>
</table>

<p>
tcpdumpコマンドでloopbackインタフェースのパケットを監視する。
</p>

<pre class="example">
[akira@jizai ~]$ sudo tcpdump -n  -i lo port 25
</pre>

<p>
telnetからメール送信レシピ、 <span class="underline">★</span> が付いている部分が手入力
</p>
<pre class="example">
[akira@jizai ~]$ telnet localhost 25     ★接続開始
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.home ESMTP unknown
HELO jizai.home                          ★メール送信開始宣言
250 mail.home
MAIL FROM: &lt;akira@mail.home&gt;             ★送信元を指定する
250 2.1.0 Ok
RCPT TO: &lt;root@mail.home&gt;                ★送信先を指定する
250 2.1.5 Ok
DATA                                     ★メール本文を開始する
354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
This is a Test mail from telnet
Hello root!
.                                        ★メール本文終了
250 2.0.0 Ok: queued as AB9BF8A107E
quit                                     ★接続終了
221 2.0.0 Bye
Connection closed by foreign host.
[akira@jizai ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">telnetからの接続開始</h2>
<div class="outline-text-2" id="text-2">
<p>
localhostの25番ポートへ接続する。
</p>
<pre class="example">
[akira@jizai ~]$ telnet localhost 25
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.home ESMTP unknown    ★ 説明：MTAサーバから準備完了応答メッセージ
</pre>

<p>
tcpdumpの出力にtcpの3ウェイ・ハンドシェイク処理(1-3行目)と
MTAサーバから最初の応答メッセージ(4-5行目)が表示される。
</p>
<pre class="example">
11:49:33.684755 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [S], seq 1483942186, win 43690, options [mss 65495,sackOK,TS val 2064872 ecr 0,nop,wscale 7], length 0
11:49:33.684770 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [S.], seq 2082428713, ack 1483942187, win 43690, options [mss 65495,sackOK,TS val 2064872 ecr 2064872,nop,wscale 7], length 0
11:49:33.684787 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 1, win 342, options [nop,nop,TS val 2064872 ecr 2064872], length 0
11:49:33.685184 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 1:30, ack 1, win 342, options [nop,nop,TS val 2064872 ecr 2064872], length 29
11:49:33.685214 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 30, win 342, options [nop,nop,TS val 2064872 ecr 2064872], length 0
</pre>
<p>
気になること、tcpdumpの出力に途中からシーケンス番号が1に変わった。調べてみた結果、
tcpdump がわかりやすく表示するためでした。 <code>-S</code> を付けることでオリジナルのシーケンス
番号をそのまま出力することができる。
</p>

<p>
MTAログにクライアントからの接続跡が記録された。
</p>
<pre class="example">
Jun 13 11:49:33 localhost postfix/smtpd[4873]: warning: hostname jizai does not resolve to address 192.168.100.3
Jun 13 11:49:33 localhost postfix/smtpd[4873]: connect from unknown[192.168.100.3]
</pre>
<p>
MTAサーバでHELOからの名前解決にまだ問題が残っているようです。
DNSサーバに名前登録したはずです。さあ、どうしよう！
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">メール送信の開始を宣言する</h2>
<div class="outline-text-2" id="text-3">
<p>
<code>HELO &lt;クライアントのホスト名&gt;</code> コマンドでメールサーバに
にてメール送信の開始を宣言する。
</p>
<pre class="example">
[akira@jizai ~]$ telnet localhost 25
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.home ESMTP unknown
HELO jizai.home        ★ HELOコマンド実行
250 mail.home          ★ サーバからの250応答
</pre>

<p>
tcpdumpの出力、クライアントのPUSH（１行目）とサーバのACK（２行目）、
そしてサーバから応答時のPUSHとクライアントの受信ACKで合計４通が表示された。
</p>
<pre class="example">
10:51:18.385531 IP 127.0.0.1.55748 &gt; 127.0.0.1.25: Flags [P.], seq 1:18, ack 30, win 342, options [nop,nop,TS val 1016282 ecr 1012424], length 17
10:51:18.385568 IP 127.0.0.1.25 &gt; 127.0.0.1.55748: Flags [.], ack 18, win 342, options [nop,nop,TS val 1016282 ecr 1016282], length 0
10:51:18.385682 IP 127.0.0.1.25 &gt; 127.0.0.1.55748: Flags [P.], seq 30:45, ack 18, win 342, options [nop,nop,TS val 1016282 ecr 1016282], length 15
10:51:18.385711 IP 127.0.0.1.55748 &gt; 127.0.0.1.25: Flags [.], ack 45, win 342, options [nop,nop,TS val 1016282 ecr 1016282], length 0
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">送信元を指定する</h2>
<div class="outline-text-2" id="text-4">
<p>
<code>MAIL FROM: &lt;送信元メール&gt;</code> コマンドにて送信元メールアドレスを設定する。
</p>
<pre class="example">
MAIL FROM: &lt;akira@mail.home&gt;
250 2.1.0 Ok       ★応答コード 250
</pre>

<p>
tcpdumpの出力、サーバからのACKと応答メッセージのPUSHが纏めて送信されたため
TCPやり取りが３通で表示された。
</p>
<pre class="example">
11:50:09.768768 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 18:48, ack 45, win 342, options [nop,nop,TS val 2075697 ecr 2070308], length 30
11:50:09.768944 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 45:59, ack 48, win 342, options [nop,nop,TS val 2075697 ecr 2075697], length 14
11:50:09.768976 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 59, win 342, options [nop,nop,TS val 2075697 ecr 2075697], length 0
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">送信先を指定する</h2>
<div class="outline-text-2" id="text-5">
<p>
<code>RCPT TO: &lt;送信先メール&gt;</code> コマンドにて送信先メールアドレスを設定する。
</p>
<pre class="example">
MAIL FROM: &lt;root@mail.home&gt;
250 2.1.5 Ok     ★応答コード 250
</pre>

<p>
tcpdumpの出力、サーバからのACKと応答メッセージのPUSHが纏めて送信されたため
TCPやり取りが３通で表示された。
</p>
<pre class="example">
11:50:22.696751 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 48:75, ack 59, win 342, options [nop,nop,TS val 2079575 ecr 2075697], length 27
11:50:22.703097 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 59:73, ack 75, win 342, options [nop,nop,TS val 2079577 ecr 2079575], length 14
11:50:22.703135 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 73, win 342, options [nop,nop,TS val 2079577 ecr 2079577], length 0
</pre>

<p>
また <code>RCPT TO</code> コマンドがMTAサーバに届くと、サーバ側のsmtpdプロセスでメール
キューイングIDの払出、送信先アドレスのチェック処理が実施される。以下はMTAログです。
</p>
<pre class="example">
Jun 13 11:50:22 localhost postfix/smtpd[4873]: AB9BF8A107E: client=unknown[192.168.100.3]
</pre>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">メール本文を開始する</h2>
<div class="outline-text-2" id="text-6">
<p>
<code>DATA</code> コマンドにてメール本文開始要求をサーバへ送信する。
</p>
<pre class="example">
DATA
354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;  ★応答コード 354
</pre>

<p>
tcpdumpの出力
</p>
<pre class="example">
11:50:44.461274 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 75:81, ack 73, win 342, options [nop,nop,TS val 2086105 ecr 2079577], length 6
11:50:44.461442 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 73:110, ack 81, win 342, options [nop,nop,TS val 2086105 ecr 2086105], length 37
11:50:44.461474 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 110, win 342, options [nop,nop,TS val 2086105 ecr 2086105], length 0
</pre>

<p>
<span class="underline">telnetターミナルからメール本文を入力する、観測結果から見ると改行が入力されるたびに</span>
<span class="underline">入力されたテキストがサーバへ送信される。</span>
</p>
<pre class="example">
This is a Test mail from telnet       ★改行１
Hello root!                           ★改行２
</pre>

<p>
tcpdumpの出力
</p>
<pre class="example">
★改行１
11:50:58.590306 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 81:114, ack 110, win 342, options [nop,nop,TS val 2090343 ecr 2086105], length 33
11:50:58.628041 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [.], ack 114, win 342, options [nop,nop,TS val 2090355 ecr 2090343], length 0

★改行２
11:51:09.655315 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 114:127, ack 110, win 342, options [nop,nop,TS val 2093663 ecr 2090355], length 13
11:51:09.655352 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [.], ack 127, win 342, options [nop,nop,TS val 2093663 ecr 2093663], length 0
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">メール本文終了</h2>
<div class="outline-text-2" id="text-7">
<p>
.（ピリオド）を入力して、メール本文終了要求をサーバへ送信する。
</p>
<pre class="example">
.
250 2.0.0 Ok: queued as AB9BF8A107E
</pre>

<p>
.（ピリオド）の送信とサーバからの250正常応答受信合計４通。
</p>
<pre class="example">
11:51:21.982567 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 127:130, ack 110, win 342, options [nop,nop,TS val 2097361 ecr 2093663], length 3
11:51:21.982599 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [.], ack 130, win 342, options [nop,nop,TS val 2097361 ecr 2097361], length 0
11:51:22.014030 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 110:147, ack 130, win 342, options [nop,nop,TS val 2097370 ecr 2097361], length 37
11:51:22.014070 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 147, win 342, options [nop,nop,TS val 2097370 ecr 2097370], length 0
</pre>

<p>
MTAログにメールのキューイング処理と転送処理の記録が出力された。
メールヘッダのmessage-id項目がこの時点で払いだされたようです。
</p>
<ul class="org-ul">
<li>形式： <code>yyyymmdd999999.キューイングID@ドメイン名</code>
</li>
</ul>
<pre class="example">
Jun 13 11:51:21 localhost postfix/cleanup[5028]: AB9BF8A107E: message-id=&lt;20140613025022.AB9BF8A107E@mail.home&gt;
Jun 13 11:51:22 localhost postfix/qmgr[920]: AB9BF8A107E: from=&lt;akira@mail.home&gt;, size=333, nrcpt=1 (queue active)
Jun 13 11:51:22 localhost postfix/local[5058]: AB9BF8A107E: to=&lt;akira@mail.home&gt;, orig_to=&lt;root@mail.home&gt;, relay=local, delay=72, delays=72/0.01/0/0.02, dsn=2.0.0, status=sent (delivered to maildir)
Jun 13 11:51:22 localhost postfix/qmgr[920]: AB9BF8A107E: removed
</pre>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">接続終了</h2>
<div class="outline-text-2" id="text-8">
<p>
<code>quit</code> コマンドにて接続切断する。
</p>
<pre class="example">
quit                 ★ 切断送信
221 2.0.0 Bye        ★ 211応答
Connection closed by foreign host.
</pre>

<pre class="example">
★ 切断送信
11:51:42.503665 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 130:136, ack 147, win 342, options [nop,nop,TS val 2103517 ecr 2097370], length 6

★ 211応答
11:51:42.503825 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 147:162, ack 136, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 15
11:51:42.503856 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 162, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 0

★ tcpセッション終了
11:51:42.503867 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [F.], seq 162, ack 136, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 0
11:51:42.503969 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [F.], seq 136, ack 163, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 0
11:51:42.503999 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [.], ack 137, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 0
</pre>

<p>
MTAログにクライアント切断跡が残ります。
</p>
<pre class="example">
Jun 13 11:51:42 localhost postfix/smtpd[4873]: disconnect from unknown[192.168.100.3]
</pre>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">ncコマンドでファイルからメール送信テスト</h2>
<div class="outline-text-2" id="text-9">
<p>
telnetで入力した内容を <code>sendmail_test.txt</code> に保存し、ncに渡せばコマン１行
でメール送信することができた。
</p>

<p>
<code>sendmail_test.txt</code> の内容。
</p>
<pre class="example">
HELO jizai.home
MAIL FROM: &lt;akira@mail.home&gt;
RCPT TO: &lt;root@mail.home&gt;
DATA
This is a Test mail from nc
Hello root!
.
</pre>

<p>
メール送信したみた。
</p>
<pre class="example">
[akira@jizai temp]$ cat sendmail_test.txt | nc localhost 25
220 mail.home ESMTP unknown
250 mail.home
250 2.1.0 Ok
250 2.1.5 Ok
354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
250 2.0.0 Ok: queued as BE5B98A107E
[akira@jizai temp]$
</pre>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">習ったこと</h2>
<div class="outline-text-2" id="text-10">
<ul class="org-ul">
<li>tcpdumpのシーケンス番号の出力ルール
</li>
<li>DATAブロック内であっても、telnetターミナルで改行すると内容がサーバに送信される
</li>
<li>キューイングIDとメールメッセージIDの払出タイミング
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">参考</h2>
<div class="outline-text-2" id="text-11">
<ul class="org-ul">
<li><a href="http://www.atmarkit.co.jp/ait/articles/0304/22/news001.html">http://www.atmarkit.co.jp/ait/articles/0304/22/news001.html</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LPIC Lv2-201試験準備メモ１]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-12-lpic-lv2-201%E8%A9%A6%E9%A8%93%E6%BA%96%E5%82%99%E3%83%A1%E3%83%A2%EF%BC%91.html"/>
    <updated>2014-06-12T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/lpic-lv2-201試験準備メモ１</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">MBRパーティショニング</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>基本パテーション：MBR仕様の制限で基本パテーションは最大４つ
</li>
<li>拡張パテーション：一つ基本パテーションとして計算する
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">LVMスナップショート</h2>
<div class="outline-text-2" id="text-2">
<p>
スナップショートとはあるLVのカレント状態をバックアップする機能。
バックアップ方式としてファイルの増分内容を記録LV領域を作成しそのLV
領域にスナップショート作成時点からの変化履歴を記録する。
増分バックアップ方式であるため、初期作成時は容量消費しない。
対象LVに上ファイル変化があったたびにスナップショートLVに
変化内容が書き込まれるため、領域が消費される。
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">ARP (Address Resolution Protocol) コマンド</h2>
<div class="outline-text-2" id="text-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">arp -i eth0</td>
<td class="left">eth0インタフェースのarpキャッシュを表示する</td>
</tr>

<tr>
<td class="left">arp -a jizai.home</td>
<td class="left">対象ホストのmacアドレスを表示する</td>
</tr>

<tr>
<td class="left">arp -d jizai.home</td>
<td class="left">対象ホストのarpキャッシュを削除する</td>
</tr>

<tr>
<td class="left">arp -n</td>
<td class="left">逆引きを行わず、arpキャッシュを表示する</td>
</tr>

<tr>
<td class="left">arp -s 192.168.100.4 0a:c3:1c:e4:75:eb</td>
<td class="left">arpエントリレコードを追加する</td>
</tr>

<tr>
<td class="left">arp -f [/etc/ethers]</td>
<td class="left">ファイルからarpエントリレコードを追加する</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">ネットワーク設定ファイルのパス</h2>
<div class="outline-text-2" id="text-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">/etc/hostname</td>
<td class="left">ホスト名の設定</td>
</tr>

<tr>
<td class="left">/etc/hosts</td>
<td class="left">ホスト別名とIPのマッピング定義</td>
</tr>

<tr>
<td class="left">/etc/resolv.conf</td>
<td class="left">DNSサーバの指定</td>
</tr>

<tr>
<td class="left">/etc/nsswitch.conf</td>
<td class="left">名前解決方式のの優先順位指定</td>
</tr>

<tr>
<td class="left">/etc/networks</td>
<td class="left">ネットワーク名とネットワークアドレス</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">忘れがち知識</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>/etc/sysconfig/network ファイルにおいて IPv6 アドレス有効化こと項目：NETWORKING_IPV6
</li>
<li>無線 LAN のリンク品質や信号強度を確認できるコマンド
<ul class="org-ul">
<li>iwconfig
</li>
<li>iwlist
</li>
<li>iwspy
</li>
</ul>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Mission Controlメモ]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-12-java-mission-control%E3%83%A1%E3%83%A2.html"/>
    <updated>2014-06-12T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/java-mission-controlメモ</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">利用可能なJavaバージョン</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Java SE Advanced （アドバンスド）
</li>
<li>Java SE Suite
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">ローカルJavaプロセスの監視</h2>
<div class="outline-text-2" id="text-2">
<p>
監視対象Javaプロセス起動時に以下のオプションを追加する。
</p>
<ul class="org-ul">
<li>+UnlockCommercialFeatures：商用オプションロックを解除する
</li>
<li>+FlightRecorder：フライドレコーダー機能を有効化する
</li>
</ul>

<pre class="example">
$ java -XX:+UnlockCommercialFeatures -XX:+FlightRecorder ......
</pre>

<p>
<!-- more -->
</p>

<p>
利用可能なコマンドを確認する、jcmdコマンドにプロセスIDを引数にして実行できる
コマンド一覧を表示する。
</p>
<pre class="example">
$ jcmd &lt;pid&gt; help
  7720:
  The following commands are available:
  JFR.stop    ★レコーディング停止
  JFR.start   ★レコーディング開始
  JFR.dump    ★レコーディング内容をダンプする
  JFR.check
  VM.native_memory
  VM.commercial_features
  ManagementAgent.stop
  ManagementAgent.start_local
  ManagementAgent.start
  Thread.print
  GC.class_histogram
  GC.heap_dump
  GC.run_finalization
  GC.run
  VM.uptime
  VM.flags
  VM.system_properties
  VM.command_line
  VM.version
  help
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.start</code> でレコーディング開始、サブコマンドのヘルプは
<code>jcmd &lt;pid&gt; help JFR.start</code> で見る。
</p>
<pre class="example">
$ ./jcmd 7720 JFR.start
 7720:
 Started recording 4. No limit (duration/maxsize/maxage) in use.
  
 Use JFR.dump recording=4 filename=FILEPATH to copy recording data to file.
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.dump</code> でレコーディングファイルを取得する
</p>
<pre class="example">
$ ./jcmd 7720 JFR.dump recording=4 filename=/tmp/7720_002.jfr
7720:
Dumped recording 4, 378.5 kB written to:

/tmp/7720_002.jfr
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.stop</code> でレコーディング終了
</p>
<pre class="example">
$ ./jcmd 7720 JFR.stop
7720:
Must provide either name or recording.
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">リモートJavaプロセスの監視</h2>
<div class="outline-text-2" id="text-3">
<p>
JMXポートを公開する、一番手軽な方法、jcmdコマンドを用いて、JMX remote port を臨時で空
けて接続する。
</p>
<pre class="example">
jcmd &lt;pid&gt; ManagementAgent.start jmxremote.port=7091 jmxremote.authenticate=false jmxremote.ssl=false
</pre>

<p>
クライアントマシンのJava Mission Control（GUI）からJMX接続して、記録を行う。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">有用なJavaオプション</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">-XX:StartFlightRecording</h3>
<div class="outline-text-3" id="text-4-1">
<p>
JRockit JVMで実行されるアプリケーションのフライト・レコーダ記録を開始するには、このオ
プションを起動時に指定します。このオプションは、フライト・レコーダを実行時に開始する
start_flightrecording診断コマンドと同等です。詳細は、Oracle JRockit JDKツールを参照し
てください。
</p>

<pre class="example">
java -XX:+FlightRecorder -XX:FlightRecorderOptions=disk=true,maxchunksize=10M -XX:StartFlightRecording=filename=test.jfr myApp
</pre>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">-XX:+PrintFlagsFinal</h3>
<div class="outline-text-3" id="text-4-2">
<p>
JVM終了時にXXパラメータの値を標準出力にダンプする。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">よく使うコマンド</h2>
<div class="outline-text-2" id="text-5">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">商用機能の有効化とステータス確認</td>
<td class="left">jcmd &lt;pid&gt; VM.commercial_features</td>
</tr>

<tr>
<td class="left">JMX Agent のリモート起動</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.start</td>
</tr>

<tr>
<td class="left">JMX Agent のローカル起動</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.start_local</td>
</tr>

<tr>
<td class="left">JMX Agent の停止</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.stop</td>
</tr>

<tr>
<td class="left">スレッド一覧の出力</td>
<td class="left">Thread.print</td>
</tr>

<tr>
<td class="left">concurrent のlock に関するスレッド</td>
<td class="left">jcmd &lt;pid&gt; Thread.print -l</td>
</tr>

<tr>
<td class="left">JVM コマンドラインの表示</td>
<td class="left">VM.command_line</td>
</tr>

<tr>
<td class="left">System Properties の表示</td>
<td class="left">VM.system_properties</td>
</tr>

<tr>
<td class="left">該当VMに指定されたJVMオプションの表示 -all で全オプションと値の出力</td>
<td class="left">VM.flags</td>
</tr>

<tr>
<td class="left">GC.run</td>
<td class="left">System.gc() の実行</td>
</tr>

<tr>
<td class="left">ヒープダンプ出力（HPROF形式）-all を指定しない場合にはfull gc がリクエストされる</td>
<td class="left">GC.heap_dump</td>
</tr>
</tbody>
</table>
</div>
</div>
]]></content>
  </entry>
  
</feed>
