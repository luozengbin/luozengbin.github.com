#+TITLE: [メモ]Numaについて
#+DATE: 2014-09-29
#+SETUPFILE: ~/.emacs.d/blogs/octopress/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: linux
#+JEKYLL_TAGS: numa cgroup
#+JEKYLL_COMMENTS: true
#+JEKYLL_PUBLISHED: true

Numaに関する知識の整理、主にRHELマニュアルから自分が気になるポイントを抽出している。
cgroupとの併用を含また観点は個人知識ベースであるため、間違っている可能性もある。

* 知識おさらい
** NUMA
NUMAとはNon-Uniform Memory Accessの略でヌマと読みます。
以下、IT用語辞典 e-Wordsからの引用
#+begin_example
メモリ共有型のマルチプロセッサシステムの実装方式の一つで、メモリへのアクセス速度が均一
にならないような方式。NUMA型のシステムでは一つまたはいくつかのプロセッサがノードと呼ば
れる単位を形成し、メモリはノード単位で配置される。共有メモリ型なのですべてのメモリは単
一の物理アドレス空間で管理され、どのプロセッサもすべてのノードのメモリにアクセスできる
が、同じノード内のメモリには高速にアクセスでき、別のノードのメモリにアクセスするには時
間がかかる。これに対し、SMP/UMA型のシステムではすべてのプロセッサが単一のバスを介して
メモリにアクセスするが、プロセッサ数やメモリ領域が増えるとバスの通信量が急激に増大し、
過負荷による性能の低下が頻発する欠点がある。NUMAはよく使うデータをノード内のメモリに置
くなどの工夫により、多数のプロセッサがバスの輻輳を防ぎながらSMPに近い性能で稼働するこ
とができる。
#+end_example

絵で表現する。
#+begin_example
 <<NUMA #1>>                       <<NUMA #2>>
+-----------------------+          +-----------------------+
|    +------------+     |          |    +------------+     |
|    |    RAM     |     |          |    |   RAM      |     |
|    +------+-----+     |          |    +------+-----+     |
|           |   |       |          |           |           |
| +---------+---------+ |   QPI    | +---------+---------+ |
| | Memory Controller <--------------> Memory Controller | |
| +---------+---------+ |          | +---------+---------+ |
|           |   |       |          |           |           |
| +---------+---------+ |          | +---------+---------+ |
| |  <<CPU Node1 >>   | |          | |  <<CPU Node1 >>   | |
| |  +-------------+  | |          | |  +-------------+  | |
| |  |  Core 0     |  | |          | |  |  Core 0     |  | |
| |  +-------------+  | |          | |  +-------------+  | |
| |  +-------------+  | |          | |  +-------------+  | |
| |  |  Core 1     |  | |          | |  |  Core 1     |  | |
| |  +-------------+  | |          | |  +-------------+  | |
| +-------------------+ |          | +-------------------+ |
+-----------------------+          +-----------------------+
#+end_example
=QPI= の位置は自信はない。

** Numamノード間接続技術
- IntelはQPI（QuickPath Interconnect）でNumaノード間を繋ぐ
- AMD プロセッサはHyper Transport (HT) でNumaノード間を繋ぐ

** リモートメモリアクセスの問題
リモートメモリアアクセスする場合、複数のメモリコントローラーの経由が必要となり、アクセ
スに 2 倍以上の時間がかかる可能性があります。

以下、RHEL6マニュアルからの引用
#+begin_example
NUMA システムでは、プロセッサとメモリバンク間の距離が長ければ長いほど、プロセッサのメ
モリへのアクセスは遅くなります。このため、パフォーマンス依存型のアプリケーションは、一
番近いメモリバンクからのメモリを割り当てるような設定にするべきです。
#+end_example

** cache thrashing問題
以下、RHEL6マニュアルからの引用
#+begin_example
パフォーマンス依存型のアプリケーションは、特定のコア数で実行する設定が推奨されます。マ
ルチスレッドのアプリケーションは、特にこれが当てはまります。最初のレベルのキャッシュは
通常少ないため、複数スレッドが 1 つのコアで実行すると、各スレッドは以前のスレッドがア
クセスしたキャッシュ済みのデータを削除する可能性があります。オペレーティングシステムが
これらのスレッド間でマルチタスクを試みる際に、スレッドが互いのキャッシュ済みデータを削
除し続けると、実行時間の多くがキャッシュラインの置換に費やされてしまいます。この問題は、
キャッシュスラッシング (cache thrashing) と呼ばれています。このため、マルチスレッドの
アプリケーションを単一コアではなく、ノードに結び付けることが推奨されます。これによって、
スレッドは複数レベル (最初、2 番目、最終レベルのキャッシュ) でキャッシュラインの共有が
でき、キャッシュを満たす操作の必要性が最小限に抑えられるからです。しかし、スレッドすべ
てが同一のキャッシュ済みデータにアクセスしている場合は、アプリケーションの単一コアへの
バインディングは永続的なものになる場合があります。
#+end_example

=アプリケーションを単一コアではなく、ノードに結び付けることが推奨されます。= これに対
して =numactl --cpunodebind= で実装は可能だが、CPUコア数でライセンス費を計算するソフ
トではノード単位での割り当てが不都合の場合も有ります。この場合cgroupのcpusetで同一
ノード上の複数CPUコア割り当てで対応できる。性能面どれぐらい差があるかは気になりますが。

* 役に立つコマンド例
メモリアクセスを特定のNumaノードに固定する。
#+begin_example
$ numactl --membinds 0 java .........
#+end_example

プログラム実行するCPUを特定のNumaノードに固定する。
#+begin_example
$ numactl --cpunodebind 0 java .........
#+end_example

プログラム実行するCPUコアを固定する。cgroupのcpusetで制御する単位と一緒、cpuコア単位
となります。但し、numactlはcpuコアを専用する制御が出来ない。
#+begin_example
$ numactl --physcpubind 0-3 java .........
#+end_example

JavaプロセスをNumaノード0に固定したい
#+begin_example
$ numactl --cpunodebind 0 --membinds 0 java .....

もうしくは
$ numactl --cpunodebind 0 --localalloc java .....
#+end_example

* Numa制御自動化
RHELマニュアルより
#+begin_example
numad は自動の NUMA 管理デーモンです。システム内の NUMA トポロジーとリソース使用量を監
視して、動的に NUMA リソース割り当ておよび管理 (つまりシステムパフォーマンス) を改善し
ます。
#+end_example

* 監視するためのコマンド
- numastat
  メモリ統計 (割り当てのヒットとミスなど) を NUMA ノードあたりで表示する。
- numactl --hardware
  各ノードにメモリの空き状況を参照する。

* 参考
- [[http://ja.wikipedia.org/wiki/NUMA][NUMA]]
- [[https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/main-cpu.html][RHEL6 パフォーマンスチューニングガイド - 第4章 CPU]]
- [[http://www.cc.u-tokyo.ac.jp/support/press/news/VOL10/No6/200811tuning.pdf][実アプリケーションの最適化のテクニック]]
- [[http://mkosaki.blog46.fc2.com/blog-entry-198.html][numactl の使い方]]
- [[http://blog.livedoor.jp/rootan2007/archives/51319459.html][並列計算のチューニング　－ NUMA －]]

{{{more}}}
