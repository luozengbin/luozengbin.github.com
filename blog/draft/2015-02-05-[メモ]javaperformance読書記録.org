#+TITLE: [メモ]JavaPerformance読書記録
#+DATE: 2015-02-05
#+SETUPFILE: ~/.emacs.d/blogs/octopress/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: java
#+JEKYLL_TAGS: book
#+JEKYLL_COMMENTS: true
#+JEKYLL_PUBLISHED: true

{{{more}}}

* チューニングのポイント
- GC時間のチューニング
- 同期ポイントの排除
- CPUキャッシュミス
- システムランドCPU使用率の削減

* 第５章 Java性能分析ツール
** Oracle Studio Performance Analyzer
商用無償ライセンスで公開されているため、好きに使える。Linux/Solarisのみ使える、Linux
版での性能収集機能がSolaris版より貧弱と思われる。2015/02時点確認した機能差の状況は以
下に示す。

|--------------+---------+------------------------------|
| 機能         | Solaris | Linux                        |
|--------------+---------+------------------------------|
| CPUの内訳    | ◯      | トータル時間しか表示出来ない |
| ユーザロック | ◯      | 使えない                     |
| ヒープ解析   |         |                              |
|--------------+---------+------------------------------|

1. Java性能分析に置いての特徴
   - OSレベルでの性能解析が可能
     例：ファイル操作で =read()= と =wait()= で掛かった時間の区別ができる。
   - Java Monitor（ロック）のトレースが容易になる
   - コード行レベルで消費したCPU時間の表示が可能
   - バイトコードやアセンブリレベルの時間解析が可能
   - プロファイリング時のオーバヘッドが小さい

2. 基本的な使い方
   - analyzerコマンド、GUIで収集対象データ指定が可能
    #+begin_example
    $ export PATH=/opt/solarisstudio12.4/bin:$PATH
    $ analyzer java -Xmx1024m -cp test1.jar sample.test
    #+end_example

   - collectコマンド
    #+begin_example
    $ export PATH=/opt/solarisstudio12.4/bin:$PATH
    $ collect -o test.1.er -j on java -Xmx1024m -cp test1.jar sample.test
    #+end_example

3. データの採集
   - =-p=クロックベースのプロファイリングデータ
     #+begin_example
       on  10ミリ秒
       lo  100ミリ秒
       hi  1ミリ秒
       99  99ミリ秒
     #+end_example
   - =y= signalによるデータの記録を制御し、一時停止/再開シグナルと呼ばれます。
   - =-h= ハードウェアカウンタオーバーフロー(HWC) プロファイリング

4. 性能測定結果の見方
   - タイムラインの見方




- [[http://docs.oracle.com/cd/E57200_01/html/E57220/index.html][Oracle Solaris Studio 12.4: スレッドアナライザユーザーズガイド]]
