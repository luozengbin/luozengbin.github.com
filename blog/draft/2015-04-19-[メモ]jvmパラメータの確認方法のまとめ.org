#+TITLE: [メモ]JVMパラメータの確認方法のまとめ
#+DATE: 2015-04-19
#+SETUPFILE: ~/.emacs.d/blogs/octopress/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: java
#+JEKYLL_TAGS: jvm
#+JEKYLL_COMMENTS: true 
#+JEKYLL_PUBLISHED: true

{{{more}}}

* JVM起動時ergonomics機構で変更されたパラメータの確認
JVMは起動時に実行環境を元に色んなパラメータチューニングを行うergonomics機構が持っている。

ergonomics実施される前のパラメータ情報取得コマンド
#+begin_example
$ java -XX:+PrintFlagsInitial
#+end_example

ergonomics実施される後のパラメータ情報取得コマンド
#+begin_example
$ java -XX:+PrintFlagsFinal -version
#+end_example

次の環境で取れた差分を比較してみた。
#+begin_example
$ java -version
java version "1.7.0_79"
OpenJDK Runtime Environment (IcedTea 2.5.5) (Arch Linux build 7.u79_2.5.5-1-x86_64)
OpenJDK 64-Bit Server VM (build 24.79-b02, mixed mode)
#+end_example

比較結果出力用コマンド
#+begin_example
$ diff -y --suppress-common-lines PrintFlagsInitial.txt PrintFlagsFinal.txt
     bool AlignVector                               = true    |	     bool AlignVector                               = false  
     intx AllocatePrefetchDistance                  = -1      |	     intx AllocatePrefetchDistance                  = 192    
     intx AllocatePrefetchLines                     = 3       |	     intx AllocatePrefetchLines                     = 4      
     intx AllocatePrefetchStepSize                  = 16      |	     intx AllocatePrefetchStepSize                  = 64     
    uintx InitialHeapSize                           = 0       |	    uintx InitialHeapSize                          := 6338694
.......
#+end_example

詳細は以下に示します。
|-------+-----------------------------+----------------------+----------------------|
| 型    | 項目名                      |        ergonomicsm前 |         ergonomics後 |
|-------+-----------------------------+----------------------+----------------------|
| bool  | AlignVector                 |                 true |                false |
| intx  | AllocatePrefetchDistance    |                   -1 |                  192 |
| intx  | AllocatePrefetchLines       |                    3 |                    4 |
| intx  | AllocatePrefetchStepSize    |                   16 |                   64 |
| uintx | InitialHeapSize             |                    0 |             63386944 |
| uintx | MarkSweepDeadRatio          |                    5 |                    1 |
| uintx | MaxHeapFreeRatio            |                   70 |                  100 |
| uintx | MaxHeapSize                 |            697932184 |           1015021568 |
| intx  | MaxLoopPad                  |                   15 |                   11 |
| uintx | MaxNewSize                  | 18446744073709551615 | 18446744073709486080 |
| intx  | MaxNodeLimit                |                65000 |                75000 |
| uintx | MaxPermHeapExpansion        |              5452592 |              5439488 |
| uintx | MaxPermSize                 |            174483040 |            174063616 |
| uintx | MinHeapDeltaBytes           |               170392 |               196608 |
| uintx | MinHeapFreeRatio            |                   40 |                    0 |
| uintx | MinPermHeapExpansion        |               340784 |               327680 |
| uintx | NewSize                     |              1363144 |              1310720 |
| uintx | OldSize                     |              5452592 |              5439488 |
| uintx | ParallelGCThreads           |                    0 |                    4 |
| uintx | PermMarkSweepDeadRatio      |                   20 |                    5 |
| uintx | PermSize                    |             21810376 |             21757952 |
| intx  | PrefetchCopyIntervalInBytes |                   -1 |                  576 |
| intx  | PrefetchFieldsAhead         |                   -1 |                    1 |
| intx  | PrefetchScanIntervalInBytes |                   -1 |                  576 |
| bool  | PrintGCCause                |                 true |                false |
| uintx | SharedMiscDataSize          |              5242880 |              6291456 |
| uintx | SharedReadWriteSize         |             13631488 |             14680064 |
| bool  | UseAES                      |                false |                 true |
| bool  | UseAESIntrinsics            |                false |                 true |
| intx  | UseAVX                      |                   99 |                    1 |
| bool  | UseAddressNop               |                false |                 true |
| bool  | UseCompressedOops           |                false |                 true |
| bool  | UseFastAccessorMethods      |                 true |                false |
| bool  | UseFastEmptyMethods         |                 true |                false |
| bool  | UseParallelGC               |                false |                 true |
| bool  | UseParallelOldGC            |                false |                 true |
| bool  | UsePopCountInstruction      |                false |                 true |
| intx  | UseSSE                      |                   99 |                    4 |
| bool  | UseSSE42Intrinsics          |                false |                 true |
| bool  | UseSharedSpaces             |                 true |                false |
| bool  | UseStoreImmI16              |                 true |                false |
| bool  | UseUnalignedLoadStores      |                false |                 true |
| bool  | UseXMMForArrayCopy          |                false |                 true |
| bool  | UseXmmRegToRegMoveAll       |                false |                 true |
|-------+-----------------------------+----------------------+----------------------|


* PrintFlags出力結果について

以下 =-XX:+PrintFlagsFinal= 出力結果の各列何を意味しているでしょか？

#+begin_example
bool AggressiveOpts                            = false           {product}
intx BackEdgeThreshold                         = 100000          {pd product}
bool C1OptimizeVirtualCallProfiling            = true            {C1 product}
bool LIRFillDelaySlots                         = false           {C1 pd product}
intx AliasLevel                                = 3               {C2 product}
intx ConditionalMoveLimit                      = 3               {C2 pd product}
intx CMSAbortablePrecleanWaitMillis            = 100             {manageable}
intx FenceInstruction                          = 0               {ARCH product}
intx ObjectAlignmentInBytes                    = 8               {lp64_product}
#+end_example

第１列パラメータの型を示していると思います。以下のコマンドで全ての型を出してみましょ
う。
#+begin_example
$ java -XX:+PrintFlagsFinal -version | awk '{print $1}' | sort | uniq
★ここに余計なものを削除した
bool
ccstr
ccstrlist
double
intx
uint64_t
uintx
#+end_example

第２列はパラメータ名に間違えないでしょう。

第３列は全て = とは限らないです。JVM起動オプションで変更されたパラメータは =:== で表
示される。

#+begin_example
$ java -XX:+PrintFlagsFinal -version | awk '{print $3}' | sort | uniq
★ここに余計なものを削除した
:=
=
#+end_example

最後の列は奇怪な値ですね。C1, C2は馴染めのJITコンパイラのことでしょうけど、それ以外に
関して全く分からないです。とりあえず出して見ます。

#+begin_example
$ java -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal -version | awk -F '\\{' '{print "{" $2}' | sort | uniq
★ここに余計なものを削除した
{ARCH diagnostic}   
{ARCH product}      
{C1 pd product}     
{C1 product}        
{C2 diagnostic}     
{C2 pd product}     
{C2 product}        
{diagnostic}        
{experimental}      
{lp64_product}      
{manageable}        
{pd product}        
{product rw}        
{product}
#+end_example

JDKのコードを検索したら [[https://github.com/openjdk-mirror/jdk7u-hotspot/blob/master/src/share/vm/runtime/globals.hpp#L440][RUNTIME_FLAGS]] にありました。以上来以外に開発向けのフラグも存
在します。
#+begin_example
#define RUNTIME_FLAGS(develop, develop_pd, product, product_pd, diagnostic, experimental, notproduct, manageable, product_rw, lp64_product)
#+end_example

各フラグの説明はソースのコメントに書かれている。
#+begin_example
// develop flags are settable / visible only during development and are constant in the PRODUCT version
// product flags are always settable / visible
// notproduct flags are settable / visible only during development and are not declared in the PRODUCT version

// A flag must be declared with one of the following types:
// bool, intx, uintx, ccstr.
// The type "ccstr" is an alias for "const char*" and is used
// only in this file, because the macrology requires single-token type names.

// Note: Diagnostic options not meant for VM tuning or for product modes.
// They are to be used for VM quality assurance or field diagnosis
// of VM bugs.  They are hidden so that users will not be encouraged to
// try them as if they were VM ordinary execution options.  However, they
// are available in the product version of the VM.  Under instruction
// from support engineers, VM customers can turn them on to collect
// diagnostic information about VM problems.  To use a VM diagnostic
// option, you must first specify +UnlockDiagnosticVMOptions.
// (This master switch also affects the behavior of -Xprintflags.)
//
// experimental flags are in support of features that are not
//    part of the officially supported product, but are available
//    for experimenting with. They could, for example, be performance
//    features that may not have undergone full or rigorous QA, but which may
//    help performance in some cases and released for experimentation
//    by the community of users and developers. This flag also allows one to
//    be able to build a fully supported product that nonetheless also
//    ships with some unsupported, lightly tested, experimental features.
//    Like the UnlockDiagnosticVMOptions flag above, there is a corresponding
//    UnlockExperimentalVMOptions flag, which allows the control and
//    modification of the experimental flags.
//
// Nota bene: neither diagnostic nor experimental options should be used casually,
//    and they are not supported on production loads, except under explicit
//    direction from support engineers.
//
// manageable flags are writeable external product flags.
//    They are dynamically writeable through the JDK management interface
//    (com.sun.management.HotSpotDiagnosticMXBean API) and also through JConsole.
//    These flags are external exported interface (see CCC).  The list of
//    manageable flags can be queried programmatically through the management
//    interface.
//
//    A flag can be made as "manageable" only if
//    - the flag is defined in a CCC as an external exported interface.
//    - the VM implementation supports dynamic setting of the flag.
//      This implies that the VM must *always* query the flag variable
//      and not reuse state related to the flag state at any given time.
//    - you want the flag to be queried programmatically by the customers.
//
// product_rw flags are writeable internal product flags.
//    They are like "manageable" flags but for internal/private use.
//    The list of product_rw flags are internal/private flags which
//    may be changed/removed in a future release.  It can be set
//    through the management interface to get/set value
//    when the name of flag is supplied.
//
//    A flag can be made as "product_rw" only if
//    - the VM implementation supports dynamic setting of the flag.
//      This implies that the VM must *always* query the flag variable
//      and not reuse state related to the flag state at any given time.
//
// Note that when there is a need to support develop flags to be writeable,
// it can be done in the same way as product_rw.
#+end_example

簡単にまとめると
|--------------+---------------------------------------|
| product      | 公式製品サポートオプション            |
| xxx rw       | 実行時に書き換え可能な項目            |
| C1 xxx       | クライアントJITコンパイラオプション   |
| C2 xxx       | サーバJITコンパイラオプション         |
| pd product   | TODO:調査                             |
| lp64         | 64bit JVMオプション                   |
| manageable   | JMXインタフェースで書き換え可能な項目 |
| diagnostic   | VMデバッグ／診断オプション            |
| experimental | 非公式JVMオプション                   |
|--------------+---------------------------------------|

* jinfoで実行時にJVMオプション値を変える


* -XX:+AggressiveOptsよりチューニングされた項目
下記コメントで =-XX:+AggressiveOpts= で変更されたJVMオプションを表示する。
#+begin_example 
$ diff -y --suppress-common-lines <(java -XX:+PrintFlagsFinal -XX:+AggressiveOpts -version) <(java -XX:+PrintFlagsFinal -version)
java version "1.7.0_79"
OpenJDK Runtime Environment (IcedTea 2.5.5) (Arch Linux build 7.u79_2.5.5-1-x86_64)
OpenJDK 64-Bit Server VM (build 24.79-b02, mixed mode)
java version "1.7.0_79"
OpenJDK Runtime Environment (IcedTea 2.5.5) (Arch Linux build 7.u79_2.5.5-1-x86_64)
OpenJDK 64-Bit Server VM (build 24.79-b02, mixed mode)
     bool AggressiveOpts                           := true    |	     bool AggressiveOpts                            = false  
     intx AutoBoxCacheMax                           = 20000   |	     intx AutoBoxCacheMax                           = 128    
     intx BiasedLockingStartupDelay                 = 500     |	     intx BiasedLockingStartupDelay                 = 4000   
     bool UseFPUForSpilling                         = true    |	     bool UseFPUForSpilling                         = false 
#+end_example

|---------------------------+-----------|
| AutoBoxCacheMax           | TODO:調査 |
| BiasedLockingStartupDelay | TODO:調査 |
| UseFPUForSpilling         | TODO:調査 |
|---------------------------+-----------|

* C1とC2のJVMオプション比較コメント
#+begin_example
$ diff -y --suppress-common-lines <(java -XX:+PrintFlagsFinal -server -version) <(java -XX:+PrintFlagsFinal -client -version)
#+end_example


* 参考
- [[http://stas-blogspot.blogspot.jp/2011/07/most-complete-list-of-xx-options-for.html][The most complete list of -XX options for Java JVM]]
- [[http://www.javaworld.com/article/2073830/core-java/hotspot-jvm-options-displayed---xx--printflagsinitial-and--xx--printflagsfinal.html][HotSpot JVM Options Displayed: -XX:+PrintFlagsInitial and -XX:+PrintFlagsFinal]]
