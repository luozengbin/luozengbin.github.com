#+TITLE: [メモ]GNOME3デスクトップ環境の整備
#+DATE: 2014-12-30
#+SETUPFILE: ~/.emacs.d/blogs/octopress/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: linux
#+JEKYLL_TAGS: GNOME
#+JEKYLL_COMMENTS: true 
#+JEKYLL_PUBLISHED: true

数年前まらMacBookAir A1369(機種ID：MacBookAir4,2)にArchlinuxを入れて日常作業で使って来
ました。整理整頓が怠慢しデスクトップ環境(GNOME)にいろいろゴミが出来て、年末大掃除しま
した。気になる点を整理しました。

{{{more}}}

* 省電力化
Mac OS Xよりバッテリー持ち時間がかなり短いので、省電力化を行います。

** NMI watchdog の無効化
NMI watchdog はカーネルパニックを引き起こすハードウェアのハングアップをキャッチするデ
バッグ機能です。システムによっては大量の割り込みが発生するため、消費電力の増加につながっ
ていることがあります。

=linux-3.14/Documentation/kernel-parameters.txt= より抜粋
#+begin_example
nmi_watchdog=	[KNL,BUGS=X86] Debugging features for SMP kernels
		Format: [panic,][nopanic,][num]
		Valid num: 0
		0 - turn nmi_watchdog off
		When panic is specified, panic when an NMI watchdog
		timeout occurs (or 'nopanic' to override the opposite
		default).
		This is useful when you use a panic=... timeout and
		need the box quickly up again.
#+end_example

=linux-3.14/Documentation/sysctl/kernel.txt= より抜粋
#+begin_example
nmi_watchdog:

Enables/Disables the NMI watchdog on x86 systems. When the value is
non-zero the NMI watchdog is enabled and will continuously test all
online cpus to determine whether or not they are still functioning
properly. Currently, passing "nmi_watchdog=" parameter at boot time is
required for this function to work.

If LAPIC NMI watchdog method is in use (nmi_watchdog=2 kernel
parameter), the NMI watchdog shares registers with oprofile. By
disabling the NMI watchdog, oprofile may have more registers to
utilize.

#+end_example

=/etc/sysctl.d/disable_watchdog.conf= ファイルにてNMI watchdogを無効化する。
#+begin_example
kernel.nmi_watchdog = 0
#+end_example

再起動後 =sysfs= にて確認する
#+begin_example
$ cat /proc/sys/kernel/nmi_watchdog
0
#+end_example

** ライトバック時間
メモリ上ダーティページのFlush頻度を減らすことでディスクの書き込みを抑止し消費電力が抑
えられます。ただしデータロストのリスクもあるので60秒ぐらい妥当でしょう(デフォルトは5秒)。

=/etc/sysctl.d/dirty.conf=
#+begin_example
vm.dirty_writeback_centisecs = 6000
#+end_example

** ファイルシステムパラメータ
ファイルをアクセスするたびにinodeにアクセス時刻を記録する機能のOn/Off制御はファイルシ
ステムのマウントオプションで指定できる。この機能を無効化にするこでinodeの更新を抑止し
省電力を得る。

=stat= でファイルのアクセス時刻を確認する事ができる。
#+begin_example
$ stat TODO.org
  File: `TODO.org'
  Size: 78        	Blocks: 8          IO Block: 4096   通常ファイル
Device: fe01h/65025d	Inode: 2622634     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1000/   akira)   Gid: (  100/   users)
Access: 2015-01-02 01:34:41.583515574 +0900
Modify: 2014-12-30 02:22:37.394591324 +0900
Change: 2014-12-30 02:22:37.394591324 +0900
 Birth: -
#+end_example

=noatime= オプションでマウントし直す。
#+begin_example
$ sudo mount -o remount,noatime /
#+end_example

** オーディオ
オーディオカードのドライバーモジュールとモデルを確認する。
#+begin_example
$ cat /proc/asound/modules
 0 snd_hda_intel

$ cat /proc/asound/card*/codec* | grep Codec
Codec: Cirrus Logic CS4206
Codec: Intel CougarPoint HDMI
#+end_example

以下はカーネルドキュメントにHD-audioオーディオコンポーネントの省電力についての記述です。
=linux-3.14/Documentation/sound/alsa/HD-Audio.txt=

#+begin_example
Power-Saving
~~~~~~~~~~~~
The power-saving is a kind of auto-suspend of the device.  When the
device is inactive for a certain time, the device is automatically
turned off to save the power.  The time to go down is specified via
`power_save` module option, and this option can be changed dynamically
via sysfs.

The power-saving won't work when the analog loopback is enabled on
some codecs.  Make sure that you mute all unneeded signal routes when
you want the power-saving.

The power-saving feature might cause audible click noises at each
power-down/up depending on the device.  Some of them might be
solvable, but some are hard, I'm afraid.  Some distros such as
openSUSE enables the power-saving feature automatically when the power
cable is unplugged.  Thus, if you hear noises, suspect first the
power-saving.  See /sys/module/snd_hda_intel/parameters/power_save to
check the current value.  If it's non-zero, the feature is turned on.

The recent kernel supports the runtime PM for the HD-audio controller
chip, too.  It means that the HD-audio controller is also powered up /
down dynamically.  The feature is enabled only for certain controller
chips like Intel LynxPoint.  You can enable/disable this feature
forcibly by setting `power_save_controller` option, which is also
available at /sys/module/snd_hda_intel/parameters directory.
#+end_example

デフォルトでは、オーディオの省電力機能は無効になっています。 =power_save= や
=power_save_controller= パラメータを設定することで有効にすることができます。アイドルモー
ドに移行するまでの時間を秒数で指定します。10秒後にサウンドカードをアイドル状態にするに
は、 =/etc/modprobe.d/= 配下にモジュールパラメータファイルを作成する。

=/etc/modprobe.d/audio_powersave.conf=
#+begin_example
options snd_hda_intel power_save=10
#+end_example

再起動後 =sysfs= にて確認する。
#+begin_example
$ cat /sys/module/snd_hda_intel/parameters/power_save
10
#+end_example

analog loopback有効の場合省電力機能が聞かない。analog loopbackの確認
#+begin_example
$ cd /sys/class/sound/card0
$ find . -name hints | xargs cat | grep add_stereo_mix_input
#+end_example
何も出力されない場合、無効であること。

** 画面の明るさとキーボードライト
ライトセンサーより暗い環境で画面の明るさとキーボードライトを自動調節する機能がかなり
役立つです。デフォルト状態で無効となっています。下記 =sysfs= のファイルから制御するこ
とが可能です。

| センサーの値       | /sys/devices/platform/applesmc.768/light        |
| 画面の明るさ       | /sys/class/backlight/intel_backlight/brightness |
| キーボードの明るさ | /sys/class/leds/smc::kbd_backlight/brightness   |

[[https://github.com/Janhouse/lighter][lighter]] perlスクリプトを利用することでこれらの値を環境の明るさまたバッテリーのりよう状
況より自動的に調節してくれるので、かなり便利です。 適当に =/usr/bin/lighter.pl= に配置
し、systemdから自動起動／停止できるようしました。

=/usr/lib/systemd/system/lighter.service=
#+begin_example
[Unit]
Description=Automatically control Macbook Air (2012) screen and keyboard backlight brightness using data from the built in light sensor.

[Service]
Type=simple
ExecStart=/usr/bin/lighter.pl

[Install]
WantedBy=multi-user.target
#+end_example

サービスの有効化と起動
#+begin_example
$ sudo systemctl enable /usr/lib/systemd/system/lighter.service
Created symlink from /etc/systemd/system/multi-user.target.wants/lighter.service to /usr/lib/systemd/system/lighter.service.

$ sudo systemctl start lighter.service
#+end_example

** USB の自動サスペンド
Linux カーネルは USB デバイスが使用されていないときに USB デバイスを自動的にサスペンド
させることができます。これによって電力を相当カットできるときもあります。ただし遅延時
間はデフォルト2秒です、若干短いので少し伸ばしました。

これはカーネル機能(usbcoreモジュール)で実装されているため、カーネルの起動パラメータで
制御が可能です。

=kernel-parameters.txt= より引用
#+begin_example
usbcore.autosuspend=
		[USB] The autosuspend time delay (in seconds) used
		for newly-detected USB devices (default 2).	 This
		is the time required before an idle device will be
		autosuspended.	Devices for which the delay is set
		to a negative value won't be autosuspended at all.
#+end_example

=/etc/modprobe.d/usb_autosuspend.conf= ファイルにて遅延時間をデフォルトの2秒から10秒に設定する。
#+begin_example
linux   /boot/vmlinuz-linux root=/dev/mapper/vglinux-root ro usbcore.autosuspend=10
#+end_example

システム再起動後 =sys= 仮想ファイルシステムにて確認できる。
#+begin_example
$ cat /sys/module/usbcore/parameters/autosuspend
10
#+end_example

カーネル =usbcore= モジュールの実装を少し検索して見ました。

=linux-3.14/drivers/usb/core/usb.c= に2秒の実装が現れている。
#+begin_src c 
const char *usbcore_name = "usbcore";

static bool nousb;	/* Disable USB when built into kernel image */

#ifdef	CONFIG_PM_RUNTIME
static int usb_autosuspend_delay = 2;		/* Default delay value,
						 * in seconds */
module_param_named(autosuspend, usb_autosuspend_delay, int, 0644);
MODULE_PARM_DESC(autosuspend, "default autosuspend delay");

#else
#define usb_autosuspend_delay		0
#endif
#+end_src

以下はusb autosuspendの仮想ファイルシステム実装の一部コードです。
#+begin_src c 
static ssize_t autosuspend_show(struct device *dev,
				struct device_attribute *attr, char *buf)
{
	return sprintf(buf, "%d\n", dev->power.autosuspend_delay / 1000);
}

static ssize_t autosuspend_store(struct device *dev,
				 struct device_attribute *attr, const char *buf,
				 size_t count)
{
	int value;

	if (sscanf(buf, "%d", &value) != 1 || value >= INT_MAX/1000 ||
			value <= -INT_MAX/1000)
		return -EINVAL;

	pm_runtime_set_autosuspend_delay(dev, value * 1000);
	return count;
}
static DEVICE_ATTR_RW(autosuspend);
#+end_src

** ビデオカード省電力設定
ドライバーモジュールを確認する。
#+begin_example
$ lsmod | grep drm
drm_kms_helper         80934  1 i915
drm                   259106  5 i915,drm_kms_helper
i2c_core               50152  7 drm,i915,i2c_i801,drm_kms_helper,i2c_algo_bit,v4l2_common,videodev
#+end_example

ドライバーモジュールの省電力オプションを確認する。
#+begin_example
$ modinfo i915 | grep power
parm:           powersave:Enable powersavings, fbc, downclocking, etc. (default: true) (int)
parm:           enable_rc6:Enable power-saving render C-state 6. Different stages can be selected via bitmask values (0 = disable; 1 = enable rc6; 2 = enable deep rc6; 4 = enable deepest rc6). For example, 3 would enable rc6 and deep rc6, and 7 would enable everything. default: -1 (use per-chip default) (int)
parm:           enable_fbc:Enable frame buffer compression for power savings (default: -1 (use per-chip default)) (int)
parm:           lvds_downclock:Use panel (LVDS/eDP) downclocking for power savings (default: false) (int)
parm:           disable_power_well:Disable the power well when possible (default: true) (int)
#+end_example

ドライバーモジュールの省電力オプション値を確認する。
#+begin_example
$ sudo systool -m i915 -av
Module = "i915"

  Attributes:
    coresize            = "905750"
    initsize            = "0"
    initstate           = "live"
    refcnt              = "3"
    taint               = ""
    uevent              = <store method only>

  Parameters:
    disable_display     = "N"
    disable_power_well  = "1"
    disable_vtd_wa      = "N"
    enable_cmd_parser   = "1"
    enable_fbc          = "-1"
    enable_hangcheck    = "Y"
    enable_ips          = "1"
    enable_ppgtt        = "1"
    enable_psr          = "0"
    enable_rc6          = "1"
    fastboot            = "N"
    invert_brightness   = "0"
    lvds_channel_mode   = "0"
    lvds_downclock      = "0"
    lvds_use_ssc        = "-1"
    mmio_debug          = "N"
    modeset             = "-1"
    panel_ignore_lid    = "1"
    powersave           = "1"
    prefault_disable    = "N"
    preliminary_hw_support= "0"
    reset               = "Y"
    semaphores          = "-1"
    use_mmio_flip       = "0"
    vbt_sdvo_panel_type = "-1"

  Sections:
    .altinstr_replacement= "0xffffffffa04a6db8"
    .altinstructions    = "0xffffffffa04d1f7d"
    .bss                = "0xffffffffa04d7858"
    .data               = "0xffffffffa04d3000"
    .data..read_mostly  = "0xffffffffa04d5900"
    .data.unlikely      = "0xffffffffa04d58cc"
    .exit.text          = "0xffffffffa04a6d96"
    .fixup              = "0xffffffffa04a6eca"
    .gnu.linkonce.this_module= "0xffffffffa04d7600"
    .init.text          = "0xffffffffa04ed000"
    .note.gnu.build-id  = "0xffffffffa04a7000"
    .parainstructions   = "0xffffffffa04cdc78"
    .ref.data           = "0xffffffffa04d6200"
    .rodata             = "0xffffffffa04a7100"
    .rodata.str1.1      = "0xffffffffa04c727c"
    .rodata.str1.8      = "0xffffffffa04bb6d8"
    .smp_locks          = "0xffffffffa04c7048"
    .strtab             = "0xffffffffa0504038"
    .symtab             = "0xffffffffa04ee000"
    .text               = "0xffffffffa040e000"
    .text.unlikely      = "0xffffffffa04a62fe"
    __bug_table         = "0xffffffffa04d16c8"
    __ex_table          = "0xffffffffa04d2328"
    __jump_table        = "0xffffffffa04d5958"
    __kcrctab_gpl       = "0xffffffffa04a70b0"
    __ksymtab_gpl       = "0xffffffffa04a7030"
    __ksymtab_strings   = "0xffffffffa04d1ee4"
    __mcount_loc        = "0xffffffffa04ce138"
    __param             = "0xffffffffa04d13a8"
    __tracepoints_ptrs  = "0xffffffffa04d2410"
    __tracepoints_strings= "0xffffffffa04d2500"
    __tracepoints       = "0xffffffffa04d6e60"
    __verbose           = "0xffffffffa04d7598"
    _ftrace_events      = "0xffffffffa04d6108"
#+end_example

=/etc/modprobe.d/i915.conf= ファイルにて省電力オプション値を明示的に指定する。
#+begin_example
# Intel Graphics Power save Options
options i915 enable_rc6=1 enable_fbc=1 lvds_downclock=1
#+end_example

** acpidより省電力自動化する
=acpid= はACPIイベントをハンドリングし、動作カスタマイズするデーモンです。
以下はACアダプターイベントを拾って、省電力設定をまとめる。

=/etc/acpi/events/ac_adapter= に拾うイベントと実行するプログラムを指定する。
#+begin_example
# Pass ac_adapter events to powersave.sh script
event=ac_adapter.*
action=/etc/acpi/actions/powersave.sh %e
#+end_example

=/etc/acpi/actions/powersave.sh= に省電力設定変更処理を記述する。
#+begin_src sh
#!/bin/bash

case "$1" in
    ac_adapter)
        case "$4" in
            00000000)
                logger 'AC unpluged'
	            # Enable SATA link power management for /dev/sda
	            echo 'min_power' > /sys/class/scsi_host/host0/link_power_management_policy

	            # Enable powersave in PCI express ASPM
	            echo 'powersave' > /sys/module/pcie_aspm/parameters/policy

	            # nmi_watchdog
	            echo '0' > /proc/sys/kernel/nmi_watchdog

	            # cpu
	            for i in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo 'powersave' > $i; done

                # remount noatime
	            for dev in $(awk '/^\/dev\/mapper/ {print $1}' /etc/mtab); do mount -o remount,noatime $dev; done

	            # Disk powersave
	            for i in /sys/class/scsi_host/host*/link_power_management_policy; do echo 'min_power' >  $i; done

	            # Sound card powersave
	            echo '10' > /sys/module/snd_hda_intel/parameters/power_save
	            echo 'Y' > /sys/module/snd_hda_intel/parameters/power_save_controller

	            # Autosuspend for USB device
                for i in /sys/bus/usb/devices/*/power/control; do echo 'auto' > $i; done
	            for i in /sys/bus/usb/devices/*/power/autosuspend; do echo '10' > $i; done

	            # Autosuspend for PCI device
	            for i in /sys/bus/pci/devices/*/power/control; do echo 'auto' > $i; done

                # キャッシュ上でまだディスクに書き込まれていないページ(dirtyな)が、
                # 全物理ページに対する割合(％)を超えているとpdfluashに
                # よるライトバックがバックグラウンド行われます
	            echo '50' > /proc/sys/vm/dirty_background_ratio

                # ライトバックがフォアグラウンド行われます
	            echo '90' > /proc/sys/vm/dirty_ratio

                # キャッシュ上に存在しているページの存在時間がこの値(30秒)を
                # 過ぎた場合にライトバックされます
	            echo '3000' > /proc/sys/vm/dirty_expire_centisecs

                # pdflushの起動間隔（60秒）
	            echo '6000' > /proc/sys/vm/dirty_writeback_centisecs

                ;;
            00000001)
                logger 'AC pluged'

	            # Set SATA link power management for /dev/sda to max_performance
	            echo 'max_performance' > /sys/class/scsi_host/host0/link_power_management_policy

	            # Set PCI express ASPM to performance
	            echo 'performance' > /sys/module/pcie_aspm/parameters/policy

	            # ondemand cpu governor
                # 一定の負荷がかかると一気にCPUクロックを必要な数値まで上げます
	            for i in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo 'ondemand' > $i; done

	            # Disk power
	            for i in /sys/class/scsi_host/host*/link_power_management_policy; do echo 'max_performance' >  $i; done

	            # disable Autosuspend for USB device
	            for i in /sys/bus/usb/devices/*/power/control; do echo 'on' > $i; done

	            # disable Autosuspend for PCI device
	            for i in /sys/bus/pci/devices/*/power/control; do echo 'on' > $i; done

	            # remount relatime
	            for dev in $(awk '/^\/dev\/mapper/ {print $1}' /etc/mtab); do mount -o remount,relatime $dev; done

                ;;
            *)
                logger "ACPI action undefined: $2"
                ;;
        esac
        ;;
    *)
        logger "ACPI group/action undefined: $1 / $2"
        ;;
esac
#+end_src

実行権限を付与し、acpidを再起動する。
#+begin_example
$ sudo chmod +x /etc/acpi/actions/powersave.sh
$ sudo systemctl restart acpid.service
#+end_example

** powertopで最適化確認
#+begin_example
$ sudo powertop --calibrate --html=powerreport1.htm
#+end_example

** 電源消費履歴
=gnome-power-statistics= というGUIのツールで電源の消費時間、充電時間などの履歴を確認
することができる。暫く省電力運用し、効果を見る事にした。

ゾーン設定変種画面
[[file:img/2014-12-30-pm_001.png]]
# [img:img/2014-12-30-pm_001.png]

* マウスホイルの速度調節
マウスホイルのスクロールスピードが若干遅いので [[http://imwheel.sourceforge.net/][imwheel]] でスピードアップします。

#+begin_example
$ yaourt -S imwheel
#+end_example

=~/.imwheelrc= ファイルにマウスホイルの挙動を定義する。
#+begin_example
".*"
None,      Up,   Button4, 6
None,      Down, Button5, 6
Control_L, Up,   Control_L|Button4
Control_L, Down, Control_L|Button5
Shift_L,   Up,   Shift_L|Button4
Shift_L,   Down, Shift_L|Button5
#+end_example

imwheelを自動起動できるように =~/.config/autostart/imwheel.desktop= を追加する。
#+begin_example
[Desktop Entry]
Name=imwheel
Exec=/usr/bin/imwheel
Terminal=false
Categories=Utility
Type=Application
StartupNotify=false
X-GNOME-Autostart-enabled=true
#+end_example

* キーバンドの変更
デフォルトでは左の =command= キーが =Super_L= にマッピングされている、emacs使う際に少
し不便を感じるた左 =command= キーを =Alt_L= にマッピングし直すようにしました。

=~/.xmodmap= ファイルにキーバンド設定を記述する。
#+begin_example
remove Mod4 = Super_L
remove Mod1 = Alt_L
keysym Alt_L = Super_L
keysym Super_L = Alt_L
add Mod4 = Super_L
add Mod1 = Alt_L
#+end_example


=~/.xsession= ファイルにXセッション起動する度にxmodmapコマンドでキーバンド変更を実施
する。 =~/.xsession= ファイルに実行権限を付与する。 =chmod +x ~/.xsession=
#+begin_example
xmodmap ~/.xmodmap
#+end_example

* コンテキストメニューにアイコン表示
コンテキストメニューにアイコン表示機能が一時削除されたが、その後コミュニティーの反発
を受けて、拡張機能復活したようだ。

#+begin_example
$ gsettings set org.gnome.settings-daemon.plugins.xsettings overrides "{'Gtk/ButtonImages': <1>, 'Gtk/MenuImages': <1>}"
#+end_example

gsettingsの設定値は自動的に永続化されるのですが、念の為 =~/.xsession= に追加しました。

* Nautilsキーバンド変更
=~/.config/nautilus/accels= ファイルにてキーバンド変更する
#+begin_example
; Shift-delete キーでファイルをゴミ箱へ移動する
(gtk_accel_path "<Actions>/DirViewActions/Trash" "<Shift>BackSpace")

; delete キーでディレクトリ一階層upする
(gtk_accel_path "<Actions>/ShellActions/Up" "BackSpace")
#+end_example

* 参考
- [[https://bbs.archlinux.org/viewtopic.php?id%3D185465][{SOLVED}How to disable USB autosuspend?]]
- [[http://www.thinkwiki.org/wiki/How_to_enable_audio_codec_power_saving][How to enable audio codec power saving]]
- [[https://wiki.archlinux.org/index.php/Power_saving_%2528%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%2529#Active_State_Power_Management][Archlinux Wiki - Power saving]]
- [[https://wiki.archlinux.org/index.php/MacBook_Air][Archlinux Wiki - MacBook]]
- [[https://wiki.archlinux.org/index.php/Acpid_%2528%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%2529][Archlinux Wiki - acpid]]
- [[http://ja.wikipedia.org/wiki/MacBook_Air][MacBook Air]]
- [[https://wiki.archlinux.org/index.php/Powertop][Archlinux Wiki - Powertop]]
- [[%20http://blog.drmn.jp/2014/03/clamav.html][ClamAV のオンアクセス スキャン]]
