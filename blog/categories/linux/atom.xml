<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2015-08-07T16:13:34+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]Firefox起動時にプロファイル選択出来るようにする]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-07-%5Btips%5D%5Blinux%5Dfirefox%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%AB%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E9%81%B8%E6%8A%9E%E5%87%BA%E6%9D%A5%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B.html"/>
    <updated>2015-08-07T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]firefox起動時にプロファイル選択出来るようにする</id>
    <content type="html"><![CDATA[<p>
Web開発でクリーンなテスト環境が必要とする場面が結構あります。
普段ご利用しているブラウザの設定リセットやキャッシュクリアは平気に出来ないでしょう。
</p>




<p>
この問題を解決するために、ブラウザにマルチプロファイル機能が提供してくれる。
</p>




<p>
例えばFirefoxに <code>--new-instance</code> オプションを付けて起動時すると下記のようなプロファイ
ル選択ダイアログが表示されて、「Create Profile」で新しいプロファイルを持ちたFirefoxが
起動される。
</p>




<div class="figure">
<p><img src="img/2015-08-07-firefox-new-instance.png" alt="2015-08-07-firefox-new-instance.png" />
</p>
</div>




<p>
自分の環境では下記のdesktopファイルを追加することでランチャーからいつも起動出来るよう
にしています。
</p>




<p>
<code>.local/share/applications/myfirefox.desktop</code>
</p>


<pre class="example">
[Desktop Entry]
Name=MyFirefox
GenericName=Web Browser
GenericName[ja]=ウェブ・ブラウザ
Comment[ja]=ウェブを閲覧します
Exec=firefox --new-instance %u
Terminal=false
Type=Application
Icon=firefox
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;
StartupNotify=true
Actions=NewTab;NewWindow;NewPrivateWindow;

[Desktop Action NewTab]
Name[ja]=新しいタブ

[Desktop Action NewWindow]
Name[ja]=新しいウィンドウ

[Desktop Action NewPrivateWindow]
Name[ja]=新しいプライベートウィンドウ
</pre>




<ul class="org-ul">
<li><a href="https://support.mozilla.org/ja/kb/profile-manager-create-and-remove-firefox-profiles">プロファイルマネージャを使用して、Firefox のプロファイルを作成または削除する</a>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Memo][Linux]bash環境にpecoを導入しました]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-02-%5Bmemo%5D%5Blinux%5Dbash%E7%92%B0%E5%A2%83%E3%81%ABpeco%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F.html"/>
    <updated>2015-08-02T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[memo][linux]bash環境にpecoを導入しました</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. peco で何か便利なのか</a></li>
<li><a href="#sec-2">2. 導入手順</a></li>
<li><a href="#sec-3">3. bash履歴の検索をpecoインタフェースにする</a></li>
<li><a href="#sec-4">4. pecoインタフェースのキーバンディングをカスタマイズする</a></li>
<li><a href="#sec-5">5. 参考</a></li>
</ul>
</div>
</div>


<p>
以前から <a href="https://github.com/mooz/percol">percol</a> の流行りに気になっていたが、python製のため導入が面倒さそうなので保留
しました。最近、percolを元にgolangで書かれたpecoが出てきて導入しやすくなったと感じて
手を入れました。
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> peco で何か便利なのか</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>コマンド出力結果のインクリメントサーチが出来る
<ul class="org-ul">
<li>Bashコマンド履歴のインクリメントサーチが出来る
</li>
<li>プロンプトでログファイルのインクリメントサーチが出来る
</li>
<li>パイプラインでたのコマンドとの連携で色々出来ると思います
</li>
</ul>
</li>
</ul>

<p>
具体なイメージはgithubの <a href="https://github.com/peco/peco/blob/master/README.md">README</a> が分かりやすい
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 導入手順</h2>
<div class="outline-text-2" id="text-2">
<p>
一番簡単なのは <code>peco</code> バイナリを <code>PATH</code> に通る。
</p>
<pre class="example">
$ wget https://github.com/peco/peco/releases/download/v0.3.3/peco_linux_amd64.tar.gz
$ tar xzvf peco_linux_amd64.tar.gz 
$ tree peco_linux_amd64
peco_linux_amd64
├── Changes
├── README.md
└── peco

0 directories, 3 files
$ export PATH=`pwd`/peco_linux_amd64:$PATH
$ peco --version
peco: v0.3.3
</pre>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> bash履歴の検索をpecoインタフェースにする</h2>
<div class="outline-text-2" id="text-3">
<p>
下記内容を <code>~/.bashrc</code> に追加する
</p>
<pre class="example">
# 重複履歴を無視
export HISTCONTROL=ignoreboth:erasedups

# 履歴保存対象から外す
export HISTIGNORE="fg*:bg*:history*:wmctrl*:exit*:ls -al:cd ~"

# コマンド履歴にコマンドを使ったの時刻を記録する
export HISTTIMEFORMAT='%Y%m%d %T '

export HISTSIZE=10000

# settings for peco
_replace_by_history() {
    local l=$(HISTTIMEFORMAT= history | cut -d" " -f4- | tac | sed -e 's/^\s*[0-9]*    \+\s\+//' | peco --query "$READLINE_LINE")
    READLINE_LINE="$l"
    READLINE_POINT=${#l}
}
bind -x '"\C-r": _replace_by_history'
bind    '"\C-xr": reverse-search-history'
</pre>

<p>
これで、 <code>Ctrl-r</code> で起動されたBash履歴検索がpecoインタフェースに変わる。
元の検索インタフェースは <code>Ctrl-x r</code> で起動することも出来る。
</p>

<video controls>
   <source src="video/2015-08-05_peco_demo.mp4">
</video>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> pecoインタフェースのキーバンディングをカスタマイズする</h2>
<div class="outline-text-2" id="text-4">
<pre class="example">
$ mkdir ~/.config/peco
$ touch ~/.config/peco/config.json
$ cat &lt;&lt;_EOT_ &gt; ~/.config/peco/config.json
{
    "Keymap": {
        "C-p": "peco.SelectPrevious",
        "C-n": "peco.SelectNext",
        "C-g": "peco.Cancel",
        "C-v": "peco.SelectNextPage",
        "C-@": "peco.ToggleSelectionAndSelectNext"
    }
}
_EOT_
</pre>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="http://qiita.com/xtetsuji/items/05f6f4c1b17854cdd75b">pecoの基礎の基礎</a>
</li>
<li><a href="http://qiita.com/syui/items/f2fe51d00378210d10b1">コマンドラインでの選択的インターフェイスについて考える</a>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]Sambaユーザのパスワード変更]]></title>
    <link href="http://luozengbin.github.io/blog/2015-07-23-%5Btips%5D%5Blinux%5Dsamba%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%AE%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E5%A4%89%E6%9B%B4.html"/>
    <updated>2015-07-23T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]sambaユーザのパスワード変更</id>
    <content type="html"><![CDATA[<p>
普段はLinuxで作業しているけど、MS系のドキュメントメンテ作業はWindowsでやらざるを得な
いのでSambaでLinux側のコンテンツをWindowsに共有するようにしていました。
</p>




<p>
ところで先週Windows端末再セットアップしたため、Sambaサーバに接続時にパスワードが聞か
れた時が、すっかり忘れましたのでSamba側でパスワードリセットをしました。
</p>




<ul class="org-ul">
<li>パスワードリセットコマンド（ユーザ登録コマンドと一緒）
<pre class="example">
$ sudo pdbedit -a -u test001
new password:
retype new password:
</pre>
</li>

<li>ついにパスワード情報の格納先を確認しました
<pre class="example">
$ pdbedit -L
tdbsam_open: Failed to open/create TDB passwd [/var/lib/samba/private/passdb.tdb]
tdbsam_getsampwnam: failed to open /var/lib/samba/private/passdb.tdb!
User Search failed!
</pre>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]Dockerのプロキシ設定]]></title>
    <link href="http://luozengbin.github.io/blog/2015-07-23-%5Btips%5D%5Blinux%5Ddocker%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E8%A8%AD%E5%AE%9A.html"/>
    <updated>2015-07-23T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]dockerのプロキシ設定</id>
    <content type="html"><![CDATA[<p>
基本は本家のドキュメントを見ろう！
</p>




<p>
<a href="https://docs.docker.com/articles/systemd/">https://docs.docker.com/articles/systemd/</a>
</p>




<p>
ここでは Acrh Linx で確認された手順を記録する。
</p>




<p>
社内はフォワードプロキシ経由で外と繋ぐなので、デフォルトでは通らない ;-(
</p>


<pre class="example">
$ docker search oraclelinux
Error response from daemon: Get https://index.docker.io/v1/search?q=oraclelinux: dial tcp 54.174.226.171:443: no route to host
</pre>




<p>
<code>/etc/systemd/system/&lt;サービスID&gt;.d/</code> 配下に環境変数の上書きファイルを定義し、サービ
スをリロードするだけです。
</p>


<pre class="example">
$ sudo mkdir /etc/systemd/system/docker.service.d
$ sudo touch /etc/systemd/system/docker.service.d/http-proxy.conf
$ sudo nano /etc/systemd/system/docker.service.d/http-proxy.conf
[Service]
Environment="HTTP_PROXY=http://*********************:8081"
Environment="HTTPS_PROXY=http://*********************:8081"
$ sudo systemctl daemon-reload
$ sudo systemctl restart docker
$ docker search oraclelinux
NAME                                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
oraclelinux                               Oracle Linux is an open-source operating s...   46        [OK]       
oracle/oraclelinux                        Oracle Linux is an open-source operating s...   16                   [OK]
tvierling/oraclelinux                     Oracle Linux base images, yum-updated to l...   2                    [OK]
centminmod/oraclelinux65base              Oracle Linux 6.5 base 1.57GB image              1                    
avmiller/oraclelinux                      Personal Oracle Linux Test Images (Non-pro...   0                    
kiwenlau/oraclelinux                                                                      0                    
talberto/oraclelinux                                                                      0                    
ksasi/oraclelinux                                                                         0                    
saltfactory/oraclelinux                   Oracle Linux                                    0                    
arpagaus/oraclelinux                                                                      0                    
joseperez/oraclelinux-lamp                oraclelinux 7.0 con mariadb, apache y php.      0                    
jinyan/oraclelinux                        Oracle Linux 6.6                                0                    
hootjr/oraclelinux                                                                        0                    
poisoncreed/oraclelinux-base-with-httpd                                                   0                    
bdpzone/bdporaclelinux6                   Big Data Partnership Development Environme...   0                    [OK]
dyoung522/oracle-ruby                     OracleLinux running Ruby                        0                    [OK]
bdpzone/bdporaclelinux7                   Big Data Partnership Development Environme...   0                    [OK]
mlechner/oraclelinux7                     GIS tools on Oracle Linux 7                     0                    
tehmul/oraclelinux6-tc                    Oracle Linux 6+Oracle Server JRE 8+ Apache...   0                    
calaniz/oraclelinux                                                                       0                    
dyoung522/oraclelinux-dev                 OracleLinux with development environment        0                    [OK]
hedlund/oraclelinux                                                                       0                    [OK]
florentbenoit/oraclelinux-jdk7                                                            0                    [OK]
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]journaldエラーログをメールで通知する]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-28-%5Btips%5D%5Blinux%5Djournald%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%AD%E3%82%B0%E3%82%92%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%A7%E9%80%9A%E7%9F%A5%E3%81%99%E3%82%8B.html"/>
    <updated>2015-06-28T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]journaldエラーログをメールで通知する</id>
    <content type="html"><![CDATA[<p>
systemdを採用しているdistroのシステムログがjournaldを一元管理してくれる。
</p>




<ul class="org-ul">
<li><a href="http://enakai00.hatenablog.com/entry/20141130/1417310904">RHEL7/CentOS7のjournaldについてのもろもろ</a>
</li>
<li><a href="http://www.school.ctc-g.co.jp/columns/nakai/nakai56.html">第56回　RHEL7/CentOS7のjournaldでシステムログを一元管理 (中井悦司)</a>
</li>
</ul>




<p>
ただし、journaldにエラーログを通知する機能が持っていないため監視通知のし掛けが必要で
す。
</p>




<ol class="org-ol">
<li>journaldログをsyslogに転送し、従来のsyslog監視方法を適用する
</li>
<li>独自のスクリプトで実現する
</li>
</ol>




<p>
自宅のサーバは下記スクリプトでエラーログの通知機能を実現しています。
</p>




<p>
<code>/etc/cron.hourly/journal_error</code>
</p>


<div class="org-src-container">

<pre class="src src-sh"><span style="color: #00cd66;">#</span><span style="color: #00cd66;">!/bin/</span><span style="color: #ffffff;">sh</span>

<span style="color: #00cd66;"># </span><span style="color: #00cd66;">&#19968;&#26178;&#20197;&#20869;&#12398;&#12456;&#12521;&#12540;&#12525;&#12464;&#12434;&#27161;&#28310;&#20986;&#21147;&#12392;/var/log/journal_error&#12501;&#12449;&#12452;&#12523;&#12408;&#20986;&#21147;&#12377;&#12427;</span>
journalctl -o short-iso -p err --since -1hours 2&gt;/dev/null | tail -n+2 | tee -a /var/log/journal_error
</pre>
</div>




<p>
journalctl コマンドを駆使して１時間以内のエラーログを標準出力に出力するスクリプト。
これをcronの時間単位ジョブディレクトリ <code>/etc/cron.hourly</code> に登録する。
あとはcronのメール通知機能を有効化するだけです。
</p>




<p>
cronのメール通知先は <code>/etc/cron.d/0hourly</code> の <code>MAILTO</code> 項目にて指定する。
</p>


<div class="org-src-container">

<pre class="src src-sh">$ cat /etc/cron.d/0hourly
<span style="color: #00cd66;"># </span><span style="color: #00cd66;">Run the hourly jobs</span>
<span style="color: #9acd32;">SHELL</span>=/bin/bash
<span style="color: #9acd32;">PATH</span>=/sbin:/bin:/usr/sbin:/usr/bin
<span style="color: #9acd32;">MAILTO</span>=&lt;&lt;&#12513;&#12540;&#12523;&#12398;&#36865;&#20449;&#20808;&#12434;&#12371;&#12371;&#12395;&#26360;&#12367;&gt;&gt;
<span style="color: #ffff00; font-weight: bold;">1 * * * * root run-parts /etc/cron.hourly</span>
</pre>
</div>

]]></content>
  </entry>
  
</feed>
