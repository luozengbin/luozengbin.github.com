<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2015-07-15T23:47:02+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[tips][Linux]journaldエラーログをメールで通知する]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-28-%5Btips%5D%5Blinux%5Djournald%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%AD%E3%82%B0%E3%82%92%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%A7%E9%80%9A%E7%9F%A5%E3%81%99%E3%82%8B.html"/>
    <updated>2015-06-28T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][linux]journaldエラーログをメールで通知する</id>
    <content type="html"><![CDATA[<p>
systemdを採用しているdistroのシステムログがjournaldを一元管理してくれる。
</p>




<ul class="org-ul">
<li><a href="http://enakai00.hatenablog.com/entry/20141130/1417310904">RHEL7/CentOS7のjournaldについてのもろもろ</a>
</li>
<li><a href="http://www.school.ctc-g.co.jp/columns/nakai/nakai56.html">第56回　RHEL7/CentOS7のjournaldでシステムログを一元管理 (中井悦司)</a>
</li>
</ul>




<p>
ただし、journaldにエラーログを通知する機能が持っていないため監視通知のし掛けが必要で
す。
</p>




<ol class="org-ol">
<li>journaldログをsyslogに転送し、従来のsyslog監視方法を適用する
</li>
<li>独自のスクリプトで実現する
</li>
</ol>




<p>
自宅のサーバは下記スクリプトでエラーログの通知機能を実現しています。
</p>




<p>
<code>/etc/cron.hourly/journal_error</code>
</p>


<div class="org-src-container">

<pre class="src src-sh"><span style="color: #00cd66;">#</span><span style="color: #00cd66;">!/bin/</span><span style="color: #ffffff;">sh</span>

<span style="color: #00cd66;"># </span><span style="color: #00cd66;">&#19968;&#26178;&#20197;&#20869;&#12398;&#12456;&#12521;&#12540;&#12525;&#12464;&#12434;&#27161;&#28310;&#20986;&#21147;&#12392;/var/log/journal_error&#12501;&#12449;&#12452;&#12523;&#12408;&#20986;&#21147;&#12377;&#12427;</span>
journalctl -o short-iso -p err --since -1hours 2&gt;/dev/null | tail -n+2 | tee -a /var/log/journal_error
</pre>
</div>




<p>
journalctl コマンドを駆使して１時間以内のエラーログを標準出力に出力するスクリプト。
これをcronの時間単位ジョブディレクトリ <code>/etc/cron.hourly</code> に登録する。
あとはcronのメール通知機能を有効化するだけです。
</p>




<p>
cronのメール通知先は <code>/etc/cron.d/0hourly</code> の <code>MAILTO</code> 項目にて指定する。
</p>


<div class="org-src-container">

<pre class="src src-sh">$ cat /etc/cron.d/0hourly
<span style="color: #00cd66;"># </span><span style="color: #00cd66;">Run the hourly jobs</span>
<span style="color: #9acd32;">SHELL</span>=/bin/bash
<span style="color: #9acd32;">PATH</span>=/sbin:/bin:/usr/sbin:/usr/bin
<span style="color: #9acd32;">MAILTO</span>=&lt;&lt;&#12513;&#12540;&#12523;&#12398;&#36865;&#20449;&#20808;&#12434;&#12371;&#12371;&#12395;&#26360;&#12367;&gt;&gt;
<span style="color: #ffff00; font-weight: bold;">1 * * * * root run-parts /etc/cron.hourly</span>
</pre>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[まとめ]Linuxシステム時刻について]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-27-%5B%E3%81%BE%E3%81%A8%E3%82%81%5Dlinux%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%99%82%E5%88%BB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html"/>
    <updated>2015-06-27T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[まとめ]linuxシステム時刻について</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. ハードウェアクロック／システムクロックの違い</a></li>
<li><a href="#sec-2">2. 時刻の表示仕様</a></li>
<li><a href="#sec-3">3. 時刻表示／調整関連コマンド</a>
<ul>
<li><a href="#sec-3-1">3.1. NTP時刻同期化を自動化する</a></li>
<li><a href="#sec-3-2">3.2. タイムゾーンの変更</a></li>
<li><a href="#sec-3-3">3.3. ハードウェアクロックとの同期化</a></li>
</ul>
</li>
<li><a href="#sec-4">4. 時刻関連ファイル</a></li>
<li><a href="#sec-5">5. デュアルブートの注意点</a></li>
<li><a href="#sec-6">6. NTPサーバの構築</a></li>
<li><a href="#sec-7">7. システムコール</a></li>
<li><a href="#sec-8">8. カーネルの実装について</a></li>
<li><a href="#sec-9">9. 参考</a></li>
</ul>
</div>
</div>


<p>
Linuxシステム時刻に関わる知識やリソースのまとめです。
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> ハードウェアクロック／システムクロックの違い</h2>
<div class="outline-text-2" id="text-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">クロック種別</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">ハードウェアクロック</td>
<td class="left">* マザーボード上のICによって提供される時計です。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 通常は電池でバックアップして駆動されるので、電源をお落としても時計が進みます。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* RTC（Real Time Clock）、BIOS、CMOSクロックとも呼ばれる。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">システムクロック</td>
<td class="left">* Linux カーネルの内部に存在している時計で、 タイマ割り込みによって駆動されている</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* Linux システムは起動時に一度だけハードウェア・クロックを参照し、 システム・クロックを設定する。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 精度の高いクロック、1GHz以上のCPUの場合1クロックは1ナノ秒のなります。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 時刻は1970/01/01T00:00:00からの経過時間を秒単位／ナノ秒単位で保持される。</td>
</tr>
</tbody>
</table>

<p>
ハードウェアクロック持っていないボードも存在する。RaspberryPiボードはその一つです、
RTCが必要な場合、別途RTCモジュールを導入しなければいけません。<a href="#fn2">2</a>
</p>

<p>
RaspberryPiで <code>hwclock</code> コマンドでハードウェアクロックを参照すると <code>/dev/rtc</code> デバイ
スがない旨のメッセージが表示された。
</p>
<pre class="example">
$ sudo hwclock --debug
hwclock from util-linux 2.26.2
hwclock: cannot open /dev/rtc: No such file or directory
No usable clock interface found.
hwclock: Cannot access the Hardware Clock via any known method.
</pre>

<p>
RaspberryPiはNTPサーバから時刻同期のし掛けが必要です。そしないとシステムクロックが
POSIXにおける紀元時刻(Epoch; 1970-01-01 00:00:00 +0000 (UTC))に設定されてしまう。
</p>

<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 時刻の表示仕様</h2>
<div class="outline-text-2" id="text-2">
<p>
systemdに導入された <code>timdatectl</code> コマンドでシステム時刻の各種表示形式を確認する。
</p>
<pre class="example">
$ timedatectl
      Local time: 土 2015-06-27 23:55:12 JST
  Universal time: 土 2015-06-27 14:55:12 UTC
        RTC time: 土 2015-06-27 14:55:12
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
各時刻項目について
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">正式名称</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Universal time</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E5%8D%94%E5%AE%9A%E4%B8%96%E7%95%8C%E6%99%82">協定世界時</a> (UTC)</td>
<td class="left">UTC は GMT (グリニッジ標準時, Greenwich Mean Time) とも言われます</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">協定世界時は、国際度量衡局 (BIPM) が維持する時刻系であり、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">協定された標準周波数と報時信号発射の基礎になっている。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Local time</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E6%99%82">標準時</a></td>
<td class="left">ある国または広い地域が共通で使う地方時、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">世界各地の標準時は協定世界時 (UTC) を基準として決めている。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">例えば、日本標準時 (JST) は協定世界時より9時間進んでおり、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">「+0900 (JST)」のように表示する。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">DST</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E5%A4%8F%E6%99%82%E9%96%93">夏時間</a></td>
<td class="left">daylight saving time</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">1年のうち夏を中心とした期間に、太陽の出ている時間帯を有効に利用する目</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">的で、標準時を1時間進める制度、またはその進められた時刻のこと。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">緯度が高く夏の日照時間が長い欧米諸国などで多く導入されている。<a href="#fn10">10</a></td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">Linuxシステムにタイムゾーンを指定すれば自動的にDST時間を表示してくれる。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">RTC time</td>
<td class="left">リアルタイムクロック</td>
<td class="left">前述のハードウェアクロックです。</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 時刻表示／調整関連コマンド</h2>
<div class="outline-text-2" id="text-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">コマンド名</th>
<th scope="col" class="left">概要</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">date</td>
<td class="left">システムクロックの表示／変更</td>
</tr>

<tr>
<td class="left">hwclock</td>
<td class="left">ハードウェアクロックの表示／変更</td>
</tr>

<tr>
<td class="left">ntpdate</td>
<td class="left">NTPサーバから時刻を同期化するクライアントツール</td>
</tr>

<tr>
<td class="left">timedatectl</td>
<td class="left">上記機能全て統括的に行えるツール</td>
</tr>

<tr>
<td class="left">adjtimex</td>
<td class="left">Displays or sets the kernel time variable</td>
</tr>
</tbody>
</table>

<p>
時刻の表示／調整／同期化などは <code>timedatectl</code> で全て出来る。
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> NTP時刻同期化を自動化する</h3>
<div class="outline-text-3" id="text-3-1">
<pre class="example">
★set-ntpオプションで有効／無効を切り替える
$ sudo timedatectl set-ntp true

★状態確認
$ sudo timedatectl status
      Local time: 日 2015-06-28 00:19:26 JST
  Universal time: 土 2015-06-27 15:19:26 UTC
        RTC time: 土 2015-06-27 15:19:26
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes                      ★NTP時刻同期化有効の状態
NTP synchronized: yes                      ★NTP時刻同期化済み
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
上記コマンドより <code>systemd-timesyncd.service</code> が有効化される。
<code>/usr/lib/systemd/systemd-timesyncd</code> デーモンプロセスがNTPクライアントとして動作し定
期的にNTPサーバから時刻を同期化する。
</p>
<pre class="example">
$ systemctl status systemd-timesyncd.service
● systemd-timesyncd.service - Network Time Synchronization
   Loaded: loaded (/usr/lib/systemd/system/systemd-timesyncd.service; enabled; vendor preset: enabled)
   Active: active (running) since 土 2015-06-27 19:29:29 JST; 4h 57min ago
     Docs: man:systemd-timesyncd.service(8)
 Main PID: 8787 (systemd-timesyn)
   Status: "Using Time Server 213.239.154.12:123 (0.arch.pool.ntp.org)."
   CGroup: /system.slice/systemd-timesyncd.service
           └─8787 /usr/lib/systemd/systemd-timesyncd

 6月 27 19:29:29 mimi systemd[1]: Starting Network Time Synchronization...
 6月 27 19:29:29 mimi systemd[1]: Started Network Time Synchronization.
 6月 27 20:45:20 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 202.234.64.222:123 (0.arch.pool.ntp.org).
 6月 27 20:45:30 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 157.7.153.56:123 (0.arch.pool.ntp.org).
 6月 27 20:45:40 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 108.61.223.189:123 (0.arch.pool.ntp.org).
 6月 27 20:45:51 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 133.100.11.8:123 (0.arch.pool.ntp.org).
</pre>

<p>
NTPサーバは <code>/etc/systemd/timesyncd.conf</code> にて指定出来る。
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> タイムゾーンの変更</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Asia/Tokyoタイムゾーンの指定
</p>
<pre class="example">
★利用可能なゾーンの表示
$ timedatectl list-timezones
Africa/Abidjan
Africa/Accra
Africa/Addis_Ababa
Africa/Algiers
Africa/Asmara
Africa/Bamako
Africa/Bangui
Africa/Banjul
Africa/Bissau
Africa/Blantyre
（中略）

★タイムゾーンの指定、/etc/localtimeのリンク先が変わる
$ timedatectl set-timezone Asia/Tokyo

★タイムゾーンの確認
$ timedatectl status
      Local time: 日 2015-06-28 17:57:04 JST
  Universal time: 日 2015-06-28 08:57:04 UTC
        RTC time: 日 2015-06-28 08:57:04
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
America/Los_Angelesタイムゾーンの指定、「＊」部分は夏時間です。
</p>
<pre class="example">
  |$ timedatectl  set-timezone America/Los_Angeles
  |[akira@mimi ~]$ timedatectl status
  |      Local time: 日 2015-06-28 01:54:09 PDT
  |  Universal time: 日 2015-06-28 08:54:09 UTC
  |        RTC time: 日 2015-06-28 08:54:09
  |       Time zone: America/Los_Angeles (PDT, -0700)
  |     NTP enabled: yes
  |NTP synchronized: yes
  | RTC in local TZ: no
＊|      DST active: yes
＊| Last DST change: DST began at
＊|                  日 2015-03-08 01:59:59 PST
＊|                  日 2015-03-08 03:00:00 PDT
＊| Next DST change: DST ends (the clock jumps one hour backwards) at
＊|                  日 2015-11-01 01:59:59 PDT
＊|                  日 2015-11-01 01:00:00 PST
</pre>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> ハードウェアクロックとの同期化</h3>
<div class="outline-text-3" id="text-3-3">
<p>
ハードウェアクロックの時刻をUTCとして扱うように <code>/etc/adjtime</code> ファイルを更新する。
また、システムクロック時刻をハードウェアクロックに書き戻す。
</p>
<pre class="example">
$ timedatectl set-local-rtc false
</pre>


<p>
<code>/etc/adjtime</code> ファイルの３行目がUTCでマークされた。
</p>
<pre class="example">
$ cat /etc/adjtime
0.000000 0 0.000000
0
UTC                                ★ハードウェアクロックがUTC時刻として扱う
</pre>

<p>
RTC が localtime だった場合予期せぬバグを引き起こす可能性があるため、最近のカーネルは
<code>/etc/adjtime</code> ファイルに設定値がない場合 RTC を UTC としてみなします。 <code>hwclock</code> コ
マンドに&#x2013;debugオプションを付けるとハードウェアクロックがどうのように扱われるかを確認
することが出来ます。
</p>

<p>
ハードウェアクロックの値をUTC時刻として扱い、表示時に <code>/etc/localtime</code> に持っている
タイムゾーン情報を元にローカル時刻で表示する。
</p>
<pre class="example">
$ hwclock --show --debug
hwclock from util-linux 2.26.2
クロックの /dev インターフェイス を使用中。
ハードウェアの時刻が UTC に設定されているものと仮定します。
クロックティックを待っています...
...クロックティックを取得しました
ハードウェアの時計から読み込んだ時刻: 2015/06/27 15:44:18
ハードウェアの時刻値 : 2015/06/27 15:44:18 = 1969 年から 1435419858 秒経過
Time since last adjustment is 1435419858 seconds
Calculated Hardware Clock drift is 0.000000 seconds
2015年06月28日 00時44分17秒  .665140 秒
</pre>

<p>
以下 <code>/etc/adjtime=</code> の設定値を明示された場合 <code>hwclock</code> の出力です。「*」部分が差分で
す。
</p>
<pre class="example">
 |$ hwclock -r --debug
 |hwclock from util-linux 2.26.2
 |クロックの /dev インターフェイス を使用中。
*|直前のズレの修正は、 1969 年から 0 秒経過した時点で行なわれました
*|直前の調整は 1969 年から 0 秒経過した時点で行なわれました
*|ハードウェアの時刻は UTC です
 |ハードウェアの時刻が UTC に設定されているものと仮定します。
 |クロックティックを待っています...
 |...クロックティックを取得しました
 |ハードウェアの時計から読み込んだ時刻: 2015/06/27 16:05:20
 |ハードウェアの時刻値 : 2015/06/27 16:05:20 = 1969 年から 1435421120 秒経過
 |Time since last adjustment is 1435421120 seconds
 |Calculated Hardware Clock drift is 0.000000 seconds
 |2015年06月28日 01時05分19秒  .432450 秒
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 時刻関連ファイル</h2>
<div class="outline-text-2" id="text-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">ファイル</th>
<th scope="col" class="left">役割</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">/etc/localtime</td>
<td class="left">ローカル時刻（標準時）に適用するタイムゾーン情報</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">/etc/adjtime</td>
<td class="left">ハードウェアクロック情報を保持するファイル、詳細について</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">man hwclockのThe Adjust Functionセクションにて確認出来る</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">/dev/rtc</td>
<td class="left">ハードウェアクロックデバイスファイル</td>
</tr>

<tr>
<td class="left">/dev/rtc0</td>
<td class="left">同上</td>
</tr>

<tr>
<td class="left">/dev/misc/rtc</td>
<td class="left">同上</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> デュアルブートの注意点</h2>
<div class="outline-text-2" id="text-5">
<p>
以下 からの抜粋
</p>
<pre class="example">
windows はハードウェア クロックのタイムゾーンを、暗黙裡にローカル タイムであると認識
します。 Linux のようにタイムゾーンを選択(UTC or ローカルタイム)できる機能はありませ
ん。

そのため windows を含むマルチ ブート環境では、ハードウェア クロックのタイムゾーンを
UTCとすることは不可能(ローカルタイム固定)で、他のOSが windows の作法に合わせる必要が
あります。
</pre>

<p>
日本の場合、システムをWindowsモードで起動したとして、次回Linux起動した後のシステム時
刻がローカル時刻より９時間早まる。
</p>

<p>
回避方法: <a href="https://archlinuxjp.kusakata.com/wiki/%25E6%2599%2582%25E5%2588%25BB#Windows_.E3.81.A7_UTC_.E3.82.92.E4.BD.BF.E3.81.86">Windows で UTC を使う</a>
</p>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> NTPサーバの構築</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><a href="https://archlinuxjp.kusakata.com/wiki/Network_Time_Protocol_daemon">Network Time Protocol daemon</a>
</li>
<li><a href="http://qiita.com/yunano/items/7883cf295f91f4ef716b">新しいNTPクライアント＆サーバ、chrony</a>
</li>
<li><a href="http://jp.fujitsu.com/platform/server/sparc/manual/notes/pdf/ntpguide.pdf">NTP運用ガイド for Oracle Solaris</a>
</li>
<li><a href="http://nayamibito.hatenablog.com/entry/2013/12/31/161027">Linux学習記　その3　NTPについて学んでみる。</a>
</li>
<li><a href="http://d.hatena.ne.jp/incarose86/touch/20110505/1312522379">NTP設定</a>
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> システムコール</h2>
<div class="outline-text-2" id="text-7">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">関数名</th>
<th scope="col" class="left">機能概要</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/gettimeofday.2.html">gettimeofday</a></td>
<td class="left">システム時刻を取得する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/gettimeofday.2.html">settimeofday</a></td>
<td class="left">システム時刻を設定する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">time</td>
<td class="left">秒単位の時間を得る</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man3/strftime.3.html">strftime</a></td>
<td class="left">日付および時刻の文字列への変換</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/adjtimex.2.html">adjtimex</a></td>
<td class="left">カーネルの時計を調整する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man3/clock.3.html">clock</a></td>
<td class="left">プログラムの使用したプロセッサ時間の近似値を返す</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">asctime</td>
<td class="left">日付と時刻を要素別の時刻や ASCII に変換する</td>
</tr>

<tr>
<td class="left">ctime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">gmtime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">localtime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">mktime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">asctime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">ctime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">gmtime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">localtime_r</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> カーネルの実装について</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li><a href="http://enakai00.hatenablog.com/entry/20111117/1321508379">Ticklessカーネルとクロックソースに関するお話</a>
</li>
<li><a href="http://www.valinux.co.jp/technologylibrary/document/linuxkernel/timer0002/#n1">カーネルにおけるタイマー事情 ～第2回 カーネル内の時刻/時間関連サブシステム～</a>
</li>
<li><a href="https://www.ujiya.net/linux/067">jiffies更新を追いかける</a>
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> 参考</h2>
<div class="outline-text-2" id="text-9">
</div><ol class="org-ol"><li><a id="fn1" name="fn1"></a><a id="sec-9-0-0-1" name="sec-9-0-0-1"></a><a href="http://www.atmarkit.co.jp/ait/articles/0812/26/news120.html">Linux時刻管理の仕組みと設定</a><br  /><div class="outline-text-5" id="text-fn1">
</div>
</li>
<li><a id="fn2" name="fn2"></a><a id="sec-9-0-0-2" name="sec-9-0-0-2"></a><a href="http://qiita.com/key/items/06c2915de55d6155aa54">RaspberryPiにRTCモジュールを搭載して、ハードウェア起動時に時刻を合わせる</a><br  /><div class="outline-text-5" id="text-fn2">
</div>
</li>
<li><a id="sec-9-0-0-3" name="sec-9-0-0-3"></a><a href="http://hs-it-notes.blogspot.jp/2014/01/raspberry-pi.html">Raspberry Piにリアルタイムクロックをインストールする</a><br  /></li>
<li><a id="sec-9-0-0-4" name="sec-9-0-0-4"></a><a href="http://linuxjm.osdn.jp/html/util-linux/man8/hwclock.8.html">HWCLOCK 日本語MAN ページ</a><br  /></li>
<li><a id="sec-9-0-0-5" name="sec-9-0-0-5"></a><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man4/rtc.4.html">RTC 日本語MAN ページ</a><br  /></li>
<li><a id="sec-9-0-0-6" name="sec-9-0-0-6"></a><a href="https://www.kernel.org/doc/Documentation/rtc.txt">Kernel Document - rtx.txt</a><br  /></li>
<li><a id="sec-9-0-0-7" name="sec-9-0-0-7"></a><a href="http://archive.linux.or.jp/JF/JFdocs/Clock/time-tracking.html">Linux はどのように時間を計っているのか</a><br  /></li>
<li><a id="sec-9-0-0-8" name="sec-9-0-0-8"></a><a href="https://wiki.archlinux.org/index.php/Time">Archlinu - Time</a><br  /></li>
<li><a id="sec-9-0-0-9" name="sec-9-0-0-9"></a><a href="http://park12.wakwak.com/~eslab/pcmemo/clock/clock3.html">パソコンの時計　ハードウェア クロックとシステム クロック</a><br  /></li>
<li><a id="fn10" name="fn10"></a><a id="sec-9-0-0-10" name="sec-9-0-0-10"></a><a href="http://www.time-j.net/uc/dst/">世界の国のサマータイムの導入状況について</a><br  /><div class="outline-text-5" id="text-fn10">
</div>
</li></ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]VirtualBox HostOnly on Linux]]></title>
    <link href="http://luozengbin.github.io/blog/2015-02-06-%5B%E3%83%A1%E3%83%A2%5Dvirtualbox-hostonly-on-linux.html"/>
    <updated>2015-02-06T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]virtualbox-hostonly-on-linux</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. VirtualBox使用出来るネットワークアダプタ</a></li>
<li><a href="#sec-2">2. 複数アダプターユースケース</a></li>
<li><a href="#sec-3">3. ホストオンリーネットワークの追加手順</a>
<ul>
<li><a href="#sec-3-1">3.1. カーネルモジュールのロード</a></li>
<li><a href="#sec-3-2">3.2. ホストオンリーネットワークの追加</a></li>
<li><a href="#sec-3-3">3.3. アダプターと紐付ける</a></li>
</ul>
</li>
<li><a href="#sec-4">4. 参考</a></li>
</ul>
</div>
</div>


<p>
VirtualBox上で動く仮想マシンにデフォルトではNATネットワークアダプタが割り当てられてい
るため、Host OSとの通信ができないです。これを回避するために <code>ホストオンリーネットワー
ク</code> アダプターを使えば回避できる。最近のバージョン追加手順が変わったため、メモしてお
きます。
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> VirtualBox使用出来るネットワークアダプタ</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>NAT
VirtualBox のデフォルト設定。ゲスト OS からインターネットは繋がる。
ゲスト OS とホストOS 間は繋がらない。
</li>
<li>ブリッジネットワーク
ゲスト OS のネットワークがホスト OS と同じネットワークに繋がる。イン
ターネットに繋がり、ゲスト OS とホスト OS の間が繋がる。同じネットワー
ク上の他の PC からも見える。
</li>
<li>内部ネットワーク
仮想マシンを複数起動したときに、各マシン間を繋ぐためのネットワーク？
</li>
<li>ホストオンリーネットワーク
ホスト OS と ゲスト OS 間のネットワーク。ゲスト OS をローカルのウェ
ブサービス開発環境として利用する場合、次のようなネットワークだと都合
が良いです。
</li>
</ol>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 複数アダプターユースケース</h2>
<div class="outline-text-2" id="text-2">
<p>
アダプタ ２ に「ホストオンリーネットワーク」を割り当て、アダプ
タ １に「NAT」を割り当てます。こうすると、ホスト OS とゲスト OS 間が繋
がり、NAT によりゲスト OS から外部ネットへのアクセスもきるようになります。
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> ホストオンリーネットワークの追加手順</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> カーネルモジュールのロード</h3>
<div class="outline-text-3" id="text-3-1">
<pre class="example">
sudo modprobe vboxdrv
sudo modprobe vboxnetadp
sudo modprobe vboxnetflt
</pre>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> ホストオンリーネットワークの追加</h3>
<div class="outline-text-3" id="text-3-2">
<p>
ホストと通信するための仮想ブリッジを追加するイメージとなります。またこのブリッジに対
してIPの指定やDHCPサーバ機能の有効化も可能です。VirtualBoxのグローバル設定ダイアログか
らホストオンリーネットワークを追加する。
</p>

<ul class="org-ul">
<li>ホストオンリーネットワークの追加
<img src="img/2015-02-06-vbox001.png" alt="2015-02-06-vbox001.png" />
</li>

<li>ブリッジにIPを割り当てる
<img src="img/2015-02-06-vbox002.png" alt="2015-02-06-vbox002.png" />
</li>

<li>DHCPサーバを有効化する
<img src="img/2015-02-06-vbox003.png" alt="2015-02-06-vbox003.png" />
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> アダプターと紐付ける</h3>
<div class="outline-text-3" id="text-3-3">
<p>
仮想マシンのネットワークディバイス設定でアダプター２を有効化し、作成したホストオンリー
ネットワークと紐付ける。
  <img src="img/2015-02-06-vbox004.png" alt="2015-02-06-vbox004.png" />
</p>

<p>
仮想マシンを機能すると共に仮想ブリッジディバイスがホストOS上で自動的に生成されること
を確認する。
</p>

<pre class="example">
$ ifconfig
★省略..........

vboxnet0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.56.1  netmask 255.255.255.0  broadcast 192.168.56.255
        inet6 fe80::800:27ff:fe00:0  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 0a:00:27:00:00:00  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 107  bytes 18000 (17.5 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 参考</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/VirtualBox#Load_the_VirtualBox_kernel_modules">Load the VirtualBox kernel modules</a>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]自宅サーバディスク増設記録]]></title>
    <link href="http://luozengbin.github.io/blog/2014-11-16-%5B%E3%83%A1%E3%83%A2%5D%E8%87%AA%E5%AE%85%E3%82%B5%E3%83%BC%E3%83%90%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E5%A2%97%E8%A8%AD%E8%A8%98%E9%8C%B2.html"/>
    <updated>2014-11-16T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]自宅サーバディスク増設記録</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. ツールの整備</a></li>
<li><a href="#sec-3">3. ディスク情報確認</a></li>
<li><a href="#sec-4">4. 現在のパーティション構成</a></li>
<li><a href="#sec-5">5. 増設後のパーティション構成</a></li>
<li><a href="#sec-6">6. 増設手順</a>
<ul>
<li><a href="#sec-6-1">6.1. gdiskでパーティションを初期化する</a></li>
<li><a href="#sec-6-2">6.2. LVMパーティション再構成</a></li>
<li><a href="#sec-6-3">6.3. 増設結果を確認する</a></li>
</ul>
</li>
<li><a href="#sec-7">7. 参考情報</a></li>
</ul>
</div>
</div>


<p>
半年前、約1年ちょっと使った <a href="http://www.wdc.com/global/products/specs/?driveID=1092&language=6">WD Blue(WD10EZEX)</a> ディスクが壊れた (I/Oスピードが激遅い現
象が起きた)ため、RMA保証手続きで交換しました。交換で約1ヶ月かかる、かつサーバがRAID0構
成のため、代用品を購入し、復旧を実施した。RAM交換で届いたディスクがずっと置いたまま、
今日もう一台のNASサーバに増設を実施します。
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">OS</td>
<td class="left">CentOS Linux release 7.0.1406 (Core)</td>
</tr>

<tr>
<td class="left">/dev/sda</td>
<td class="left"><a href="http://www.crucial.com/usa/en/storage-ssd-mx100-ja">Crucial MX100 2.5インチ内蔵型SSD 256GB SATAIII</a></td>
</tr>

<tr>
<td class="left">/dev/sdb</td>
<td class="left">増設HDD: WD10EZEX [1TB SATA600 7200]</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> ツールの整備</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>hdparm</code> は HDD (SATA/IDE)デバイスのパフォーマンスとベンチマークのツールです｡
</p>
<pre class="example">
$ sudo yum install hdparm
</pre>

<p>
<code>sdparm</code> SCSIデバイスのパフォーマンスとベンチマークのツールです｡
</p>
<pre class="example">
$ sudo yum install sdparm
</pre>

<p>
GPTをサポートするパーティションリングツール
</p>
<pre class="example">
$ sudo yum install gdisk
</pre>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> ディスク情報確認</h2>
<div class="outline-text-2" id="text-3">
<p>
<code>/dev/sda</code> SSDのハード情報を確認する。
</p>
<pre class="example">
$ sudo hdparm -I /dev/sda

/dev/sda:

ATA device, with non-removable media
    Model Number:       Crucial_CT256MX100SSD1
    Serial Number:      ************
    Firmware Revision:  *****
    Transport:          Serial, ATA8-AST, SATA 1.0a, SATA II Extensions, SATA Rev 2.5, SATA Rev 2.6, SATA Rev 3.0
Standards:
    Used: unknown (minor revision code 0x0028)
    Supported: 9 8 7 6 5 
    Likely used: 9
Configuration:
    Logical     max current
    cylinders   16383   16383
    heads       16  16
    sectors/track   63  63
    --
    CHS current addressable sectors:   16514064
    LBA    user addressable sectors:  268435455
    LBA48  user addressable sectors:  500118192
    Logical  Sector size:                   512 bytes
    Physical Sector size:                  4096 bytes
    Logical Sector-0 offset:                  0 bytes
    device size with M = 1024*1024:      244198 MBytes
    device size with M = 1000*1000:      256060 MBytes (256 GB)
    cache/buffer size  = unknown
    Form Factor: 2.5 inch
    Nominal Media Rotation Rate: Solid State Device
Capabilities:
    LBA, IORDY(can be disabled)
    Queue depth: 32
    Standby timer values: spec'd by Standard, with device specific minimum
    R/W multiple sector transfer: Max = 16  Current = 16
    Advanced power management level: 254
    DMA: mdma0 mdma1 mdma2 udma0 udma1 udma2 udma3 udma4 udma5 *udma6 
         Cycle time: min=120ns recommended=120ns
    PIO: pio0 pio1 pio2 pio3 pio4 
         Cycle time: no flow control=120ns  IORDY flow control=120ns
Commands/features:
    Enabled Supported:
       *    SMART feature set
            Security Mode feature set
       *    Power Management feature set
       *    Write cache
       *    Look-ahead
       *    Host Protected Area feature set
       *    WRITE_BUFFER command
       *    READ_BUFFER command
       *    NOP cmd
       *    DOWNLOAD_MICROCODE
       *    Advanced Power Management feature set
            SET_MAX security extension
       *    48-bit Address feature set
       *    Device Configuration Overlay feature set
       *    Mandatory FLUSH_CACHE
       *    FLUSH_CACHE_EXT
       *    SMART error logging
       *    SMART self-test
       *    General Purpose Logging feature set
       *    WRITE_{DMA|MULTIPLE}_FUA_EXT
       *    64-bit World wide name
       *    IDLE_IMMEDIATE with UNLOAD
            Write-Read-Verify feature set
       *    WRITE_UNCORRECTABLE_EXT command
       *    {READ,WRITE}_DMA_EXT_GPL commands
       *    Segmented DOWNLOAD_MICROCODE
       *    Gen1 signaling speed (1.5Gb/s)
       *    Gen2 signaling speed (3.0Gb/s)
       *    Gen3 signaling speed (6.0Gb/s)
       *    Native Command Queueing (NCQ)
       *    Phy event counters
       *    NCQ priority information
       *    unknown 76[15]
       *    DMA Setup Auto-Activate optimization
            Device-initiated interface power management
            Asynchronous notification (eg. media change)
       *    Software settings preservation
            unknown 78[8]
       *    SMART Command Transport (SCT) feature set
       *    SCT Write Same (AC2)
       *    SCT Features Control (AC4)
       *    SCT Data Tables (AC5)
       *    reserved 69[4]
       *    reserved 69[7]
       *    Data Set Management TRIM supported (limit 8 blocks)
       *    Deterministic read ZEROs after TRIM
Security: 
    Master password revision code = 65534
        supported
    not enabled
    not locked
        frozen
    not expired: security count
        supported: enhanced erase
    2min for SECURITY ERASE UNIT. 2min for ENHANCED SECURITY ERASE UNIT.
Logical Unit WWN Device Identifier: ***************
    NAA     : 5
    IEEE OUI    : 00a075
    Unique ID   : ********
Checksum: correct
</pre>

<p>
<code>/dev/sdb</code> HDDのハード情報を確認する。
</p>
<pre class="example">
$ sudo hdparm -I /dev/sdb

/dev/sdb:

ATA device, with non-removable media
    Model Number:       WDC WD10EZEX-00RKKA0
    Serial Number:      WD-WMC**********
    Firmware Revision:  80.00A80
    Transport:          Serial, SATA 1.0a, SATA II Extensions, SATA Rev 2.5, SATA Rev 2.6, SATA Rev 3.0
Standards:
    Supported: 8 7 6 5 
    Likely used: 8
Configuration:
    Logical     max current
    cylinders   16383   16383
    heads       16  16
    sectors/track   63  63
    --
    CHS current addressable sectors:   16514064
    LBA    user addressable sectors:  268435455
    LBA48  user addressable sectors: 1953525168
    Logical  Sector size:                   512 bytes
    Physical Sector size:                  4096 bytes
    device size with M = 1024*1024:      953869 MBytes
    device size with M = 1000*1000:     1000204 MBytes (1000 GB)
    cache/buffer size  = unknown
Capabilities:
    LBA, IORDY(can be disabled)
    Queue depth: 32
    Standby timer values: spec'd by Standard, with device specific minimum
    R/W multiple sector transfer: Max = 16  Current = 16
    DMA: mdma0 mdma1 mdma2 udma0 udma1 udma2 udma3 udma4 udma5 *udma6 
         Cycle time: min=120ns recommended=120ns
    PIO: pio0 pio1 pio2 pio3 pio4 
         Cycle time: no flow control=120ns  IORDY flow control=120ns
Commands/features:
    Enabled Supported:
       *    SMART feature set
            Security Mode feature set
       *    Power Management feature set
       *    Write cache
       *    Look-ahead
       *    Host Protected Area feature set
       *    WRITE_BUFFER command
       *    READ_BUFFER command
       *    NOP cmd
       *    DOWNLOAD_MICROCODE
            Power-Up In Standby feature set
       *    SET_FEATURES required to spinup after power up
            SET_MAX security extension
       *    48-bit Address feature set
       *    Device Configuration Overlay feature set
       *    Mandatory FLUSH_CACHE
       *    FLUSH_CACHE_EXT
       *    SMART error logging
       *    SMART self-test
       *    General Purpose Logging feature set
       *    64-bit World wide name
       *    {READ,WRITE}_DMA_EXT_GPL commands
       *    Segmented DOWNLOAD_MICROCODE
       *    Gen1 signaling speed (1.5Gb/s)
       *    Gen2 signaling speed (3.0Gb/s)
       *    Gen3 signaling speed (6.0Gb/s)
       *    Native Command Queueing (NCQ)
       *    Host-initiated interface power management
       *    Phy event counters
       *    NCQ priority information
       *    unknown 76[15]
       *    DMA Setup Auto-Activate optimization
       *    Software settings preservation
       *    SMART Command Transport (SCT) feature set
       *    SCT Write Same (AC2)
       *    SCT Features Control (AC4)
       *    SCT Data Tables (AC5)
            unknown 206[7]
            unknown 206[12] (vendor specific)
            unknown 206[13] (vendor specific)
Security: 
    Master password revision code = 65534
        supported
    not enabled
    not locked
        frozen
    not expired: security count
        supported: enhanced erase
    112min for SECURITY ERASE UNIT. 112min for ENHANCED SECURITY ERASE UNIT. 
Logical Unit WWN Device Identifier: ****************
    NAA     : 5
    IEEE OUI    : 0014ee
    Unique ID   : ******
Checksum: correct
$
</pre>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 現在のパーティション構成</h2>
<div class="outline-text-2" id="text-4">
<p>
<code>/dev/sda</code> の物理パーティション構成を確認する。
</p>
<pre class="example">
$ sudo gdisk -l /dev/sda 
GPT fdisk (gdisk) version 0.8.6

Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.
Disk /dev/sda: 500118192 sectors, 238.5 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): A2BE7525-7A02-4E36-8C41-B9E4487690BD
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 500118158
Partitions will be aligned on 2048-sector boundaries
Total free space is 2669 sectors (1.3 MiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048          411647   200.0 MiB   EF00  EFI System Partition
   2          411648         1435647   500.0 MiB   0700  
   3         1435648       500117503   237.8 GiB   8E00  
$
</pre>

<p>
LVMの構成状況
</p>
<pre class="example">
$ sudo lvmdiskscan
  /dev/centos/swap [       7.27 GiB] 
  /dev/sda1        [     200.00 MiB] 
  /dev/centos/root [      50.00 GiB] 
  /dev/sda2        [     500.00 MiB] 
  /dev/centos/home [     180.52 GiB] 
........
</pre>

<p>
先頭の物理パーティションをブート関係用にマウントしています。
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">/dev/sda1</td>
<td class="left">vfat</td>
<td class="left">/boot/efi</td>
<td class="left">200MB</td>
</tr>

<tr>
<td class="left">/dev/sda2</td>
<td class="left">xfs</td>
<td class="left">/boot</td>
<td class="left">500MB</td>
</tr>
</tbody>
</table>

<p>
三番目の物理パーティションをLVMで割って使っています。
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">PV</th>
<th scope="col" class="left">VG</th>
<th scope="col" class="left">LV</th>
<th scope="col" class="left">Format</th>
<th scope="col" class="left">Mount Point</th>
<th scope="col" class="left">Size</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">/dev/sda3</td>
<td class="left">centos</td>
<td class="left">/dev/centos/swap</td>
<td class="left">swap</td>
<td class="left">&#xa0;</td>
<td class="left">7.27G</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">/dev/centos/home</td>
<td class="left">xfs</td>
<td class="left">/home</td>
<td class="left">180G</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">/dev/centos/root</td>
<td class="left">xfs</td>
<td class="left">/</td>
<td class="left">50G</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 増設後のパーティション構成</h2>
<div class="outline-text-2" id="text-5">
<p>
増設したHDDに <code>vg01</code> を増やして、 <code>/home</code> と <code>/var</code> をこちら配置するようにする。
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">PV</th>
<th scope="col" class="left">VG</th>
<th scope="col" class="left">LV</th>
<th scope="col" class="left">Format</th>
<th scope="col" class="left">Mount Point</th>
<th scope="col" class="left">Size</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">/dev/sda3</td>
<td class="left">centos</td>
<td class="left">/dev/centos/swap</td>
<td class="left">swap</td>
<td class="left">&#xa0;</td>
<td class="left">7.27G</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">/dev/centos/root</td>
<td class="left">xfs</td>
<td class="left">/</td>
<td class="left">230G</td>
</tr>

<tr>
<td class="left">/dev/sdb1</td>
<td class="left">vg01</td>
<td class="left">/dev/vg01/home</td>
<td class="left">xfs</td>
<td class="left">/home</td>
<td class="left">431G</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">/dev/vg01/var</td>
<td class="left">xfs</td>
<td class="left">/var</td>
<td class="left">500G</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 増設手順</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1"><span class="section-number-3">6.1</span> gdiskでパーティションを初期化する</h3>
<div class="outline-text-3" id="text-6-1">
<pre class="example">
$ sudo gdisk /dev/sdb
GPT fdisk (gdisk) version 0.8.6

Partition table scan:
  MBR: not present
  BSD: not present
  APM: not present
  GPT: not present

Creating new GPT entries.

Command (? for help): o        ★GPTパーティションテーブルを新規作成する
This option deletes all partitions and creates a new protective MBR.
Proceed? (Y/N): Y

Command (? for help): n        ★新規パーティションを作成する
Partition number (1-128, default 1): 
First sector (34-1953525134, default = 2048) or {+-}size{KMGTP}: 
Last sector (2048-1953525134, default = 1953525134) or {+-}size{KMGTP}: 
Current type is 'Linux filesystem'
Hex code or GUID (L to show codes, Enter = 8300): 8e00 ★パーティションタイプをLVMにする
Changed type of partition to 'Linux LVM'

Command (? for help): w

Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING
PARTITIONS!!

Do you want to proceed? (Y/N): Y
OK; writing new GUID partition table (GPT) to /dev/sdb.
The operation has completed successfully.
$
</pre>

<p>
結果を確認する
</p>
<pre class="example">
$ sudo gdisk -l /dev/sdb
GPT fdisk (gdisk) version 0.8.6

Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR; using GPT.
Disk /dev/sdb: 1953525168 sectors, 931.5 GiB
Logical sector size: 512 bytes
Disk identifier (GUID): DE117DAF-1D96-4505-89EC-6F1E6BB08E4C
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 1953525134
Partitions will be aligned on 2048-sector boundaries
Total free space is 2014 sectors (1007.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048      1953525134   931.5 GiB   8E00  Linux LVM
</pre>
</div>
</div>

<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2"><span class="section-number-3">6.2</span> LVMパーティション再構成</h3>
<div class="outline-text-3" id="text-6-2">
<p>
PV <code>/dev/sdb1</code> 作成する
</p>
<pre class="example">
$ sudo pvcreate /dev/sdb1
  Physical volume "/dev/sdb1" successfully created
</pre>

<p>
VG <code>vg01</code> を作成する
</p>
<pre class="example">
$ sudo vgcreate vg01 /dev/sdb1
  Volume group "vg01" successfully created
</pre>

<p>
VG <code>centos</code> の <code>home</code> 論理ボリュームを 一旦 <code>home0</code> にリネームする。
</p>
<pre class="example">
$ sudo lvrename centos home home0
  Renamed "home" to "home0" in volume group "centos"
</pre>

<p>
VG <code>vg01</code> 上で <code>/var</code> 用の <code>var</code> 論理ボリュームを作成する。
</p>
<pre class="example">
$ sudo lvcreate -L 500G vg01 -n var
  Logical volume "var" created
</pre>

<p>
VG <code>vg01</code> 上残りに容量を <code>/home</code> 用の <code>home</code> 論理ボリュームを作成する。
</p>
<pre class="example">
$ sudo lvcreate -l +100%FREE vg01 -n home
  Logical volume "home" created
</pre>

<p>
<code>var</code> 論理ボリュームを <code>xfs</code> タイプファイルシステムでフォーマットする。
</p>
<pre class="example">
$ sudo mkfs.xfs /dev/mapper/vg01-var 
meta-data=/dev/mapper/vg01-var   isize=256    agcount=4, agsize=32768000 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=0
data     =                       bsize=4096   blocks=131072000, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=0
log      =internal log           bsize=4096   blocks=64000, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0

$#+end_example

=home= 論理ボリュームを =xfs= タイプファイルシステムでフォーマットする。
#+begin_example
$ sudo mkfs.xfs /dev/mapper/vg01-home 
meta-data=/dev/mapper/vg01-home  isize=256    agcount=4, agsize=28279296 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=0
data     =                       bsize=4096   blocks=113117184, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=0
log      =internal log           bsize=4096   blocks=55233, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
$
</pre>

<p>
<code>/home</code> 領域データをコピーする。
</p>
<pre class="example">
$ sudo mount /dev/mapper/vg01-home /mnt/
$ sudo cp --archive /home /mnt
$ ls -al /mnt/
合計 4
drwxr-xr-x   3 root root   17 11月 16 22:04 .
drwxr-xr-x. 17 root root 4096 11月 10 21:46 ..
drwxr-xr-x.  3 root root   18  9月 14 23:07 home
$ sudo mv /mnt/home/* /mnt/
$ sudo rm -rf /mnt/home/
$ sudo umount /mnt
</pre>

<p>
<code>/var</code> 領域を使用しているサービスを止めて、データをコピーする。
</p>
<pre class="example">
$ sudo systemctl stop xxxxx.service
$ sudo mount /dev/mapper/vg01-var /mnt/
$ sudo cp --archive /var /mnt
$ sudo mv /mnt/var/* /mnt/
$ sudo rm -rf /mnt/var/
$ sudo umount /mnt
</pre>

<p>
<code>/etc/fstab</code> を適切に変更する。
</p>
<pre class="example">
/dev/mapper/centos-root /                       xfs     defaults        1 1
/dev/mapper/centos-swap swap                    swap    defaults        0 0
/dev/mapper/vg01-home   /home                   xfs     defaults        1 2
/dev/mapper/vg01-var    /var                    xfs     defaults        1 2
.....
</pre>

<p>
旧 <code>/var</code> ディレクトリ名を適当に変更し、システムを再起動する。
</p>
<pre class="example">
$ sudo mv /var /var.0
</pre>

<p>
<code>root</code> 論理ボリュームを拡張する
</p>
<pre class="example">
★home0論理ボリュームの削除
$ sudo lvremove -f centos/home0
  Logical volume "home0" successfully removed

★root論理ボリュームの拡大
$ sudo lvextend -l +100%FREE centos/root
  Extending logical volume root to 230.52 GiB
  Logical volume root successfully resized

★xfsファイルシステムサイズの拡大
$ xfs_growfs /
</pre>
</div>
</div>


<div id="outline-container-sec-6-3" class="outline-3">
<h3 id="sec-6-3"><span class="section-number-3">6.3</span> 増設結果を確認する</h3>
<div class="outline-text-3" id="text-6-3">
<p>
<code>lvmdiskscan</code> の表示
</p>
<pre class="example">
$ sudo lvmdiskscan 
  /dev/centos/swap [       7.27 GiB] 
  /dev/sda1        [     200.00 MiB] 
  /dev/centos/root [     230.52 GiB] 
  /dev/sda2        [     500.00 MiB] 
  /dev/vg01/var    [     500.00 GiB] 
  /dev/sda3        [     237.79 GiB] LVM physical volume
  /dev/vg01/home   [     431.51 GiB] 
  /dev/sdb1        [     931.51 GiB] LVM physical volume
  4 disks
  2 partitions
  0 LVM physical volume whole disks
  2 LVM physical volumes
</pre>

<p>
<code>df -h</code> の表示
</p>
<pre class="example">
$ df -h
ファイルシス            サイズ  使用  残り 使用% マウント位置
/dev/sda1                 200M  9.6M  191M    5% /boot/efi
/dev/sda2                 494M  203M  292M   42% /boot
/dev/mapper/centos-root   231G   16G  215G    7% /
/dev/mapper/vg01-home     432G  379M  431G    1% /home
/dev/mapper/vg01-var      500G   13G  488G    3% /var
.......
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 参考情報</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li><a href="https://wiki.archlinux.org/index.php/Lvm#lvextend">Archlinux Wiki - LVM</a>
</li>
<li><a href="http://kuenishi.hatenadiary.jp/entry/20070325/1174833266">ディスクを加えてXFS on LVMを拡張する</a>
</li>
<li><a href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/xfsgrow.html">XFS ファイルシステムのサイズの拡大</a>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]ApacheでbackendとのKeepAliveをOFFにする]]></title>
    <link href="http://luozengbin.github.io/blog/2014-10-29-%5B%E3%83%A1%E3%83%A2%5Dapache%E3%81%A7backend%E3%81%A8%E3%81%AEkeepalive%E3%82%92off%E3%81%AB%E3%81%99%E3%82%8B.html"/>
    <updated>2014-10-29T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]apacheでbackendとのkeepaliveをoffにする</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Apache側でKeepAliveを制御する</a></li>
<li><a href="#sec-2">2. APサーバ側にてKeepAliveを制御する</a></li>
<li><a href="#sec-3">3. 参考</a></li>
</ul>
</div>
</div>


<p>
次のような構成でApacheとAPサーバ間のHTTP KeepAliveが有効にすると
</p>


<ol class="org-ol">
<li>LBの振り分けが偏る可能性がある
</li>
<li>LBの無振り分け先の切り替えに影響が生じる可能性がある、詳細は こちらの記事 を参照してください。
</li>
</ol>


<p>
のような不都合があります。
</p>




<pre class="example">
+----------+         +------------+        +-----------+     +-------------+
| Client   +---------&gt; Apache     +--------&gt;   LB      +-----&gt; AP Server   |
+----------+         +------------+        +-----------+     +-------------+
</pre>




<p>
とい言うわけでApacheとAPサーバ間KeepAliveをOFFにする方法を調査した。
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Apache側でKeepAliveを制御する</h2>
<div class="outline-text-2" id="text-1">
<p>
<code>ProxyPass</code> ディレクティブの <code>keepalive</code> パラメータが期待通り動作しないので迷っていた、
しかしドキュメントによると
</p>

<pre class="example">
バックエンドサーバと Apache の間にファイアーウォールがある場合には、 このパラメータを
使ってください。ファイアウォールは往々にして、 非活動状態のコネクションを落とそうとし
ます。 このフラグは OS に指示して、KEEP_ALIVE メッセージを非活動状態の コネクションで
も送るようにします。これによってファイアウォールによってコネクションが 落とされること
を防げます。keepalive を有効にするには、このプロパティを On にしてください。
</pre>

<p>
HTTP KeepAliveに関係しそうに見えたが、実はあんまり関係ないのようです。
TCPレベルでコネクションをファイアウォールによる切断を防ぐためのパラメータです。
</p>

<p>
更に調べると <code>mod_proxy_http</code> モジュールの環境変数にHTTP KeepAliveに関係するものが
出てきた。
</p>

<ul class="org-ul">
<li>force-proxy-request-1.0
プロキシがバックエンドに HTTP/1.0 でリクエストを送るようにし、HTTP/1.1 の機能を無効にします。
</li>

<li>proxy-nokeepalive
プロキシがリクエスト終了後にバックエンドとの接続を切るようにします。
</li>
</ul>

<p>
よし！これだそう。次のように設定したらうまくできた。
</p>
<pre class="example">
&lt;Location /test/&gt;
    ProxyPass http://dummyhost:8080/app1/
    SetEnv proxy-nokeepalive 1
&lt;/Location&gt;
</pre>

<p>
これで、ApacheからAPサーバへのHTTPリクエストヘッダに <code>Connection: close</code> が付与される
ようになりました。 <code>tcpdump</code> でパケットのやり取りを確認すると、ちゃんと毎回クライアン
トのからコネクション切断するためのfinパケットが送信されることを確認しました。
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> APサーバ側にてKeepAliveを制御する</h2>
<div class="outline-text-2" id="text-2">
<p>
一般的にAPサーバ側でもKeepAliveの設定が可能です。
流れ的に、HTTPレスポンスのHTTPヘッダに <code>Connection: close</code> を付与して返すことで
リクエスト側にコネクション切断する旨を伝える。
</p>

<p>
Tomcat起動時に次のJavaオプションを付けるとHTTP KeepAliveがOFFになります。
</p>
<pre class="example">
-Dorg.apache.coyote.http11.Http11Protocol.MAX_KEEP_ALIVE_REQUESTS=1
</pre>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 参考</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><a href="http://blog.nomadscafe.jp/2011/07/apache.html">今こそ見直すApacheの設定</a>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
</feed>
