<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2014-07-22T18:11:31+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[検証]Weblogicのインスツルメンテーション機能]]></title>
    <link href="http://luozengbin.github.io/blog/2014-07-22-%5B%E6%A4%9C%E8%A8%BC%5Dweblogic%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%84%E3%83%AB%E3%83%A1%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E6%A9%9F%E8%83%BD.html"/>
    <updated>2014-07-22T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]weblogicのインスツルメンテーション機能</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 検証アプリの作成</a></li>
<li><a href="#sec-2">2. インスツルメンテーション設定手順</a>
<ul>
<li><a href="#sec-2-1">2.1. 診断システム・モジュールの作成</a></li>
<li><a href="#sec-2-2">2.2. アプリケーションの設定</a></li>
<li><a href="#sec-2-3">2.3. 採取されたイベントデータの確認</a></li>
</ul>
</li>
<li><a href="#sec-3">3. 参考リンク</a></li>
</ul>
</div>
</div>


<p>
トラブルシューティング時にログでアプリケーションの動作を追うことが常套手段と言えるで
でしょう。しかし、アプリケーションにログ出力処理が実装されていないケースもあり得るで
しょう。先日そのようなケースに遭遇してまして、メソッドのエントリとリターンのポイント
ですらログ出力してくれなかった。コード規模が小さいのであれば、すぐログ出力処理を実装
すればいいでしょうけど、大規模の場合それなりに大変でしょう。
</p>




<p>
幸い、Weblogicサーバにはアプリケーションケーションの動作イベントを記録するような機能
がが提供されている。それはWebLogic診断フレームワークのインスツルメンテーション機能で
す。以下はインスツルメンテーション機能の使い方を検証します。
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 検証アプリの作成</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>jspxページ１枚、ボタンとテキストを適当に配置する
</li>
<li>ボタンイベントをハンドリングするためのManagedBeanを作成する
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> インスツルメンテーション設定手順</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 診断システム・モジュールの作成</h3>
<div class="outline-text-3" id="text-2-1">
<p>
診断システム・モジュール一覧にモジュールがあればそれを利用する、なければ適当に新規作成
する。
</p>


<div class="figure">
<p><img src="img/2014-07-12-wls-01.png" alt="2014-07-12-wls-01.png" />
</p>
</div>

<p>
モジュールをインスツルメンテーション画面へ辿って、「有効」チェックボックスがONである
状態を確認する。OFFの状態場合、状態をONへ変更する。
</p>


<div class="figure">
<p><img src="img/2014-07-12-wls-02.png" alt="2014-07-12-wls-02.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> アプリケーションの設定</h3>
<div class="outline-text-3" id="text-2-2">
<p>
デプロイメントリストから検証用アプリの「構成→インスツルメンテーション」設定画面へ辿っ
て、「有効」チェックボックスをONにする。
</p>


<div class="figure">
<p><img src="img/2014-07-12-wls-03.png" alt="2014-07-12-wls-03.png" />
</p>
</div>

<p>
同じ画面の下にある「カスタム監視を追加」ボタンから監視ポイントの登録を行う。
</p>


<div class="figure">
<p><img src="img/2014-07-12-wls-04.png" alt="2014-07-12-wls-04.png" />
</p>
</div>

<p>
<code>ポイントカット</code> に監視対象クラスやメソッドを指定する。ここの例 <code>execution(public *
view.* *(...))</code> ではviewパッケージ下のすべてのクラスのすべてのメソッドにマッチします。
</p>


<div class="figure">
<p><img src="img/2014-07-12-wls-05.png" alt="2014-07-12-wls-05.png" />
</p>
</div>

<p>
続いて管理対象イベントを指定する。
</p>


<div class="figure">
<p><img src="img/2014-07-12-wls-06.png" alt="2014-07-12-wls-06.png" />
</p>
</div>

<p>
<code>TraceAction</code> イベントを選択する。
</p>


<div class="figure">
<p><img src="img/2014-07-12-wls-07.png" alt="2014-07-12-wls-07.png" />
</p>
</div>

<p>
これで設定が終わります。サーバを再起動する。
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 採取されたイベントデータの確認</h3>
<div class="outline-text-3" id="text-2-3">
<p>
ログファイルリストから <code>EventsDataArchive</code> からイベントログを見ることができる。
<img src="img/2014-07-12-wls-08.png" alt="2014-07-12-wls-08.png" />
<img src="img/2014-07-12-wls-09.png" alt="2014-07-12-wls-09.png" />
<img src="img/2014-07-12-wls-10.png" alt="2014-07-12-wls-10.png" />
</p>

<p>
イベントログのファイル実体が <code>domain/servers/DefaultServer/data/store/diagnostics/</code>
の配下に <code>*.DAT</code> バイナリファイルとして保存される。
</p>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 参考リンク</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><a href="http://docs.oracle.com/cd/E28389_01/web.1111/b60994/config_instrumentation.htm#i1085781">Oracle® Fusion Middleware Oracle WebLogic Server診断フレームワークの構成と使用 11g リリース1(10.3.6)</a>
</li>
<li><a href="http://redstack.wordpress.com/2012/06/19/method-run/">How to know that a method was run, when you didn’t write that method</a>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]JDeveloper 11g 開発環境の整備]]></title>
    <link href="http://luozengbin.github.io/blog/2014-07-22-%5B%E3%83%A1%E3%83%A2%5Djdeveloper11g%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%81%AE%E6%95%B4%E5%82%99.html"/>
    <updated>2014-07-22T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]jdeveloper11g開発環境の整備</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. UnsatisfiedLinkError</a></li>
<li><a href="#sec-3">3. 文字化け</a></li>
<li><a href="#sec-4">4. メニューバーの動作不具合</a></li>
<li><a href="#sec-5">5. ランチャーから起動できるようにする</a></li>
<li><a href="#sec-6">6. 未解決問題</a></li>
<li><a href="#sec-7">7. 参考したリンク</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>OS: ArchLinux (Linux jizai 3.15.5-2-ARCH #1 SMP PREEMPT Fri Jul 11 07:56:02 CEST 2014 x86_64 GNU/Linux)
</li>
<li>DE: Gnome 3.12.2
</li>
<li>JDeveloper 11g Release 1 (11.1.1.3.0)
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> UnsatisfiedLinkError</h2>
<div class="outline-text-2" id="text-2">
<p>
Archlinux上で <code>JDeveloper 11g</code> インストール直後起動時に以下のようなエラーが起きて起動
ができない状態でした。
</p>

<pre class="example">
$ jdeveloper/jdev/bin/jdev

Oracle JDeveloper 11g Release 1 (11.1.1.3.0)
 Copyright (c) 1997, 2010, Oracle and/or its affiliates. All rights reserved.

java.lang.UnsatisfiedLinkError: /home/akira/Oracle/Jdev11.1.1.3.0/jdk160_18/jre/lib/i386/xawt/libmawt.so: libXtst.so.6: cannot open shared object file: No such file or directory
    at java.lang.ClassLoader$NativeLibrary.load(Native Method)
    at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1803)
    at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1699)
    at java.lang.Runtime.load0(Runtime.java:770)
    at java.lang.System.load(System.java:1003)
    at java.lang.ClassLoader$NativeLibrary.load(Native Method)
    at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1803)
    at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1720)
    at java.lang.Runtime.loadLibrary0(Runtime.java:823)
    at java.lang.System.loadLibrary(System.java:1028)
    at sun.security.action.LoadLibraryAction.run(LoadLibraryAction.java:50)
    at java.security.AccessController.doPrivileged(Native Method)
    at sun.awt.NativeLibLoader.loadLibraries(NativeLibLoader.java:38)
    at sun.awt.DebugHelper.&lt;clinit&gt;(DebugHelper.java:29)
    at java.awt.Component.&lt;clinit&gt;(Component.java:560)
    at oracle.ide.IdeCore.startupImpl(IdeCore.java:1156)
    at oracle.ide.Ide.startup(Ide.java:703)
    at oracle.ideimpl.DefaultIdeStarter.startIde(DefaultIdeStarter.java:35)
    at oracle.ideimpl.Main.start(Main.java:184)
    at oracle.ideimpl.Main.main(Main.java:146)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at oracle.ide.boot.PCLMain.callMain(PCLMain.java:62)
    at oracle.ide.boot.PCLMain.main(PCLMain.java:54)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at oracle.classloader.util.MainClass.invoke(MainClass.java:128)
    at oracle.ide.boot.IdeLauncher.bootClassLoadersAndMain(IdeLauncher.java:189)
    at oracle.ide.boot.IdeLauncher.launchImpl(IdeLauncher.java:89)
    at oracle.ide.boot.IdeLauncher.launch(IdeLauncher.java:65)
    at oracle.ide.boot.IdeLauncher.main(IdeLauncher.java:54)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at oracle.ide.boot.Launcher.invokeMain(Launcher.java:713)
    at oracle.ide.boot.Launcher.launchImpl(Launcher.java:115)
    at oracle.ide.boot.Launcher.launch(Launcher.java:68)
    at oracle.ide.boot.Launcher.main(Launcher.java:57)
</pre>

<p>
<code>awt</code> から利用している <code>libXtst.so.6</code> シェアードライブラリが見つからないようなので
、 <code>locate</code> で確認したら <code>libxtst</code> パッケージがちゃんと入っている。32bit/64bitの問題だ
ろうなと思って、Archlinuxのパッケージリポジトリを検索したらやはり <code>lib32-libxtst</code> が
存在した、これをインストールしたらエラーが解消されました。
</p>

<p>
<code>libXtst.so.6</code> ライブラリの確認
</p>
<pre class="example">
$ locate libXtst.so
/usr/lib/libXtst.so
/usr/lib/libXtst.so.6
/usr/lib/libXtst.so.6.1.0
$ pacman -Qo /usr/lib/libXtst.so.6
/usr/lib/libXtst.so.6 は libxtst 1.2.2-1 によって保有されています
</pre>

<p>
<code>lib32-libxtst</code> をインストールする
</p>
<pre class="example">
★インストール
$ sudo pacman -S lib32-libxtst
[sudo] password for akira: 
依存関係を解決しています...
相互衝突をチェックしています...

パッケージ (1): lib32-libxtst-1.2.2-1

Total Download Size:    0.01 MiB
Total Installed Size:   0.02 MiB

:: インストールを行いますか？ [Y/n] 
:: パッケージを取得します ...
 lib32-libxtst-1.2.2-1-x86_64                                                                         9.0 KiB  44.4K/s 00:00 [############################################################################] 100%
(1/1) キーリングのキーを確認                                                                                                 [############################################################################] 100%
(1/1) パッケージの整合性をチェック                                                                                           [############################################################################] 100%
(1/1) パッケージファイルのロード                                                                                             [############################################################################] 100%
(1/1) ファイルの衝突をチェック                                                                                               [############################################################################] 100%
(1/1) 空き容量を確認                                                                                                         [############################################################################] 100%
(1/1) インストール lib32-libxtst                                                                                             [############################################################################] 100%

★確認
$ pacman -Ql lib32-libxtst
lib32-libxtst /usr/
lib32-libxtst /usr/lib32/
lib32-libxtst /usr/lib32/libXtst.so
lib32-libxtst /usr/lib32/libXtst.so.6
lib32-libxtst /usr/lib32/libXtst.so.6.1.0
lib32-libxtst /usr/lib32/pkgconfig/
lib32-libxtst /usr/lib32/pkgconfig/xtst.pc
lib32-libxtst /usr/share/
lib32-libxtst /usr/share/licenses/
lib32-libxtst /usr/share/licenses/lib32-libxtst
$
</pre>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 文字化け</h2>
<div class="outline-text-2" id="text-3">
<p>
起動したら日本語が例の豆腐形状となっていました。JdevにバンドされたJDKの
<code>Jdev11.1.1.3.0/jdk160_18/jre/lib/fonts</code> の配下に <code>fallback</code> ディレクトリを作成し、日
本語フォントへのシンボルリンクを貼っておく。また、起動オプションにフォントのアンチエ
イリアス (anti-aliasing)を有効にしておくとよいでしょう。
</p>

<p>
起動時の豆腐状
</p>


<div class="figure">
<p><img src="img/2014-07-22-jdeveloper-1.png" alt="2014-07-22-jdeveloper-1.png" />
</p>
</div>

<p>
fallbackフォントの設定を実施する
</p>
<pre class="example">
★fallbackフォントの指定
$ cd ~/Oracle/Jdev11.1.1.3.0/jdk160_18/jre/lib/fonts
$ mkdir fallback; cd fallback
$ ln -s /usr/share/fonts/TTF/VL-Gothic-Regular.ttf VL-Gothic-Regular.ttf
$ ln -s /usr/share/fonts/TTF/VL-PGothic-Regular.ttf VL-PGothic-Regular.ttf
★起動オプション設定
$ export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true"
$ cd ~/Oracle/Jdev11.1.1.3.0/
$ jdeveloper/jdev/bin/jdev

Oracle JDeveloper 11g Release 1 (11.1.1.3.0)
 Copyright (c) 1997, 2010, Oracle and/or its affiliates. All rights reserved. 

Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
</pre>


<div class="figure">
<p><img src="img/2014-07-22-jdeveloper-2.png" alt="2014-07-22-jdeveloper-2.png" />
</p>
</div>

<p>
もう一度起動してみたら、ばっちりだね。
</p>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> メニューバーの動作不具合</h2>
<div class="outline-text-2" id="text-4">
<p>
JDeveloper起動後、ウィンドウを最大化した状態でメニューバーの操作がうまくできない問題
がある。詳細な原因がよくわからない、GTKウィンドウマネージャとうまく連携出来ていない気
がする。とりあえず、ウィンドウを最大化せずに問題から逃げた。
</p>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> ランチャーから起動できるようにする</h2>
<div class="outline-text-2" id="text-5">
<p>
ランチャー起動できるように <code>~/.local/share/applications/jdev.desktop</code> ファイルを作成
しておく。
</p>
<pre class="example">
[Desktop Entry]
Name=JDeveloper
Exec=/home/akira/Oracle/Jdev11.1.1.3.0/jdeveloper/jdev/bin/jdev
Icon=/home/akira/Oracle/Jdev11.1.1.3.0/jdeveloper/jdev/bin/coffee.png
StartupNotify=true
Terminal=false
Type=Application
Categories=Development;Java;
</pre>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 未解決問題</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>フォントが醜い
</li>
<li>GTKLookAndFeelが使えない
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 参考したリンク</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li><a href="http://d.hatena.ne.jp/longingandtears/20121208/1354972484">Linux版のjavaで文字が□になる問題</a>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[検証]ADF印刷プレビュー機能]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-18-%5B%E6%A4%9C%E8%A8%BC%5Dadf%E5%8D%B0%E5%88%B7%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC.html"/>
    <updated>2014-06-18T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]adf印刷プレビュー</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 検証内容</a></li>
<li><a href="#sec-2">2. af:showPrintablePageBehaviorタグの使い方</a></li>
<li><a href="#sec-3">3. 印刷内容の制御</a></li>
<li><a href="#sec-4">4. IE印刷プレビュー画面を出す</a></li>
<li><a href="#sec-5">5. 参考</a></li>
</ul>
</div>
</div>


<p>
Oracle ADFの印刷機能にたずさわる機会がありましたので、一部調査した内容を
ここでメモしておきます。サンプルコードは <a href="https://github.com/luozengbin/ADFSamples/tree/master/PrintPreview">Github</a> に登録しています。
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 検証内容</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><code>af:showPrintablePageBehavior</code> タグの使い方
</li>
<li>印刷内容の制御
</li>
<li>IE印刷プレビュー画面を出す
</li>
</ol>

<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> af:showPrintablePageBehaviorタグの使い方</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>af:showPrintablePageBehavior</code> タグを画面に任意のcommandコンポネントの子コンポネント
として入れれば、そのcommandコンポネントがトリガーされると印刷プレビュー画面が新規ブラ
ウザ画面にて表示される。
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 印刷内容の制御</h2>
<div class="outline-text-2" id="text-3">
<p>
基本的に全画面(同じjspx)の内容が印刷プレビュー画面に表示される。一部コンポネント
(例： <code>af:menuBar</code> ) は表示しない仕様となっている。またレイアウトコンテナに
<code>af:panelSplitter</code> や <code>af:panelAccordion</code> が使用された場合、アクティビティとなってい
るレイアウトアイテムしかが印刷画面に表示しない。 <code>af:showPrintablePageBehavior</code> タグ
の配置場所にもよります。
</p>

<p>
また、 <code>f:view</code> タグの <code>beforePhase</code> リスナーにて印刷プレビュー画面に表示する内容を
カスタマイズ(非表示制御)することができる。
</p>

<p>
サンプル <code>DataView.jspx</code> の定義
</p>

<p>
<div><script src='https://gist.github.com/0094c8013bc3eed1c962.js'></script>
<noscript><pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;jsp:root xmlns:jsp=&quot;http://java.sun.com/JSP/Page&quot; version=&quot;2.1&quot;
          xmlns:f=&quot;http://java.sun.com/jsf/core&quot;
          xmlns:h=&quot;http://java.sun.com/jsf/html&quot;
          xmlns:af=&quot;http://xmlns.oracle.com/adf/faces/rich&quot;&gt;
  &lt;jsp:directive.page contentType=&quot;text/html;charset=UTF-8&quot;/&gt;

  &lt;!--★beforePhaseリスナーの登録  --&gt;
  &lt;f:view beforePhase=&quot;#{pageFlowScope.DataViewBean.beforePhaseMethod}&quot;&gt;
    &lt;af:document id=&quot;d1&quot;&gt;
      &lt;af:form id=&quot;f1&quot;&gt;
        &lt;af:resource type=&quot;javascript&quot; source=&quot;/js/CustomPrint.js&quot;/&gt;
        &lt;af:panelStretchLayout id=&quot;psl1&quot;&gt;
          &lt;f:facet name=&quot;bottom&quot;&gt;
            &lt;af:panelGroupLayout layout=&quot;scroll&quot;
                                 xmlns:af=&quot;http://xmlns.oracle.com/adf/faces/rich&quot;
                                 id=&quot;pgl2&quot;&gt;
              &lt;af:panelGroupLayout id=&quot;pgl3&quot;&gt;
                &lt;!--  ★印刷ボタンの定義 --&gt;
                &lt;af:commandButton text=&quot;印刷&quot; id=&quot;cb1&quot;
                                  inlineStyle=&quot;font-size:large;&quot;&gt;
                  &lt;af:showPrintablePageBehavior/&gt;
                &lt;/af:commandButton&gt;
              &lt;/af:panelGroupLayout&gt;
            &lt;/af:panelGroupLayout&gt;
          &lt;/f:facet&gt;
          &lt;f:facet name=&quot;center&quot;&gt;
            &lt;af:table var=&quot;row&quot; rowBandingInterval=&quot;0&quot; id=&quot;t1&quot;
                      value=&quot;#{pageFlowScope.DataViewBean.dataList}&quot;&gt;
              &lt;af:column sortable=&quot;false&quot; headerText=&quot;列1&quot; id=&quot;c2&quot; width=&quot;200&quot;&gt;
                &lt;af:outputText value=&quot;#{row.col1}&quot; id=&quot;ot5&quot;/&gt;
              &lt;/af:column&gt;
              &lt;af:column sortable=&quot;false&quot; headerText=&quot;列2&quot; id=&quot;c5&quot; width=&quot;200&quot;&gt;
                &lt;af:outputText value=&quot;#{row.col2}&quot; id=&quot;ot1&quot;/&gt;
              &lt;/af:column&gt;
              &lt;af:column sortable=&quot;false&quot; headerText=&quot;列3&quot; id=&quot;c1&quot; width=&quot;200&quot;&gt;
                &lt;af:outputText value=&quot;#{row.col3}&quot; id=&quot;ot3&quot;/&gt;
              &lt;/af:column&gt;
              &lt;af:column sortable=&quot;false&quot; headerText=&quot;列4&quot; id=&quot;c3&quot; width=&quot;200&quot;&gt;
                &lt;af:outputText value=&quot;#{row.col4}&quot; id=&quot;ot2&quot;/&gt;
              &lt;/af:column&gt;
            &lt;/af:table&gt;
          &lt;/f:facet&gt;
          &lt;f:facet name=&quot;start&quot;/&gt;
          &lt;f:facet name=&quot;end&quot;/&gt;
          &lt;f:facet name=&quot;top&quot;&gt;
            &lt;af:panelGroupLayout id=&quot;pgl1&quot; layout=&quot;horizontal&quot;&gt;
              &lt;af:outputLabel value=&quot;印刷プレビューテスト&quot; id=&quot;ol1&quot; inlineStyle=&quot;font-size:xx-large;&quot;/&gt;

              &lt;!-- ★以降は印刷しないように --&gt;
              &lt;af:menuBar id=&quot;mb1&quot;&gt;
                &lt;af:menu text=&quot;menu 1&quot; id=&quot;m1&quot;/&gt;
                &lt;af:menu text=&quot;menu 2&quot; id=&quot;m2&quot;/&gt;
                &lt;af:menu text=&quot;menu 3&quot; id=&quot;m3&quot;/&gt;
              &lt;/af:menuBar&gt;
              &lt;af:inputText label=&quot;Label 1&quot; id=&quot;it1&quot;/&gt;
              &lt;af:inputText label=&quot;Label 2&quot; id=&quot;it2&quot;/&gt;
            &lt;/af:panelGroupLayout&gt;
          &lt;/f:facet&gt;
        &lt;/af:panelStretchLayout&gt;
      &lt;/af:form&gt;
    &lt;/af:document&gt;
  &lt;/f:view&gt;
&lt;/jsp:root&gt;</code></pre></noscript></div>

</p>

<p>
サンプル <code>beforePhase</code> リスナー
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #34cae2;">void</span> <span style="color: #00ede1; font-weight: bold;">beforePhaseMethod</span>(<span style="color: #34cae2;">PhaseEvent</span> <span style="color: #dbdb95;">phaseEvent</span>) {

    System.out.println(<span style="color: #e67128;">"----------   phaseEvent   -------------"</span>);
    System.out.println(<span style="color: #e67128;">"phaseEvent.getPhaseId():"</span> + phaseEvent.getPhaseId());

    <span style="color: #74af68;">//</span><span style="color: #74af68;">only perform action if RENDER_RESPONSE phase is reached</span>
    <span style="color: #ffad29; font-weight: bold;">if</span> (phaseEvent.getPhaseId() == <span style="color: #008b8b;">PhaseId</span>.RENDER_RESPONSE) {

        <span style="color: #34cae2;">FacesContext</span> <span style="color: #dbdb95;">fctx</span> = FacesContext.getCurrentInstance();
        <span style="color: #74af68;">//</span><span style="color: #74af68;">check internal request parameter</span>
        <span style="color: #34cae2;">Map</span> <span style="color: #dbdb95;">requestMap</span> = fctx.getExternalContext().getRequestMap();

        <span style="color: #74af68;">// </span><span style="color: #74af68;">&#12522;&#12463;&#12456;&#12473;&#12488;&#12467;&#12531;&#12486;&#12461;&#12473;&#12488;&#12395;&#21360;&#21047;&#12425;&#12375;&#12365;&#12461;&#12540;&#12434;&#29305;&#23450;</span>
        <span style="color: #34cae2;">Object</span> <span style="color: #dbdb95;">showPrintableBehavior</span> = requestMap.get(<span style="color: #e67128;">"oracle.adfinternal.view.faces.el.PrintablePage"</span>);
        <span style="color: #ffad29; font-weight: bold;">if</span> (showPrintableBehavior != <span style="color: #008b8b;">null</span>) {
            <span style="color: #74af68;">// </span><span style="color: #74af68;">&#21360;&#21047;&#30011;&#38754;&#12398;&#12459;&#12473;&#12479;&#12510;&#12452;&#12474;</span>
            <span style="color: #ffad29; font-weight: bold;">if</span> (<span style="color: #008b8b;">Boolean</span>.TRUE == showPrintableBehavior) {
                <span style="color: #74af68;">// </span><span style="color: #74af68;">&#12467;&#12531;&#12509;&#12493;&#12531;&#12488;ID&#12434;&#29992;&#12356;&#12390;&#38560;&#12377;&#20966;&#29702;&#12434;&#23455;&#26045;&#12377;&#12427;</span>
                UiComponentControlUtil.setUnRendered(<span style="color: #e67128;">"mb1"</span>, <span style="color: #e67128;">"it1"</span>, <span style="color: #e67128;">"it2"</span>);
                UiComponentControlUtil.callbackJavascript(<span style="color: #e67128;">"customPrint();"</span>);
            }
        }
    }
}
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> IE印刷プレビュー画面を出す</h2>
<div class="outline-text-2" id="text-4">
<p>
いい方法が見つからない、とりあえずWebBrowserというIEに含まれたActiveXコンポーネントを
利用します。
</p>

<div class="org-src-container">

<pre class="src src-js"><span style="color: #ffad29; font-weight: bold;">function</span> <span style="color: #00ede1; font-weight: bold;">customPrint</span>() {
  <span style="color: #ffad29; font-weight: bold;">if</span> (getBrowser().indexOf(<span style="color: #e67128;">'ie8'</span>) !== -1 ) {
    <span style="color: #ffad29; font-weight: bold;">if</span>(window.ActiveXObject == <span style="color: #008b8b;">null</span> || document.body.insertAdjacentHTML == <span style="color: #008b8b;">null</span>) {
      <span style="color: #ffad29; font-weight: bold;">return</span>;
    }
    <span style="color: #ffad29; font-weight: bold;">var</span> <span style="color: #dbdb95;">sWebBrowserCode</span> = <span style="color: #e67128;">'&lt;object width="0" height="0" classid="CLSID:8856F961-340A-11D0-A96B-00C04FD705A2"&gt;&lt;/object&gt;'</span>;
    document.body.insertAdjacentHTML(<span style="color: #e67128;">'beforeEnd'</span>, sWebBrowserCode);
    <span style="color: #ffad29; font-weight: bold;">var</span> <span style="color: #dbdb95;">objWebBrowser</span> = document.body.lastChild;
    <span style="color: #ffad29; font-weight: bold;">if</span>(objWebBrowser == <span style="color: #008b8b;">null</span>) <span style="color: #ffad29; font-weight: bold;">return</span>;
    objWebBrowser.ExecWB(7, 1);
    document.body.removeChild(objWebBrowser);
  } <span style="color: #ffad29; font-weight: bold;">else</span> {
    window.print();
  }

  <span style="color: #74af68;">// </span><span style="color: #74af68;">&#21360;&#21047;&#12503;&#12524;&#12499;&#12517;&#12540;&#30011;&#38754;&#38281;&#12376;&#12427;&#8594;HTML&#30011;&#38754;&#12434;&#38281;&#12376;&#12427;</span>
  window.onfocus = <span style="color: #ffad29; font-weight: bold;">function</span>(){
   (window.open(<span style="color: #e67128;">''</span>,<span style="color: #e67128;">'_self'</span>).opener=window).close(); 
  };
}
</pre>
</div>

<p>
ブラウザのセキュリティ設定に注意が必要です。
</p>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考</h2>
<div class="outline-text-2" id="text-5">
<p>
Oracle Fusion Middleware Tag Reference for Oracle ADF Faces 11g Release 1 (11.1.1.5.0)
<a href="http://docs.oracle.com/cd/E21764_01/apirefs.1111/e12419/tagdoc/af_showPrintablePageBehavior.html">http://docs.oracle.com/cd/E21764_01/apirefs.1111/e12419/tagdoc/af_showPrintablePageBehavior.html</a>
</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Mission Controlメモ]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-12-java-mission-control%E3%83%A1%E3%83%A2.html"/>
    <updated>2014-06-12T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/java-mission-controlメモ</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 利用可能なJavaバージョン</a></li>
<li><a href="#sec-2">2. ローカルJavaプロセスの監視</a></li>
<li><a href="#sec-3">3. リモートJavaプロセスの監視</a></li>
<li><a href="#sec-4">4. 有用なJavaオプション</a>
<ul>
<li><a href="#sec-4-1">4.1. -XX:StartFlightRecording</a></li>
<li><a href="#sec-4-2">4.2. -XX:+PrintFlagsFinal</a></li>
</ul>
</li>
<li><a href="#sec-5">5. よく使うコマンド</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 利用可能なJavaバージョン</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Java SE Advanced （アドバンスド）
</li>
<li>Java SE Suite
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> ローカルJavaプロセスの監視</h2>
<div class="outline-text-2" id="text-2">
<p>
監視対象Javaプロセス起動時に以下のオプションを追加する。
</p>
<ul class="org-ul">
<li>+UnlockCommercialFeatures：商用オプションロックを解除する
</li>
<li>+FlightRecorder：フライドレコーダー機能を有効化する
</li>
</ul>

<pre class="example">
$ java -XX:+UnlockCommercialFeatures -XX:+FlightRecorder ......
</pre>

<p>
<!-- more -->
</p>

<p>
利用可能なコマンドを確認する、jcmdコマンドにプロセスIDを引数にして実行できる
コマンド一覧を表示する。
</p>
<pre class="example">
$ jcmd &lt;pid&gt; help
  7720:
  The following commands are available:
  JFR.stop    ★レコーディング停止
  JFR.start   ★レコーディング開始
  JFR.dump    ★レコーディング内容をダンプする
  JFR.check
  VM.native_memory
  VM.commercial_features
  ManagementAgent.stop
  ManagementAgent.start_local
  ManagementAgent.start
  Thread.print
  GC.class_histogram
  GC.heap_dump
  GC.run_finalization
  GC.run
  VM.uptime
  VM.flags
  VM.system_properties
  VM.command_line
  VM.version
  help
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.start</code> でレコーディング開始、サブコマンドのヘルプは
<code>jcmd &lt;pid&gt; help JFR.start</code> で見る。
</p>
<pre class="example">
$ ./jcmd 7720 JFR.start
 7720:
 Started recording 4. No limit (duration/maxsize/maxage) in use.
  
 Use JFR.dump recording=4 filename=FILEPATH to copy recording data to file.
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.dump</code> でレコーディングファイルを取得する
</p>
<pre class="example">
$ ./jcmd 7720 JFR.dump recording=4 filename=/tmp/7720_002.jfr
7720:
Dumped recording 4, 378.5 kB written to:

/tmp/7720_002.jfr
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.stop</code> でレコーディング終了
</p>
<pre class="example">
$ ./jcmd 7720 JFR.stop
7720:
Must provide either name or recording.
</pre>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> リモートJavaプロセスの監視</h2>
<div class="outline-text-2" id="text-3">
<p>
JMXポートを公開する、一番手軽な方法、jcmdコマンドを用いて、JMX remote port を臨時で空
けて接続する。
</p>
<pre class="example">
jcmd &lt;pid&gt; ManagementAgent.start jmxremote.port=7091 jmxremote.authenticate=false jmxremote.ssl=false
</pre>

<p>
クライアントマシンのJava Mission Control（GUI）からJMX接続して、記録を行う。
</p>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 有用なJavaオプション</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> -XX:StartFlightRecording</h3>
<div class="outline-text-3" id="text-4-1">
<p>
JRockit JVMで実行されるアプリケーションのフライト・レコーダ記録を開始するには、このオ
プションを起動時に指定します。このオプションは、フライト・レコーダを実行時に開始する
start_flightrecording診断コマンドと同等です。詳細は、Oracle JRockit JDKツールを参照し
てください。
</p>

<pre class="example">
java -XX:+FlightRecorder -XX:FlightRecorderOptions=disk=true,maxchunksize=10M -XX:StartFlightRecording=filename=test.jfr myApp
</pre>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> -XX:+PrintFlagsFinal</h3>
<div class="outline-text-3" id="text-4-2">
<p>
JVM終了時にXXパラメータの値を標準出力にダンプする。
</p>
</div>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> よく使うコマンド</h2>
<div class="outline-text-2" id="text-5">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">商用機能の有効化とステータス確認</td>
<td class="left">jcmd &lt;pid&gt; VM.commercial_features</td>
</tr>

<tr>
<td class="left">JMX Agent のリモート起動</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.start</td>
</tr>

<tr>
<td class="left">JMX Agent のローカル起動</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.start_local</td>
</tr>

<tr>
<td class="left">JMX Agent の停止</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.stop</td>
</tr>

<tr>
<td class="left">スレッド一覧の出力</td>
<td class="left">Thread.print</td>
</tr>

<tr>
<td class="left">concurrent のlock に関するスレッド</td>
<td class="left">jcmd &lt;pid&gt; Thread.print -l</td>
</tr>

<tr>
<td class="left">JVM コマンドラインの表示</td>
<td class="left">VM.command_line</td>
</tr>

<tr>
<td class="left">System Properties の表示</td>
<td class="left">VM.system_properties</td>
</tr>

<tr>
<td class="left">該当VMに指定されたJVMオプションの表示 -all で全オプションと値の出力</td>
<td class="left">VM.flags</td>
</tr>

<tr>
<td class="left">GC.run</td>
<td class="left">System.gc() の実行</td>
</tr>

<tr>
<td class="left">ヒープダンプ出力（HPROF形式）-all を指定しない場合にはfull gc がリクエストされる</td>
<td class="left">GC.heap_dump</td>
</tr>
</tbody>
</table>
</div>
</div>

]]></content>
  </entry>
  
</feed>
