<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2015-08-30T22:26:52+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Java道具]jstat -gcの出力を見やすくする]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-30-%5Bjava%E9%81%93%E5%85%B7%5Djstat--gc%E3%81%AE%E5%87%BA%E5%8A%9B%E3%82%92%E8%A6%8B%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B.html"/>
    <updated>2015-08-30T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[java道具]jstat&#8211;gcの出力を見やすくする</id>
    <content type="html"><![CDATA[<p>
<code>jstat -gc</code> でJVMのメモリ仕様状況を確認する際によく使うのですが、次の問題で少し見づら
いと感じましたので、整形用のオレオレスクリプトを作成しました。
</p>




<ul class="org-ul">
<li>出力単位がbyteとなっています、数字長い時目視でメガバイト(mb)への換算が大変</li>
<li>ヘッダ行と値行がズレる時があります</li>
</ul>




<p>
デフォルトの出力形式
</p>


<pre class="example">
$ jstat -gc 10901
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT
55296.0 55296.0  0.0    0.0   334336.0 157179.1  890368.0   23266.0   35748.0 32020.9 5248.0 4068.9      3    0.124   2      0.195    0.320
</pre>




<p>
次はスクリプトで整形後の出力形式(JDK8の場合)
</p>


<pre class="example">
---------------------------------------------
S0  領域 |   54.00 /    0.00 (MB)  |  0.00%
S1  領域 |   54.00 /    0.00 (MB)  |  0.00%
Eden領域 |  326.50 /  170.63 (MB)  | 52.26%
Old 領域 |   22.72 /  869.50 (MB)  |  2.61%
Meta領域 |   31.27 /   34.91 (MB)  | 89.57%
CCPS領域 |    3.97 /   54.00 (MB)  | 77.53%
---------------------------------------------
YGC 回数 |       3 回
YGC 時間 |    0.12 秒
FGC 回数 |       2 回
FGC 時間 |    0.20 秒
---------------------------------------------
</pre>




<p>
コードはgithubに公開しています。
</p>




<p>
<a href="https://github.com/luozengbin/misc-box/blob/master/jvm_memstst.sh">jvm_memstst.sh</a>
</p>




<script src="https://gist.github.com/luozengbin/52d1359f89e88654e6ec.js"></script>


<script src="http://luozengbin.github.io/javascripts/custom/fixgist.js"></script>




<p>
出力加工機能以外、次の便利な機能も提供しています。
</p>


<ul class="org-ul">
<li>JavaプロセスID自動特定する</li>
<li>JAVA_HOMEを自動的に特定する</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Java]OpenJDK8付属ツール実行時エラーの対策]]></title>
    <link href="http://luozengbin.github.io/blog/2015-08-29-%5Btips%5D%5Bjava%5Dopenjdk8%E4%BB%98%E5%B1%9E%E3%83%84%E3%83%BC%E3%83%AB%E5%AE%9F%E8%A1%8C%E6%99%82%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AE%E5%AF%BE%E7%AD%96.html"/>
    <updated>2015-08-29T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][java]openjdk8付属ツール実行時エラーの対策</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">1. プロセスアタッチ出来ない</a></li>
<li><a href="#orgheadline2">2. Metadata does not appear to be polymorphic</a></li>
<li><a href="#orgheadline3">3. unknown CollectedHeap type</a></li>
</ul>
</div>
</div>


<p>
本記事に、OpenJDKの障害は次の環境で確認されました。
</p>




<pre class="example">
$ java -version
openjdk version "1.8.0_60"
OpenJDK Runtime Environment (build 1.8.0_60-b24)
OpenJDK 64-Bit Server VM (build 25.60-b23, mixed mode)

$ uname -a
Linux mimi 4.1.6-1-ARCH #1 SMP PREEMPT Mon Aug 17 08:52:28 CEST 2015 x86_64 GNU/Linux
</pre>




<p>
<!-- more -->
</p>




<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> プロセスアタッチ出来ない</h2>
<div class="outline-text-2" id="text-1">
<pre class="example">
$ /usr/lib/jvm/java-8-openjdk/bin/jinfo -sysprops 22286
Attaching to process ID 22286, please wait...
Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process
sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process
    at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread.execute(LinuxDebuggerLocal.java:163)
    at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach(LinuxDebuggerLocal.java:278)
    at sun.jvm.hotspot.HotSpotAgent.attachDebugger(HotSpotAgent.java:671)
    at sun.jvm.hotspot.HotSpotAgent.setupDebuggerLinux(HotSpotAgent.java:611)
    at sun.jvm.hotspot.HotSpotAgent.setupDebugger(HotSpotAgent.java:337)
    at sun.jvm.hotspot.HotSpotAgent.go(HotSpotAgent.java:304)
    at sun.jvm.hotspot.HotSpotAgent.attach(HotSpotAgent.java:140)
    at sun.jvm.hotspot.tools.Tool.start(Tool.java:185)
    at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
    at sun.jvm.hotspot.tools.JInfo.main(JInfo.java:138)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at sun.tools.jinfo.JInfo.runTool(JInfo.java:108)
    at sun.tools.jinfo.JInfo.main(JInfo.java:76)
Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process
    at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach0(Native Method)
    at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.access$100(LinuxDebuggerLocal.java:62)
    at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$1AttachTask.doit(LinuxDebuggerLocal.java:269)
    at sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal$LinuxDebuggerLocalWorkerThread.run(LinuxDebuggerLocal.java:138)
</pre>

<p>
同じ障害に遭遇した方々の記録
</p>
<ul class="org-ul">
<li><a href="https://thenonsensetechlogs.wordpress.com/2014/04/09/error-attaching-to-process-sun-jvm-hotspot-debugger-debuggerexception-cant-attach-to-the-process-solved/">Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process { solved }</a></li>
<li><a href="http://d.hatena.ne.jp/Kazuhira/20150811/1439304298">Linuxでjmap使用時に「Can&#8217;t attach to the process」と言われたら</a></li>
</ul>

<p>
straceで見たら、 <a href="http://surf.ml.seikei.ac.jp/~nakano/JMwww/html/LDP_man-pages/man2/ptrace.2.html">ptrace</a> システムコールのPTRACE_ATTACHリクエストで実行中のJavaプロセス
をアタッチするところで <code>Operation not permitted</code> 理由に怒られた。
</p>
<pre class="example">
  |$ strace -ff /usr/lib/jvm/java-8-openjdk/bin/jinfo -sysprops 22286
  |（中略）
  |[pid 24277] close(7)                    = 0
**|[pid 24277] ptrace(PTRACE_ATTACH, 22286, 0, 0) = -1 EPERM (Operation not permitted)
  |[pid 24277] futex(0x7fef94008854, FUTEX_WAKE_OP_PRIVATE, 1, 1, 0x7fef94008850, {FUTEX_OP_SET, 0, FUTEX_OP_CMP_GT, 1}) = 1
  |[pid 24263] &lt;... futex resumed&gt; )       = 0
  |[pid 24277] futex(0x7fef9414b154, FUTEX_WAIT_PRIVATE, 3, NULL &lt;unfinished ...&gt;
  |[pid 24263] futex(0x7fef94008828, FUTEX_WAKE_PRIVATE, 1) = 0
  |[pid 24263] write(2, "Error attaching to process: ", 28Error attaching to process: ) = 28
  |[pid 24274] futex(0x7fef940bb654, FUTEX_WAIT_BITSET_PRIVATE, 57, {29187, 107955715}, ffffffff &lt;unfinished ...&gt;
**|[pid 24263] write(2, "sun.jvm.hotspot.debugger.Debugge"..., 71sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process) = 71
  |[pid 24263] write(2, "\n", 1
</pre>

<p>
これはLinuxカーネルのセキュリティモジュール <a href="https://www.kernel.org/doc/Documentation/security/Yama.txt">yama</a> の制限がかかっいるのが原因です。
下記手順でこの制限を解除すれば、エラーが解消されます。
</p>

<pre class="example">
$ echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
</pre>

<p>
yamaによるptrace制限に関して下記が分かやすいと思います。
</p>

<p>
<a href="https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace_Protection">https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace_Protection</a>
</p>

<p>
もっと簡単な対応方法として、sudoでrootユーザで実行すれば良いでしょう。
</p>
</div>
</div>




<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><span class="section-number-2">2</span> Metadata does not appear to be polymorphic</h2>
<div class="outline-text-2" id="text-2">
<pre class="example">
$ /usr/lib/jvm/java-8-openjdk/bin/jinfo -sysprops 22286
Attaching to process ID 22286, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.60-b23
Exception in thread "main" java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at sun.tools.jinfo.JInfo.runTool(JInfo.java:108)
    at sun.tools.jinfo.JInfo.main(JInfo.java:76)
Caused by: java.lang.InternalError: Metadata does not appear to be polymorphic
    at sun.jvm.hotspot.types.basic.BasicTypeDataBase.findDynamicTypeForAddress(BasicTypeDataBase.java:278)
    at sun.jvm.hotspot.runtime.VirtualBaseConstructor.instantiateWrapperFor(VirtualBaseConstructor.java:102)
    at sun.jvm.hotspot.oops.Metadata.instantiateWrapperFor(Metadata.java:68)
    at sun.jvm.hotspot.memory.SystemDictionary.getSystemKlass(SystemDictionary.java:127)
    at sun.jvm.hotspot.runtime.VM.readSystemProperties(VM.java:879)
    at sun.jvm.hotspot.runtime.VM.getSystemProperties(VM.java:873)
    at sun.jvm.hotspot.tools.SysPropsDumper.run(SysPropsDumper.java:44)
    at sun.jvm.hotspot.tools.JInfo.run(JInfo.java:94)
    at sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:260)
    at sun.jvm.hotspot.tools.Tool.start(Tool.java:223)
    at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
    at sun.jvm.hotspot.tools.JInfo.main(JInfo.java:138)
    ... 6 more
</pre>

<p>
原因はよくわからないのですが、<a href="https://twitter.com/cero_t/status/616551729954295808">twitter上で流れた情報</a> によるとdebuginfoを入れれば問題が
回避される。実際に確認したところで確かに回避出来た。debuginfo入れ禁止の商用環境や
debuginfoが簡単に導入出来ないdistroには寂しいよね！
</p>

<p>
yumが使える環境は、次のように <code>debuginfo-install</code> で簡単にインストールが出来ます。
</p>
<pre class="example">
$ sudo debuginfo-install java-1.8.0-openjdk-devel
</pre>
</div>
</div>




<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="section-number-2">3</span> unknown CollectedHeap type</h2>
<div class="outline-text-2" id="text-3">
<pre class="example">
$ /usr/lib/jvm/java-8-openjdk/bin/jmap -heap 22286
Attaching to process ID 22286, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.60-b23

using thread-local object allocation.
Parallel GC with 4 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 0
   MaxHeapFreeRatio         = 100
   MaxHeapSize              = 1367343104 (1304.0MB)
   NewSize                  = 455606272 (434.5MB)
   MaxNewSize               = 455606272 (434.5MB)
   OldSize                  = 911736832 (869.5MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)

Heap Usage:
Exception in thread "main" java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at sun.tools.jmap.JMap.runTool(JMap.java:201)
    at sun.tools.jmap.JMap.main(JMap.java:130)
Caused by: java.lang.RuntimeException: unknown CollectedHeap type : class sun.jvm.hotspot.gc_interface.CollectedHeap
    at sun.jvm.hotspot.tools.HeapSummary.run(HeapSummary.java:144)
    at sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:260)
    at sun.jvm.hotspot.tools.Tool.start(Tool.java:223)
    at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
    at sun.jvm.hotspot.tools.HeapSummary.main(HeapSummary.java:49)
    ... 6 more
</pre>

<p>
このエラーもdebuginfoを入れれば、回避される。
</p>

<p>
↓OpenJDK7でバグ報告された記録、残念ながら WONTFIX 状態でした。
</p>

<p>
<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1010786">https://bugzilla.redhat.com/show_bug.cgi?id=1010786</a>
</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[小道具][Java]スタックサイズ監視スクリプト]]></title>
    <link href="http://luozengbin.github.io/blog/2015-07-02-%5B%E5%B0%8F%E9%81%93%E5%85%B7%5D%5Bjava%5D%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B5%E3%82%A4%E3%82%BA%E7%9B%A3%E8%A6%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88.html"/>
    <updated>2015-07-02T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[小道具][java]スタックサイズ監視スクリプト</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. スクリプト</a></li>
<li><a href="#sec-3">3. テスト用プログラム</a></li>
<li><a href="#sec-4">4. 監視してみる</a></li>
<li><a href="#sec-5">5. 出力形式</a></li>
<li><a href="#sec-6">6. 2015/08/05 更新</a></li>
</ul>
</div>
</div>


<p>
<code>/proc/&lt;pid&gt;/smaps</code> プロセスメモリマッピングファイルからjavaスレッドのスタック使用状
況をいい感じに出力するスクリプトを作りました。
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>java version &#8220;1.8.0_45&#8221;
</li>
<li>x86_64 gnu/linux
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> スクリプト</h2>
<div class="outline-text-2" id="text-2">
<p>
スクリプトの元ネタは以前の記事を参考してください。 <a href="2015-04-22-%5B%E8%AA%BF%E6%9F%BB%5Djvm%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html">jvmのスタックサイズについて</a>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #74af68;">#</span><span style="color: #74af68;">!/bin/</span><span style="color: #ffad29; font-weight: bold;">sh</span>

<span style="color: #74af68;">###########################################################################</span>
<span style="color: #74af68;"># </span><span style="color: #74af68;">jvm_stacksize.sh - take a jvm stack size snapshot</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">Authors: Akira Wakana <a href="mailto:jalen.cn%40gmail.com">&lt;jalen.cn@gmail.com&gt;</a></span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">This program is free software: you can redistribute it and/or modify</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">it under the terms of the GNU General Public License as published by</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">the Free Software Foundation, version 3 of the License.</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">This program is distributed in the hope that it will be useful,</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">GNU General Public License for more details.</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">You should have received a copy of the GNU General Public License</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">along with this program.  If not, see http://www.gnu.org/licenses</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;"># </span><span style="color: #74af68;">Usage:</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">$jvm_stacksize.sh &lt;JVM ProcessID&gt;</span>
<span style="color: #74af68;">###########################################################################</span>

<span style="color: #dbdb95;">PID</span>=$<span style="color: #dbdb95;">1</span>

ps ${<span style="color: #dbdb95;">PID</span>} | grep [j]ava &gt; /dev/null || {
    <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"-----------------------------------------------------------------------"</span>
    ps -ef  | grep [j]ava
    <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"-----------------------------------------------------------------------"</span>
    <span style="color: #23d7d7;">echo</span> -n <span style="color: #e67128;">"please input the java process id: "</span>
    <span style="color: #23d7d7;">read</span> PID
}

<span style="color: #23d7d7;">printf</span> <span style="color: #e67128;">"[ PID ]\t[StackSize(kB)]\t[GuardPage(kB)]\t[UsedSize(kB)]\t[Thread Name]\n"</span>

<span style="color: #74af68;"># </span><span style="color: #74af68;">jstack&#12398;&#20986;&#21147;&#32080;&#26524;&#12363;&#12425;&#12473;&#12524;&#12483;&#12489;ID&#12392;&#21517;&#21069;&#12434;&#25277;&#20986;&#12377;&#12427;</span>
jstack ${<span style="color: #dbdb95;">PID</span>} | grep nid | sed -e <span style="color: #e67128;">"s/^\"\(.*\)\".*nid=\(0x[0-9|a-z]*\).*$/\2,\1/"</span> | sort | <span style="color: #ffad29; font-weight: bold;">while </span><span style="color: #23d7d7;">read</span> line
<span style="color: #ffad29; font-weight: bold;">do</span>
    <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;ID&#12434;&#20999;&#12426;&#20986;&#12377;</span>
    <span style="color: #dbdb95;">pid_hex</span>=<span style="color: #fa8072;">`echo "${line}" | awk -F"," '{print $1}'`</span>

    <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;&#21517;&#12434;&#20999;&#12426;&#20986;&#12377;</span>
    <span style="color: #dbdb95;">thread_name</span>=<span style="color: #fa8072;">`echo "${line}" | awk -F"," '{print $2}'`</span>

    <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;ID&#12434;10&#36914;&#25968;&#12395;&#22793;&#25563;</span>
    <span style="color: #dbdb95;">pid</span>=<span style="color: #fa8072;">`printf '%d\n' ${pid_hex}`</span>

    <span style="color: #74af68;"># </span><span style="color: #74af68;">/proc/&lt;pid&gt;/smaps &#12501;&#12449;&#12452;&#12523;&#12363;&#12425;&#12473;&#12479;&#12483;&#12463;&#12469;&#12452;&#12474;&#12289;&#12460;&#12540;&#12489;&#12506;&#12540;&#12472;&#12469;&#12452;&#12474;&#12434;&#21462;&#24471;&#12377;&#12427;</span>
    <span style="color: #dbdb95;">guard_page</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps | grep -B16 "stack:${pid}" | grep -e "^Size:" | awk '{print $2}'`</span>
    <span style="color: #dbdb95;">stack_page</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps | grep -A15 "stack:${pid}" | grep -e "^Size:" | awk '{print $2}'`</span>
    <span style="color: #dbdb95;">used_size</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps  | grep -A15 "stack:${pid}" | grep -e "^Rss:" | awk '{print $2}'`</span>
    <span style="color: #dbdb95;">stack_size</span>=<span style="color: #fa8072;">`expr ${guard_page} + ${stack_page}`</span>
    <span style="color: #23d7d7;">printf</span> <span style="color: #e67128;">"%7d\t%15s\t%15s\t%14s\t%s\n"</span> <span style="color: #e67128;">"${pid}"</span> <span style="color: #e67128;">"${stack_size}"</span> <span style="color: #e67128;">"${guard_page}"</span> <span style="color: #e67128;">"${used_size}"</span> <span style="color: #e67128;">"${thread_name}"</span>
<span style="color: #ffad29; font-weight: bold;">done</span>
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> テスト用プログラム</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffad29; font-weight: bold;">package</span> <span style="color: #008b8b;">test01</span>;

<span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #ffad29; font-weight: bold;">class</span> <span style="color: #34cae2;">TestTask</span> <span style="color: #ffad29; font-weight: bold;">implements</span> <span style="color: #34cae2;">Runnable</span> {

    <span style="color: #008b8b;">@Override</span>
    <span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #34cae2;">void</span> <span style="color: #00ede1; font-weight: bold;">run</span>() {
        add1(1);
    }

    <span style="color: #ffad29; font-weight: bold;">private</span> <span style="color: #34cae2;">int</span> <span style="color: #00ede1; font-weight: bold;">add1</span>(<span style="color: #34cae2;">int</span> <span style="color: #dbdb95;">a</span>) {
        <span style="color: #ffad29; font-weight: bold;">try</span> {
            Thread.sleep(50);
        } <span style="color: #ffad29; font-weight: bold;">catch</span> (<span style="color: #34cae2;">InterruptedException</span> <span style="color: #dbdb95;">e</span>) {
            e.printStackTrace();
        }

        <span style="color: #ffad29; font-weight: bold;">return</span> add2(a++);
    }

    <span style="color: #ffad29; font-weight: bold;">private</span> <span style="color: #34cae2;">int</span> <span style="color: #00ede1; font-weight: bold;">add2</span>(<span style="color: #34cae2;">int</span> <span style="color: #dbdb95;">a</span>) {
        <span style="color: #74af68;">//</span><span style="color: #74af68;">add1 -&gt; add2 --&gt; add1 &#28961;&#38480;&#12523;&#12540;&#12503;&#12398;&#29366;&#24907;&#12391;</span>
        <span style="color: #74af68;">//</span><span style="color: #74af68;">&#12473;&#12479;&#12483;&#12463;&#12434;&#39135;&#12356;&#28528;&#12377;</span>
        <span style="color: #ffad29; font-weight: bold;">return</span> add1(a--);
    }

    <span style="color: #ffad29; font-weight: bold;">public</span> <span style="color: #ffad29; font-weight: bold;">static</span> <span style="color: #34cae2;">void</span> <span style="color: #00ede1; font-weight: bold;">main</span>(<span style="color: #34cae2;">String</span>[] <span style="color: #dbdb95;">args</span>) <span style="color: #ffad29; font-weight: bold;">throws</span> <span style="color: #34cae2;">Exception</span> {

        <span style="color: #34cae2;">Thread</span> <span style="color: #dbdb95;">t1</span> = <span style="color: #ffad29; font-weight: bold;">new</span> <span style="color: #34cae2;">Thread</span>(<span style="color: #ffad29; font-weight: bold;">new</span> <span style="color: #34cae2;">TestTask</span>());
        <span style="color: #34cae2;">Thread</span> <span style="color: #dbdb95;">t2</span> = <span style="color: #ffad29; font-weight: bold;">new</span> <span style="color: #34cae2;">Thread</span>(<span style="color: #ffad29; font-weight: bold;">new</span> <span style="color: #34cae2;">TestTask</span>());
        t1.start();
        t2.start();

        t1.join();
        t2.join();
    }

}
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 監視してみる</h2>
<div class="outline-text-2" id="text-4">
<video controls>
   <source src="video/2015-07-21_jvm_stack_watch.mp4" />
</video>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 出力形式</h2>
<div class="outline-text-2" id="text-5">
<pre class="example">
[ PID ] [StackSize(kB)] [GuardPage(kB)] [UsedSize(kB)]  [Thread Name]
  16559            1044              12            116  main
  16560            1112               4             92  GC task thread#0 (ParallelGC)
  16561            1028               4              8  GC task thread#1 (ParallelGC)
  16562            1028               4              8  GC task thread#2 (ParallelGC)
  16563            1028               4              8  GC task thread#3 (ParallelGC)
  16564           12336               4             56  VM Thread
  16565            1028              12             88  Reference Handler
  16566            1028              12             88  Finalizer
  16567            1028              12             92  Signal Dispatcher
  16568            1028              12             20  C2 CompilerThread0
  16569            1028              12              8  C2 CompilerThread1
  16570            1028              12             12  C1 CompilerThread2
  16571            1028              12              8  Service Thread
  16572            1028               4              8  VM Periodic Task Thread
  16573            1028              12            428  Thread-0
  16583            1028              12            228  Thread-1
  16613            1028              12             12  Attach Listener
</pre>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">項目名</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">PID</td>
<td class="left">JavaスレッドのプロセスID</td>
</tr>

<tr>
<td class="left">StackSize</td>
<td class="left">Javaスタック＋Nativeスタックのサイズ (kB)</td>
</tr>

<tr>
<td class="left">GuardPage</td>
<td class="left">スタック保護ページ (kB)</td>
</tr>

<tr>
<td class="left">UsedSize</td>
<td class="left">実際使った物理メモリサイズ (kB)</td>
</tr>

<tr>
<td class="left">Thread Name</td>
<td class="left">スレッド名</td>
</tr>
</tbody>
</table>

<p>
バッチリ！便利な道具が１つ増えました。
</p>
</div>
</div>


<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 2015/08/05 更新</h2>
<div class="outline-text-2" id="text-6">
<p>
前の実装は <code>watch</code> コマンドでスクリプトを繰り返し実行させスタックサイズの監視をしてい
たのですが、繰り返しサイクルで毎回jstackでスレッドダンプを取得しているため若干JVMにオー
バヘッドがかかる。特にスレッドを多数起動されたアプリケーションサーバの場合性能へ影響
が無視できないので、少しスクリプトの実装シナリオを変えて改善してみました。
</p>

<p>
基本コンセプトは
</p>

<ol class="org-ol">
<li><code>jstack</code> を１回のみ実行する、その結果(スレッドダンプ)をtmpファイルで保持する
</li>
<li><code>ps -H &lt;PID&gt;</code> でスレッドIDを取得して、1のスレッドダンプからスレッド名を引き
</li>
<li>スレッドダンプから該当するものがない場合、スレッドダンプが古いと判断し再度
<code>jstack</code> で新しいスレッドダンプを取る
</li>
</ol>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #74af68;">#</span><span style="color: #74af68;">!/bin/</span><span style="color: #ffad29; font-weight: bold;">sh</span>
<span style="color: #74af68;">###########################################################################</span>
<span style="color: #74af68;"># </span><span style="color: #74af68;">jvm_stacksize.sh - take jvm stack size snapshot</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">Authors: Akira Wakana <a href="mailto:jalen.cn%40gmail.com">&lt;jalen.cn@gmail.com&gt;</a></span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">This program is free software: you can redistribute it and/or modify</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">it under the terms of the GNU General Public License as published by</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">the Free Software Foundation, version 3 of the License.</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">This program is distributed in the hope that it will be useful,</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">GNU General Public License for more details.</span>
<span style="color: #74af68;">#</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">You should have received a copy of the GNU General Public License</span>
<span style="color: #74af68;">#    </span><span style="color: #74af68;">along with this program.  If not, see <a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">&lt;http://www.gnu.org/licenses/&gt;.</a></span><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">
</a><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">#</a></span><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">
</a><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID"># </a></span><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">Usage:</a></span><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">
</a><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">#    </a></span><span style="color: #74af68;"><a href="http://www.gnu.org/licenses/&gt;.
#
# Usage:
#    $jvm_stacksize.sh &lt;JVM ProcessID">$jvm_stacksize.sh &lt;JVM ProcessID&gt;</a></span>
<span style="color: #74af68;">###########################################################################</span>

<span style="color: #00ede1; font-weight: bold;">print_stacksize</span>()
{
    rm -rf ${<span style="color: #dbdb95;">tmpdir</span>}/stacksize.txt
    <span style="color: #23d7d7;">printf</span> <span style="color: #e67128;">"[ PID ]\t[StackSize(kB)]\t[GuardPage(kB)]\t[UsedSize(kB)]\t[Thread Name]\n"</span>
    ps h -L --format=lwp ${<span style="color: #dbdb95;">PID</span>} | grep -v <span style="color: #e67128;">"${PID}"</span> | <span style="color: #ffad29; font-weight: bold;">while </span><span style="color: #23d7d7;">read</span> pid
    <span style="color: #ffad29; font-weight: bold;">do</span>
        <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;ID</span>
        <span style="color: #dbdb95;">pid_hex</span>=<span style="color: #fa8072;">`printf '%#x\n' $pid`</span>

        <span style="color: #74af68;"># </span><span style="color: #74af68;">&#12473;&#12524;&#12483;&#12489;&#21517;&#12434;&#20999;&#12426;&#20986;&#12377;</span>
        <span style="color: #dbdb95;">threadinfo</span>=<span style="color: #fa8072;">`cat ${threadtdump} | fgrep " nid=${pid_hex} " | sed -e "s/^\"\(.*\)\".*nid=\(0x[0-9|a-z]*\).*$/\2,\1/"`</span>
        <span style="color: #ffad29; font-weight: bold;">if</span> [ <span style="color: #e67128;">"${threadinfo}"</span> == <span style="color: #e67128;">""</span> ]; <span style="color: #ffad29; font-weight: bold;">then</span>
            jstack ${<span style="color: #dbdb95;">PID</span>} &gt; ${<span style="color: #dbdb95;">threadtdump</span>}
            <span style="color: #dbdb95;">threadinfo</span>=<span style="color: #fa8072;">`cat ${threadtdump} | fgrep " nid=${pid_hex} " | sed -e "s/^\"\(.*\)\".*nid=\(0x[0-9|a-z]*\).*$/\2,\1/"`</span>
        <span style="color: #ffad29; font-weight: bold;">fi</span>
        <span style="color: #dbdb95;">thread_name</span>=<span style="color: #fa8072;">`echo "${threadinfo}" | awk -F"," '{print $2}'`</span>

        <span style="color: #74af68;"># </span><span style="color: #74af68;"># /proc/&lt;pid&gt;/smaps &#12501;&#12449;&#12452;&#12523;&#12363;&#12425;&#12473;&#12479;&#12483;&#12463;&#12469;&#12452;&#12474;&#12289;&#12460;&#12540;&#12489;&#12506;&#12540;&#12472;&#12469;&#12452;&#12474;&#12434;&#21462;&#24471;&#12377;&#12427;</span>
        <span style="color: #dbdb95;">guard_page</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps | grep -B16 "stack:${pid}" | grep -e "^Size:" | awk '{print $2}'`</span>
        <span style="color: #dbdb95;">stack_page</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps | grep -A15 "stack:${pid}" | grep -e "^Size:" | awk '{print $2}'`</span>
        <span style="color: #dbdb95;">used_size</span>=<span style="color: #fa8072;">`cat /proc/${PID}/smaps  | grep -A15 "stack:${pid}" | grep -e "^Rss:" | awk '{print $2}'`</span>
        <span style="color: #dbdb95;">stack_size</span>=<span style="color: #fa8072;">`expr ${guard_page} + ${stack_page}`</span>
        <span style="color: #23d7d7;">printf</span> <span style="color: #e67128;">"%7d\t%15s\t%15s\t%14s\t%s\n"</span> <span style="color: #e67128;">"${pid}"</span> <span style="color: #e67128;">"${stack_size}"</span> <span style="color: #e67128;">"${guard_page}"</span> <span style="color: #e67128;">"${used_size}"</span> <span style="color: #e67128;">"${thread_name}"</span>
    <span style="color: #ffad29; font-weight: bold;">done</span> &gt; ${<span style="color: #dbdb95;">tmpdir</span>}/stacksize.txt
    sort -r -k4,4 ${<span style="color: #dbdb95;">tmpdir</span>}/stacksize.txt
}

<span style="color: #00ede1; font-weight: bold;">finally_func</span>() {
    <span style="color: #dbdb95;">RET</span>=$<span style="color: #dbdb95;">?</span>
    <span style="color: #ffad29; font-weight: bold;">if</span> [ -d ${<span style="color: #dbdb95;">tmpdir</span>} ]; <span style="color: #ffad29; font-weight: bold;">then</span>
        rm -rf ${<span style="color: #dbdb95;">tmpdir</span>}
    <span style="color: #ffad29; font-weight: bold;">fi</span>
    <span style="color: #ffad29; font-weight: bold;">exit</span> ${<span style="color: #dbdb95;">RET</span>}
}

<span style="color: #ffad29; font-weight: bold;">trap</span> finally_func EXIT

<span style="color: #dbdb95;">PID</span>=$<span style="color: #dbdb95;">1</span>

ps ${<span style="color: #dbdb95;">PID</span>} | grep [j]ava &gt; /dev/null || {
    <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"-----------------------------------------------------------------------"</span>
    ps -ef  | grep [j]ava
    <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"-----------------------------------------------------------------------"</span>
    <span style="color: #23d7d7;">echo</span> -n <span style="color: #e67128;">"please input the java process id: "</span>
    <span style="color: #23d7d7;">read</span> PID
}

<span style="color: #23d7d7;">export</span> PID

<span style="color: #23d7d7;">export</span> <span style="color: #dbdb95;">tmpdir</span>=<span style="color: #fa8072;">`mktemp -d`</span>

<span style="color: #23d7d7;">export</span> <span style="color: #dbdb95;">threadtdump</span>=${<span style="color: #dbdb95;">tmpdir</span>}/${<span style="color: #dbdb95;">PID</span>}.tdump

jstack ${<span style="color: #dbdb95;">PID</span>} &gt; ${<span style="color: #dbdb95;">threadtdump</span>}

<span style="color: #23d7d7;">export</span> -f print_stacksize

watch <span style="color: #e67128;">"bash -c print_stacksize"</span>

rm -rf ${<span style="color: #dbdb95;">tmpdir</span>}
</pre>
</div>

<video controls>
   <source src="video/2015-08-05_jvm_stacksize1.mp4" />
</video>

<p>
一般的なアプリでは実行中スレッドの数が頻繁に変わらないので、これで満足しています。;-)
</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[tips][Java]メモリswapによる無応答]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-29-%5Btips%5D%5Bjava%5D%E3%83%A1%E3%83%A2%E3%83%AAswap%E3%81%AB%E3%82%88%E3%82%8B%E7%84%A1%E5%BF%9C%E7%AD%94.html"/>
    <updated>2015-06-29T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[tips][java]メモリswapによる無応答</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. 現象</a></li>
<li><a href="#sec-3">3. 分析するためのデータを取る</a></li>
<li><a href="#sec-4">4. 原因／考察</a></li>
</ul>
</div>
</div>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<p>
業務用の開発サーバ
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">項目</th>
<th scope="col" class="left">スペック</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">CPU</td>
<td class="left">Intel(R) Core(TM)2 Duo CPU E8400 3.00GHz</td>
</tr>

<tr>
<td class="left">Core数</td>
<td class="left">2</td>
</tr>

<tr>
<td class="left">Memory</td>
<td class="left">7G弱</td>
</tr>

<tr>
<td class="left">OS</td>
<td class="left">Red Hat Enterprise Linux Server release 5.8 (Tikanga)</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Middleware</td>
<td class="left">java 1.7.0_75</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">Weblogic 10.3.5.0</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">Oracle BPM Suite 11g (メモリを多めに割り当てた：6Gぐらい)</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">※他にものもの結構乗っている</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 現象</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>特定のWeblogic管理対象サーバから応答が時々遅い(数秒程度)
</li>
<li>Full GCが起きると状況が悪化し、FullGCが終わらない
</li>
</ul>

<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 分析するためのデータを取る</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>GCログからParNew処理が5秒以上のレコードを時間を抽出する。
</li>
</ul>
<pre class="example">
2015-06-24T18:08:32.220+0900:  5.2666840
2015-06-25T01:50:56.578+0900:  5.6046080
2015-06-25T04:50:52.234+0900:  6.0052120
2015-06-25T12:05:52.068+0900:  9.2609380
2015-06-25T13:20:37.953+0900:  5.0946760
2015-06-25T13:20:58.403+0900:  5.6533820
2015-06-25T20:24:49.357+0900:  7.3204730
2015-06-25T21:16:10.126+0900:  6.7909460
2015-06-25T22:50:58.756+0900:  5.8355060
2015-06-26T01:50:50.893+0900:  9.3892250
2015-06-26T04:50:53.219+0900:  13.1395190
2015-06-26T07:50:54.425+0900:  11.7807430
2015-06-26T07:51:07.269+0900:  5.2793300
2015-06-26T10:50:51.114+0900:  9.3924480
2015-06-26T13:17:06.286+0900:  6.2010290
2015-06-26T13:17:54.396+0900:  7.3440480
2015-06-26T13:34:05.326+0900:  7.6791300
2015-06-26T13:51:04.590+0900:  10.2367630
2015-06-26T14:00:00.516+0900:  5.7046080
2015-06-26T14:00:13.463+0900:  6.6349530
2015-06-26T14:23:00.180+0900:  5.6609030
2015-06-26T14:26:28.796+0900:  7.6549640
2015-06-26T14:27:00.169+0900:  11.8500770
2015-06-26T14:29:39.363+0900:  7.1499710
2015-06-26T14:30:24.067+0900:  5.6382340
2015-06-26T14:31:45.304+0900:  10.1924060
2015-06-26T14:32:00.774+0900:  9.6242400
2015-06-26T16:51:18.422+0900:  9.6966490
2015-06-26T16:51:45.363+0900:  6.2090530
2015-06-26T18:30:49.993+0900:  6.2954670
2015-06-26T18:38:00.437+0900:  8.8749850
2015-06-26T18:50:00.391+0900:  7.4192490
2015-06-26T18:54:00.271+0900:  6.4426840
2015-06-26T18:54:08.234+0900:  5.7452440
2015-06-27T01:50:50.387+0900:  5.8063930
2015-06-27T01:51:05.004+0900:  5.2115420
2015-06-27T04:50:58.781+0900:  12.9891770
2015-06-27T04:51:35.039+0900:  5.7282510
2015-06-27T07:50:51.112+0900:  13.1250670
2015-06-27T07:51:06.604+0900:  6.5727200
2015-06-27T07:51:29.483+0900:  5.3706130
2015-06-27T07:51:36.469+0900:  7.0014700
2015-06-27T07:51:49.055+0900:  7.4964390
2015-06-27T07:52:01.446+0900:  5.2537540
2015-06-27T08:01:04.920+0900:  21.8820470
2015-06-27T09:53:02.648+0900:  7.4830120
2015-06-27T10:50:52.478+0900:  12.4821770
2015-06-27T10:51:07.595+0900:  6.6430700
2015-06-27T10:51:34.192+0900:  5.4682220
2015-06-27T10:51:59.431+0900:  5.8981600
2015-06-27T13:50:54.701+0900:  13.1269190
2015-06-27T13:52:23.353+0900:  6.3293780
2015-06-27T16:46:06.634+0900:  7.5433970
2015-06-28T04:51:06.881+0900:  5.2944910
2015-06-28T13:50:55.136+0900:  7.2090390
2015-06-28T16:50:52.379+0900:  6.3410470
2015-06-28T17:01:07.773+0900:  6.1038880
2015-06-28T19:50:50.750+0900:  7.1304960
2015-06-28T19:50:59.538+0900:  14.1206920
2015-06-28T19:51:39.786+0900:  7.8585130
2015-06-28T20:10:05.988+0900:  5.1535220
2015-06-28T22:46:07.996+0900:  6.3876340
2015-06-28T22:50:56.687+0900:  5.4313050
2015-06-29T01:51:06.697+0900:  7.4033850
2015-06-29T05:24:56.775+0900:  6.1023960
2015-06-29T06:01:13.724+0900:  6.7346550
2015-06-29T07:16:11.399+0900:  21.2494760
2015-06-29T07:50:59.386+0900:  5.9733680
2015-06-29T10:11:13.076+0900:  10.1998490
2015-06-29T10:51:20.998+0900:  10.4616600
2015-06-29T11:02:06.230+0900:  6.6641290
</pre>

<p>
図形にPlotしてみたら、ParNewが高いGCの時間帯があんまり規則がないので、定期イベントに
よるものではないと判断した。
</p>


<div class="figure">
<p><img src="img/2015-06-29-ParNewGC_TimeChart.png" alt="2015-06-29-ParNewGC_TimeChart.png" />
</p>
</div>

<ul class="org-ul">
<li>FullGC時システムリソースの変化状況
</li>
</ul>
<pre class="example">
$ vmstat 5 60
 1|procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
 2| r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 3| 0  0 3379376 115268   9804 467464   12    9   107    34    1    1  8  2 89  1  0
 4| 0  0 3379376 113584   9808 468660    0    0   237    41  512  719  4  1 93  1  0
 5| 0  1 3377744  95484   9828 469060  749    0   825    15  567  793  5  1 78 16  0
 6| 0  1 3369436  80108   9836 469092 3175    0  3175    44  471  759  1  1 50 49  0
 7| 0  1 3360436  60896   9836 469072 3807    0  3807     3  451  776  0  1 49 49  0
 8| 0  1 3352216  48620   9844 465784 3375  155  3375   158  450  744  0  1 50 49  0
 9| 0  1 3347272  51844   9804 450912 2879  874  2879   878  568  739  1  2 49 49  0
10| 0  1 3339972  49380   9652 444336 2601  541  2601   558  551  697  0  1 47 52  0
11| 1  1 3336692  50752   9560 434856 2364  768  2364   768  605  692  1  1 49 49  0
12| 1  1 3332740  52108   9416 425016 2293  761  2293   791  604  682  1  1 49 49  0
13| 0  1 3325100  52224   9400 412236 3399  662  3399   675  564  730  0  1 50 49  0
14| 0  1 3320168  48248   9336 405168 2868  530  2868   533  513  717  0  1 49 49  0
</pre>
<p>
5行目はFullGC実施のタイミングです。5行目以降si/so/si/boの数値が上がる。
</p>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 原因／考察</h2>
<div class="outline-text-2" id="text-4">
<p>
swpd列の値を見れば原因は明白ですね、物理メモリが足らずJavaプロセスのメモリが大半スワー
プアウトされた、FullGCを掛けるとオブジェクトの参照を検査するためにヒープ全体を舐める。
メモリから追い出されたヒープメモリをディスクから読み戻し、また読み戻した分の領域を確
報するため、相対的に使っていないメモリをディスクに追い出す処理が激しく繰り返した。
</p>

<ul class="org-ul">
<li>Javaプロセスのヒープ／Permに物理メモリの容量以上を割り当てしては行けない
</li>
<li>Swapと共にFullGCが起きると、 <code>kill -9</code> で強制停止する
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]JavaBeans仕様を再認識する]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-13-%5B%E3%83%A1%E3%83%A2%5Djavabeans%E4%BB%95%E6%A7%98%E3%82%92%E5%86%8D%E8%AA%8D%E8%AD%98%E3%81%99%E3%82%8B.html"/>
    <updated>2015-06-13T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]javabeans仕様を再認識する</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 仕様のゴール</a></li>
<li><a href="#sec-2">2. JavaBeansとは</a></li>
<li><a href="#sec-3">3. JavaBeansの出番</a></li>
<li><a href="#sec-4">4. APIパッケージの概要</a></li>
<li><a href="#sec-5">5. よく出てくるクラス</a></li>
<li><a href="#sec-6">6. サードパーティライブラリ</a></li>
<li><a href="#sec-7">7. 参考情報</a></li>
</ul>
</div>
</div>


<p>
勉強メモ
</p>




<p>
<!-- more -->
</p>




<p>
JCPサイト <code>JavaBeans</code> で検索したら <a href="https://jcp.org/en/jsr/summary?id=javabeans">;-(</a> EJBの仕様しかなかったで、JavaBeans APIで検索
するとヒットしました。
</p>




<p>
これがが一番わかり易いと思います。→ <a href="http://otndnld.oracle.co.jp/tech/java/htdocs/java_roadmap/javabean/listing.htm">Oracle Javaロードマップ:JavaBeans</a>
</p>




<p>
公式の仕様はここ → <a href="http://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/">JavaBeans Spec</a>
</p>




<p>
仕様変更履歴
</p>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">&#xa0;</th>
<th scope="col" class="right">仕様のバージョン</th>
<th scope="col" class="left">JDKバージョン</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1996</td>
<td class="right">1.0.0</td>
<td class="left">JDK1.1</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="right">1997</td>
<td class="right">1.0.1</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>


<p>
<a href="http://ja.wikipedia.org/wiki/Java_Community_Process">JCP設立</a> されるまで策定された仕様なのでJSR番号が付いていないですね。
1997以降仕様更新あり？なし？分からない、掲示がないので恐らく大きな更新がないでしょう。
</p>




<p>
PDF版は114ページで結構のボリュームです。
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 仕様のゴール</h2>
<div class="outline-text-2" id="text-1">
<p>
JavaBeans Specより
</p>
<pre class="example">
The goal of the JavaBeans APIs is to define a software component model for Java, so
that thirdparty ISVs can create and ship Java components that can be composed
together into applica-tions by end users.
</pre>

<p>
<a href="http://otndnld.oracle.co.jp/tech/java/htdocs/java_roadmap/glossary.htm#434709">オラクルの用語集より</a>
</p>
<pre class="example">
Javaで作成された移植可能なプラットフォームに依存しないコンポーネント・モデルで、
JavaBean仕様に従う。 再使用可能なコンポーネントを作成できる。
</pre>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> JavaBeansとは</h2>
<div class="outline-text-2" id="text-2">
<p>
JavaBeans Specの2.1 What is a Bean?より
</p>
<pre class="example">
Let's start with an initial definition and then refine it:
“A Java Bean is a reusable software component that can be manipulated visually in a builder tool.”
This covers a wide range of different possibilities.
The builder tools may include web page builders, visual application builders, GUI layout build-
ers, or even server application builders. Sometimes the “builder tool” may simply be a docu-
ment editor that is including some beans as part of a compound document.
Some Java Beans may be simple GUI elements such as buttons and sliders. Other Java Beans
may be sophisticated visual software components such as database viewers, or data feeds.
Some Java Beans may have no GUI appearance of their own, but may still be composed togeth-
er visually using an application builder.
Some builder tools may operate entirely visually, allowing the direct plugging together of Java
Beans. Other builders may enable users to conveniently write Java classes that interact with and
control a set of beans. Other builders may provide a simple scripting language to allow easy
high-level scripting of a set of beans.
Individual Java Beans will vary in the functionality they support, but the typical unifying fea-
tures that distinguish a Java Bean are:
•  Support for "introspection" so that a builder tool can analyze how a bean works
•  Support for "customization" so that when using an application builder a user can
   customize the appearance and behaviour of a bean.
•  Support for "events"  as a simple communication metaphor than can be used to connectup beans.
•  Support for "properties", both for customization and for programmatic use.
•  Support for persistence, so that a bean can be customized in an application builder and
   then have its customized state saved away and reloaded later.

A bean is not required to inherit from any particular base class or interface. Visible beans must
inherit from java.awt.Component so that they can be added to visual containers, but invisible
beans (see 2.7 below) aren’t required to do this.
Note that while beans are primarily targeted at builder tools they are also entirely usable by hu-
man programmers. All the key APIs such as events, properties, and persistence, have been de-
signed to work well both for human programmers and for builder tools.
Many beans will have a strong visual aspect, in both the application builder and in the final con-
structed application, but while this is common it is not required
</pre>
<p>
なんとなくAWT/SwingのGUI系コンポネント向けの仕様ですね。
</p>

<p>
現在はAWT/Swing/JSFなどMVCアーキテクチャのモデルとして利用することが多いいでしょう。
</p>

<ul class="org-ul">
<li>JSFからJavaBeansの利用例
<pre class="example">
&lt;tr:inputText valueChangeListener="#{myBean.valueChangeHandler}" value="#{myBean.value}"/&gt;
</pre>
</li>

<li>Swing/AWT
<ul class="org-ul">
<li>Swing/AWTにJButtonからはじめ多くのGUIコンポネントがJavaBeansの仕様に基づいている。
</li>
<li><a href="http://www.wakhok.ac.jp/~tatsuo/JavaWorld/11th/bean.html">2-2 JavaBeansとしての Swingコンポーネント</a>
</li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> JavaBeansの出番</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>JavaBeansのインスタンス化 (constructor)
</li>
<li>JavaBeansプロパティの設定 (setter/getter)
</li>
<li>メソッドの起動 (normal method)
</li>
<li>イベントのイベント・ハンドラの登録
</li>
</ol>

<p>
※Oracle JDeveloperを使うとJavaBeans作成用の専用ウィザードが提供されている
</p>

<p>
4がピンとこないですね。下記の例で理解できると思います。
</p>

<div class="org-src-container">

<pre class="src src-java"><span style="color: #ffffff;">public</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">MyBean</span> {

     <span style="color: #ffffff;">private</span> <span style="color: #ffffff;">final</span> <span style="color: #7fffd4;">PropertyChangeSupport</span> <span style="color: #9acd32;">pcs</span> = <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">PropertyChangeSupport</span>(<span style="color: #ffffff;">this</span>);

     <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">addPropertyChangeListener</span>(<span style="color: #7fffd4;">PropertyChangeListener</span> <span style="color: #9acd32;">listener</span>) {
         <span style="color: #ffffff;">this</span>.pcs.addPropertyChangeListener(listener);
     }

     <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">removePropertyChangeListener</span>(<span style="color: #7fffd4;">PropertyChangeListener</span> <span style="color: #9acd32;">listener</span>) {
         <span style="color: #ffffff;">this</span>.pcs.removePropertyChangeListener(listener);
     }

     <span style="color: #ffffff;">private</span> <span style="color: #7fffd4;">String</span> <span style="color: #9acd32;">value</span>;

     <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">String</span> <span style="color: #98fb98;">getValue</span>() {
         <span style="color: #ffffff;">return</span> <span style="color: #ffffff;">this</span>.value;
     }

     <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">setValue</span>(<span style="color: #7fffd4;">String</span> <span style="color: #9acd32;">newValue</span>) {
         <span style="color: #7fffd4;">String</span> <span style="color: #9acd32;">oldValue</span> = <span style="color: #ffffff;">this</span>.value;
         <span style="color: #ffffff;">this</span>.value = newValue;
         <span style="color: #ffffff;">this</span>.pcs.firePropertyChange(<span style="color: #bdb76b;">"value"</span>, oldValue, newValue);
     }
}

<span style="color: #ffffff;">public</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">MyBeanTest</span> {
    <span style="color: #ffffff;">static</span> <span style="color: #ffffff;">class</span> <span style="color: #7fffd4;">MyBeanPropertyListener</span> <span style="color: #ffffff;">implements</span> <span style="color: #7fffd4;">PropertyChangeListener</span> {

        <span style="color: #40e0d0;">@Override</span>
        <span style="color: #ffffff;">public</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">propertyChange</span>(<span style="color: #7fffd4;">PropertyChangeEvent</span> <span style="color: #9acd32;">evt</span>) {
            System.out.println(<span style="color: #bdb76b;">"evt.getPropertyName() = "</span> +  evt.getPropertyName());
            System.out.println(<span style="color: #bdb76b;">"evt.getSource()       = "</span> + evt.getSource());
            System.out.println(<span style="color: #bdb76b;">"evt.getOldValue()     = "</span> + evt.getOldValue());
            System.out.println(<span style="color: #bdb76b;">"evt.getNewValue()     = "</span> + evt.getNewValue());
        }
    }
    <span style="color: #ffffff;">public</span> <span style="color: #ffffff;">static</span> <span style="color: #7fffd4;">void</span> <span style="color: #98fb98;">main</span>(<span style="color: #7fffd4;">String</span>[] <span style="color: #9acd32;">args</span>) {
        <span style="color: #7fffd4;">MyBean</span> <span style="color: #9acd32;">myBean</span> = <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">MyBean</span>();
        myBean.addPropertyChangeListener(<span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">MyBeanPropertyListener</span>());
        myBean.setValue(<span style="color: #bdb76b;">"hello"</span>);
    }
}
</pre>
</div>

<p>
<code>MyBean</code> のvalue属性変更時にPropertyChangeEventを発火させ、MyBeanPropertyListenerでイ
ベントをハンドリングする。Web開発用MVCフレームワークでもよく利用されている。
</p>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> APIパッケージの概要</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://docs.oracle.com/javase/jp/7/api/java/beans/package-summary.html">JavaDoc</a> より
</p>
<pre class="example">
パッケージ java.beans の説明
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
JavaBeans™ アーキテクチャーに基づいたコンポーネントである Bean の開発に関連したクラス
が含まれています。一部のクラスは、アプリケーションの実行中に Bean によって使用されま
す。たとえば、イベントクラスは、プロパティーと拒否可能な変更イベントをトリガーする
Bean によって使用されます (PropertyChangeEvent を参照)。しかし、このパッケージに含ま
れるほとんどのクラスは、Bean エディタ (アプリケーションを作成するために Bean のカスタ
マイズおよび組み合わせを行う開発環境) 用です。こうしたクラスを使用すれば、Bean エディ
タで Bean のカスタマイズ用ユーザーインタフェースを簡単に作成できます。たとえば、Bean
エディタでは処理できない特殊な型のプロパティーを持つ Bean があるとします。この場合、
Bean 開発者は PropertyEditor インタフェースを使って、この特殊な型のエディタを提供でき
ます。

Bean による消費リソースを最小限に抑えるため、Bean エディタによって使用されるクラスが
読み込まれるのは、Bean の編集時だけとなります。アプリケーションで Bean が実行されてい
るときは必要ないため、読み込まれません。この情報は、Bean 情報 (BeanInfo を参照) に保
管されます。

明示しない限り、null 値または空の文字列は、このパッケージのメソッドで有効なパラメータ
ではありません。そのようなパラメータが使用されると、例外が発生する可能性があります。
</pre>

<p>
イマイチですね、わかりづらい
</p>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> よく出てくるクラス</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>java.beans.PropertyDescriptor
<div class="org-src-container">

<pre class="src src-java"><span style="color: #7fffd4;">PropertyDescriptor</span> <span style="color: #9acd32;">nameProp</span> = <span style="color: #ffffff;">new</span> <span style="color: #7fffd4;">PropertyDescriptor</span>(<span style="color: #bdb76b;">"value"</span>, MyBean.<span style="color: #ffffff;">class</span>);
System.out.println(nameProp.getReadMethod().invoke(myBean));
System.out.println(nameProp.getWriteMethod().invoke(myBean, <span style="color: #bdb76b;">"goodbye"</span>));
System.out.println(nameProp.getReadMethod().invoke(myBean));
</pre>
</div>
</li>
<li>java.beans.PropertyChangeListener
PropertyChange イベントは、Bean が「バウンド」プロパティーを変更するたびにトリガーされます。
</li>
<li>java.beans.PropertyChangeEvent
Bean が「バウンド」プロパティーまたは「制約」プロパティーを変更するたびに送信されます。
</li>

<li>PropertyChangeSupport
バウンドプロパティーをサポートする Bean で使用できるユーティリティークラスです。
PropertyChangeSupport インスタンスはスレッドセーフです。このクラスは直列化可能です。
直列化した場合、直列化可能なリスナーが保存および復元されます。直列化の際、直列化可能
でないリスナーはスキップされます。
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> サードパーティライブラリ</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><a href="http://commons.apache.org/proper/commons-beanutils/">Apache Commons BeanUtils</a>
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 参考情報</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li><a href="http://java.sun.com/docs/books/tutorial/javabeans/">『Java Tutorial』の続編</a>
</li>
<li><a href="http://docstore.mik.ua/orelly/java-ent/jnut/ch06_01.htm">Java™ in a Nutshell: A Deskop Quick Referenceの6章</a>
</li>
<li><a href="http://otndnld.oracle.co.jp/tech/java/htdocs/java_roadmap/javabean/listing.htm">Oracle Javaロードマップ:JavaBeans</a>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
</feed>
