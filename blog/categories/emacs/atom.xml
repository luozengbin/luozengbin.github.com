<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2014-06-13T17:09:24+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[検証]gistポストテスト]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-13-%5B%E6%A4%9C%E8%A8%BC%5Dgist%E3%83%9D%E3%82%B9%E3%83%88%E3%83%86%E3%82%B9%E3%83%88.html"/>
    <updated>2014-06-13T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]gistポストテスト</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">gist テスト</h2>
<div class="outline-text-2" id="text-1">
<p>
<div><script src='https://gist.github.com/1027674.js?file=gist_tag.rb'></script>
<noscript><pre><code>require 'cgi'
require 'digest/md5'
require 'net/https'
require 'uri'

module Jekyll
  class GistTag &lt; Liquid::Tag
    def initialize(tag_name, text, token)
      super
      @text           = text
      @cache_disabled = false
      @cache_folder   = File.expand_path &quot;../_gist_cache&quot;, File.dirname(__FILE__)
      FileUtils.mkdir_p @cache_folder
    end

    def render(context)
      if parts = @text.match(/([\d]*) (.*)/)
        gist, file = parts[1].strip, parts[2].strip
        script_url = script_url_for gist, file
        code       = get_cached_gist(gist, file) || get_gist_from_web(gist, file)
        html_output_for script_url, code
      else
        &quot;&quot;
      end
    end

    def html_output_for(script_url, code)
      code = CGI.escapeHTML code
      &quot;&lt;script src='#{script_url}'&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#{code}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&quot;
    end

    def script_url_for(gist_id, filename)
      &quot;https://gist.github.com/#{gist_id}.js?file=#{filename}&quot;
    end

    def get_gist_url_for(gist, file)
      &quot;https://raw.github.com/gist/#{gist}/#{file}&quot;
    end

    def cache(gist, file, data)
      cache_file = get_cache_file_for gist, file
      File.open(cache_file, &quot;w&quot;) do |io|
        io.write data
      end
    end

    def get_cached_gist(gist, file)
      return nil if @cache_disabled
      cache_file = get_cache_file_for gist, file
      File.read cache_file if File.exist? cache_file
    end

    def get_cache_file_for(gist, file)
      bad_chars = /[^a-zA-Z0-9\-_.]/
      gist      = gist.gsub bad_chars, ''
      file      = file.gsub bad_chars, ''
      md5       = Digest::MD5.hexdigest &quot;#{gist}-#{file}&quot;
      File.join @cache_folder, &quot;#{gist}-#{file}-#{md5}.cache&quot;
    end

    def get_gist_from_web(gist, file)
      gist_url          = get_gist_url_for gist, file
      raw_uri           = URI.parse gist_url
      https             = Net::HTTP.new raw_uri.host, raw_uri.port
      https.use_ssl     = true
      https.verify_mode = OpenSSL::SSL::VERIFY_NONE
      request           = Net::HTTP::Get.new raw_uri.request_uri
      data              = https.request request
      data              = data.body
      cache gist, file, data unless @cache_disabled
      data
    end
  end

  class GistTagNoCache &lt; GistTag
    def initialize(tag_name, text, token)
      super
      @cache_disabled = true
    end
  end
end

Liquid::Template.register_tag('gist', Jekyll::GistTag)
Liquid::Template.register_tag('gistnocache', Jekyll::GistTagNoCache)</code></pre></noscript></div>

</p>

<p>
}
</p>

<p>
<!-- more -->
</p>
</div>
</div>

]]></content>
  </entry>
  
</feed>
