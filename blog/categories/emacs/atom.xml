<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs | Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2014-07-21T20:45:44+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[メモ]Emacsで漢字→かな変換]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-29-%5B%E3%83%A1%E3%83%A2%5Demacs%E3%81%A7%E6%BC%A2%E5%AD%97%E2%86%92%E3%81%8B%E3%81%AA%E5%A4%89%E6%8F%9B.html"/>
    <updated>2014-06-29T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]emacsで漢字→かな変換</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 考案</a></li>
<li><a href="#sec-2">2. <code>skk-kakasi.el</code> の導入手順</a>
<ul>
<li><a href="#sec-2-1">2.1. KAKASIのインストール</a></li>
<li><a href="#sec-2-2">2.2. ddskk のインストール</a></li>
<li><a href="#sec-2-3">2.3. 動作確認</a></li>
</ul>
</li>
<li><a href="#sec-3">3. 更に自動化する</a></li>
<li><a href="#sec-4">4. もう一歩</a></li>
</ul>
</div>
</div>


<p>
Emacsをドキュメントビューアとして使っていますが、時々漢字の読み方がわからないことに遭
遇します。漢字から意味を読み取ったとしても、読み方がわからない場合が多いい。いままで
一々ブラウザに切り替えて調べました。せっかくEmacsを使っているので自動化してみました。
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 考案</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>スクラップ開発：選択テキストを漢字なか変換Webサービスに投げって応答を表示する
</li>
<li>既存のものを使う
</li>
</ol>

<p>
効率を考えて２の近道を選択しました。
</p>

<p>
ひとまず、 <code>list-packages</code> でELPAに登録されたパッケージを検索した、意外に当てはまる
ものもが見つかりませんでした。googleしたら <code>skk-kakasi.el</code> が浮上してきた。
</p>

<p>
例の <code>Meadow/Emacs memo</code> の <a href="http://www.bookshelf.jp/soft/meadow_21.html#SEC197">21.3.2 漢字をひらがなへ変換 ― skk-kakasi</a> セクションに
機能紹介がありました。以下はその内容の引用です。
</p>

<pre class="example">
これは SKK に附属しています。 skk-kakasi.el です。
動作には kakasi が必要です。
例えば,
読み方の分からない文字をリージョンで選択し, skk-gyakubiki-message とすると, ミニバッファ
によみ方が出力されます. ただし, 第 1 候補のみ. C-u M-x skk-gyakubiki-messageとすると,
すべての候補が出力されます. 他にも漢字の混ざった文章にふり仮名をという文章を選択し,
skk-hurigana-regionとすると漢字 [かんじ] の混ざ [まざ] った文章 [ぶんしょう] にふり仮
名 [かな] をとできます. 他にもいろいろと用意されているので, 一度ソースを読んで見てくだ
さい. ちゃんと日本 語で詳しく説明してありますよ．
</pre>

<p>
早速導入してみた、以下はその手順です。
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> <code>skk-kakasi.el</code> の導入手順</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>skk-kakasi.el</code> の導入に必要なもの
</p>
<ul class="org-ul">
<li>KAKASI - 漢字→かな(ローマ字)変換プログラム： <a href="http://kakasi.namazu.org/">http://kakasi.namazu.org/</a>
</li>
<li>ddskk：<a href="http://openlab.ring.gr.jp/skk/ddskk-ja.html">http://openlab.ring.gr.jp/skk/ddskk-ja.html</a>
</li>
</ul>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> KAKASIのインストール</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Archlinuxをお使いなので <code>sudo pacman -S kakasi</code> で一発でインストールが出来ました。
</p>

<pre class="example">
[akira@jizai .emacs.d]$ sudo pacman -S kakasi
依存関係を解決しています...
相互衝突をチェックしています...

パッケージ (1): kakasi-2.3.6-1

Total Download Size:    0.69 MiB
Total Installed Size:   2.36 MiB

:: インストールを行いますか？ [Y/n] 
:: パッケージを取得します ...
 kakasi-2.3.6-1-x86_64                                                                                708.8 KiB  3.96M/s 00:00 [#############################################################################] 100%
(1/1) キーリングのキーを確認                                                                                                   [#############################################################################] 100%
(1/1) パッケージの整合性をチェック                                                                                             [#############################################################################] 100%
(1/1) パッケージファイルのロード                                                                                               [#############################################################################] 100%
(1/1) ファイルの衝突をチェック                                                                                                 [#############################################################################] 100%
(1/1) 空き容量を確認                                                                                                           [#############################################################################] 100%
(1/1) インストール kakasi                                                                                                      [#############################################################################] 100%

★インストールされたファイル一式を確認する
[akira@jizai .emacs.d]$ pacman -Ql kakasi
kakasi /usr/
kakasi /usr/bin/
kakasi /usr/bin/atoc_conv
kakasi /usr/bin/kakasi
kakasi /usr/bin/kakasi-config
kakasi /usr/bin/mkkanwa
kakasi /usr/bin/rdic_conv
kakasi /usr/bin/wx2_conv
kakasi /usr/include/
kakasi /usr/include/libkakasi.h
kakasi /usr/lib/
kakasi /usr/lib/libkakasi.so
kakasi /usr/lib/libkakasi.so.2
kakasi /usr/lib/libkakasi.so.2.1.0
kakasi /usr/share/
kakasi /usr/share/kakasi/
kakasi /usr/share/kakasi/itaijidict
kakasi /usr/share/kakasi/kanwadict
kakasi /usr/share/man/
kakasi /usr/share/man/man1/
kakasi /usr/share/man/man1/kakasi-config.1.gz
kakasi /usr/share/man/man1/kakasi.1.gz
[akira@jizai .emacs.d]$
</pre>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> ddskk のインストール</h3>
<div class="outline-text-3" id="text-2-2">
<p>
ddskk のインストール手順はいくつがあります。詳細はddskkのインストールマニュアルへ参照する。
</p>

<p>
本家から最新版のダウンロード
</p>
<pre class="example">
$ wget http://openlab.ring.gr.jp/skk/maintrunk/ddskk-20140622.tar.gz
$ tar xzvf ddskk-20140622.tar.gz
$ cd ddskk-20140622
</pre>

<p>
<code>ddskk-20140622/SKK-CFG</code> ファイルの最後にインストール先を指定する。
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #74af68;">;;; </span><span style="color: #74af68;">&#36766;&#26360;&#12501;&#12449;&#12452;&#12523;&#12398;&#26684;&#32013;&#20808;</span>
(setq SKK_DATADIR <span style="color: #e67128;">"~/.emacs.d/etc/skk"</span>)

<span style="color: #74af68;">;;; </span><span style="color: #74af68;">&#12489;&#12461;&#12517;&#12513;&#12531;&#12488;</span>
(setq SKK_INFODIR <span style="color: #e67128;">"~/.emacs.d/share/info-ja/skk"</span>)

<span style="color: #74af68;">;;; </span><span style="color: #74af68;">skk lisp&#26412;&#20307;</span>
(setq SKK_LISPDIR <span style="color: #e67128;">"~/.emacs.d/lisp/skk"</span>)

<span style="color: #74af68;">;;; </span><span style="color: #74af68;">skk-large-jisyo &#12398;&#20516;&#12434;&#33258;&#21205;&#35373;&#23450;&#12377;&#12427;</span>
(setq SKK_SET_JISYO t)
</pre>
</div>

<p>
DDSKKのインストール
</p>
<pre class="example">
★ インストーラが SKK の各ファイルをどこにインストールしようとしているかを確認する
$ make what-where

★ インストール
$ make install
</pre>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 動作確認</h3>
<div class="outline-text-3" id="text-2-3">
<p>
<code>(require 'skk-kakasi)</code> でskk-kakasi.elをロードし、適当に漢字を含むテキストを選択し
<code>skk-gyakubiki-message</code> を実行する。
</p>

<video controls>
   <source src="video/2014-06-29-skk-gyakubiki-message.mp4">
   <source src="video/2014-06-29-skk-gyakubiki-message.webm">
</video>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 更に自動化する</h2>
<div class="outline-text-2" id="text-3">
<p>
<code>pos-tip.el</code> と連携してtooltip形でカッコ良く表示する。漢字の読み方をチラ見に便利。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #ffad29; font-weight: bold;">require</span> '<span style="color: #008b8b;">skk-autoloads</span>)
(<span style="color: #ffad29; font-weight: bold;">require</span> '<span style="color: #008b8b;">skk-kakasi</span>)
(<span style="color: #ffad29; font-weight: bold;">require</span> '<span style="color: #008b8b;">pos-tip</span>)

<span style="color: #74af68;">;;; </span><span style="color: #74af68;">&#12405;&#12426;&#20206;&#21517;&#22793;&#25563;&#32080;&#26524;&#12434;pos-tip&#12391;&#34920;&#31034;&#12377;&#12427;</span>
(<span style="color: #ffad29; font-weight: bold;">defun</span> <span style="color: #00ede1; font-weight: bold;">skk-hurigana-tip</span> (start end <span style="color: #34cae2;">&amp;optional</span> all)
  <span style="color: #e67128;">"&#38936;&#22495;&#12398;&#28450;&#23383;&#12395;&#20840;&#12390;&#12405;&#12426;&#12364;&#12394;&#12434;&#20184;&#12369;&#12289;&#12509;&#12483;&#12503;&#12450;&#12483;&#12503;&#12377;&#12427;&#12290;"</span>
  (interactive <span style="color: #e67128;">"r\nP"</span>)
  (pos-tip-show (skk-hurigana-1 start end all)))

<span style="color: #74af68;">;;; </span><span style="color: #74af68;">&#36969;&#24403;&#12395;&#12461;&#12540;&#12434;&#21106;&#12426;&#24403;&#12390;&#12377;&#12427;</span>
(global-set-key (kbd <span style="color: #e67128;">"C-x x"</span>) 'skk-hurigana-tip)
</pre>
</div>


<p>
<code>popwin.el</code> でpopupバッファーで表示する。変換結果を流用したい場合に便利。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #ffad29; font-weight: bold;">require</span> '<span style="color: #008b8b;">skk-autoloads</span>)
(<span style="color: #ffad29; font-weight: bold;">require</span> '<span style="color: #008b8b;">skk-kakasi</span>)
(<span style="color: #ffad29; font-weight: bold;">require</span> '<span style="color: #008b8b;">popwin</span>)

<span style="color: #74af68;">;;; </span><span style="color: #74af68;">&#12405;&#12426;&#20206;&#21517;&#22793;&#25563;&#32080;&#26524;&#12496;&#12483;&#12501;&#12449;&#21517;</span>
(<span style="color: #ffad29; font-weight: bold;">defvar</span> <span style="color: #dbdb95;">skk-kakasi-popbuf-name</span> <span style="color: #e67128;">" *skk-kakasi*"</span> <span style="color: #e67128;">"&#12405;&#12426;&#20206;&#21517;&#22793;&#25563;&#32080;&#26524;&#12496;&#12483;&#12501;&#12449;&#21517;"</span>)

(<span style="color: #ffad29; font-weight: bold;">defun</span> <span style="color: #00ede1; font-weight: bold;">skk-hurigana-popup</span> (start end <span style="color: #34cae2;">&amp;optional</span> all)
  (interactive <span style="color: #e67128;">"r\nP"</span>)
  (<span style="color: #ffad29; font-weight: bold;">let</span> ((str0 (buffer-substring-no-properties start end))
        (str1 (skk-hurigana-1 start end all))
        (str2 (skk-gyakubiki-1 start end all)))
    (<span style="color: #ffad29; font-weight: bold;">with-current-buffer</span> (get-buffer-create skk-kakasi-popbuf-name)
      (setq buffer-read-only nil)
      (erase-buffer)
      (insert <span style="color: #e67128;">"KAKASI - &#28450;&#23383;&#8594;&#12363;&#12394;(&#12525;&#12540;&#12510;&#23383;)&#22793;&#25563;&#32080;&#26524;:\n"</span>)
      (insert <span style="color: #e67128;">"-------------------------------------\n\n"</span>)
      (insert str0 <span style="color: #e67128;">"\n\n"</span>)
      (insert str1 <span style="color: #e67128;">"\n\n"</span>)
      (insert str2 <span style="color: #e67128;">"\n\n"</span>)
      (setq buffer-read-only t))
    (display-buffer (get-buffer skk-kakasi-popbuf-name))))

<span style="color: #74af68;">;;; </span><span style="color: #74af68;">&#36969;&#24403;&#12395;&#12461;&#12540;&#12434;&#21106;&#12426;&#24403;&#12390;&#12377;&#12427;</span>
(global-set-key (kbd <span style="color: #e67128;">"C-x X"</span>) 'skk-hurigana-popup)
</pre>
</div>

<video controls>
   <source src="video/2014-06-29-skk-hurigana-popup.mp4">
   <source src="video/2014-06-29-skk-hurigana-popup.webm">
</video>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> もう一歩</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>オンライン辞書サービスを使って単語の解釈を表示したい
</li>
<li>テキスト読み上げ機能と連携したい
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]Otcopressコンテンツ投稿自動化]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-15-%5B%E3%83%A1%E3%83%A2%5Dotcopress%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E6%8A%95%E7%A8%BF%E8%87%AA%E5%8B%95%E5%8C%96.html"/>
    <updated>2014-06-15T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]otcopressコンテンツ投稿自動化</id>
    <content type="html"><![CDATA[<p>
emacsからblog投稿ツールいくつ試しました、最近以下のツール組み合わせで落ち着いた。
</p>


<ul class="org-ul">
<li>静的コンテンツ生成エンジン <code>Octopress</code> ： <a href="http://Octopress.org/">http://Octopress.org/</a>
</li>
<li>コンテンツ公開サービス <code>Github Page</code> : <a href="https://pages.github.com/">https://pages.github.com/</a>
</li>
<li>org-modesでOctopress記事を書く： <a href="https://github.com/yoshinari-nomura/org-Octopress">https://github.com/yoshinari-nomura/org-Octopress</a>
</li>
<li>自動化スクリプト
</li>
</ul>




<p>

</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Octopress + Github Page でブログ環境を構築する</h2>
<div class="outline-text-2" id="text-1">
<p>
同じ環境で複数Rubyバージョンを利用できるようにするためRbenvを導入する。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Rbenvのインストール</h3>
<div class="outline-text-3" id="text-1-1">
<pre class="example">
$ cd ~
$ git clone git://github.com/sstephenson/rbenv.git .rbenv
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$ source ~/.bashrc
</pre>

<p>
rbenvでインストール可能なバージョンリストを確認する。 <code>rbenv install -l</code>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> RbenvによるRubyバージョンの切り替え</h3>
<div class="outline-text-3" id="text-1-2">
<pre class="example">
$ rbenv install 1.9.3-p0
$ rbenv global 1.9.3-p0
$ rbenv rehash
$ rbenv global
$ ruby --version
</pre>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> Octopressのインストール</h3>
<div class="outline-text-3" id="text-1-3">
<p>
GithubからOctopressをダウンロードする
</p>
<pre class="example">
$ git clone git://github.com/imathis/Octopress.git Octopress
$ cd Octopress
$ ruby --version  # ruby バージョン確認
</pre>

<p>
必要なrubyライブラリをインストールする
</p>
<pre class="example">
$ gem install bundler
$ rbenv rehash
$ bundle install
</pre>

<p>
Octopressテーマの初期化
</p>
<pre class="example">
$ rake install
</pre>

<p>
octostrap3 Themeへ変更
</p>
<pre class="example">
$ cd Octopress
$ git clone https://github.com/kAworu/octostrap3 .themes/octostrap3
$ rake 'install[octostrap3]'
</pre>

<p>
静的コンテンツの生成
</p>
<pre class="example">
$ rake generate
</pre>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> Github Pageサイトの準備</h3>
<div class="outline-text-3" id="text-1-4">
<p>
ここでは省略します。
</p>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> OctopressコンテンツをGithub Pageにコミットする</h3>
<div class="outline-text-3" id="text-1-5">
<pre class="example">
$rake setup_github_pages    # githubリポジトリのurlを入力する
$rake generate
$rake deploy
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> emacsから記事を書く道具の整備</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>elpa</code> を通して、=org-mode= で記事を書くための <code>org-ocotpress</code> をインストールする。
org-ocotpressは MELPAに登録してあるので、 <code>M-x package-install org-ocotpress</code> で
インストールする。 <code>org-ocotpress</code> から記事を管理するため、emacsの設定とOcotpress
のpermalink設定を以下のように変える。
</p>

<p>
<code>octopress/_config.yml</code>
</p>
<pre class="example">
permalink: /blog/:year-:month-:day-:title.html
</pre>

<p>
<code>emacs設定</code>
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #ffad29; font-weight: bold;">require</span> '<span style="color: #008b8b;">org-octopress</span>)
(setq org-octopress-directory-top       (concat user-emacs-directory <span style="color: #e67128;">"blogs/octopress/source"</span>))
(setq org-octopress-directory-posts     (concat user-emacs-directory <span style="color: #e67128;">"blogs/octopress/source/_posts"</span>))
(setq org-octopress-directory-org-top   (concat user-emacs-directory <span style="color: #e67128;">"blogs/octopress/source"</span>))
(setq org-octopress-directory-org-posts (concat user-emacs-directory <span style="color: #e67128;">"blogs/octopress/source/blog"</span>))
(setq org-octopress-setup-file          (concat user-emacs-directory <span style="color: #e67128;">"blogs/octopress/setupfile.org"</span>))
</pre>
</div>

<p>
<code>blogs/octopress/setupfile.org</code>
</p>
<pre class="example">
#+OPTIONS: H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:nil -:t f:nil *:t &lt;:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: author:nil
#+OPTIONS: email:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil
#+MACRO: more @@html:&lt;!-- more --&gt;@@
#+MACRO: twitter [[http://twitter.com/$1][@$1]]
#+MACRO: github [[https://github.com/$1/$2][$2]]
#+PROPERTY: cache yes
#+STARTUP: odd
#+STARTUP: content
</pre>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 自動化スクリプト</h2>
<div class="outline-text-2" id="text-3">
<p>
コンテンツプレビュー自動化elispとshell script
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #ffad29; font-weight: bold;">defvar</span> <span style="color: #dbdb95;">org-octopress-top</span>
  (concat user-emacs-directory <span style="color: #e67128;">"blogs/octopress/"</span>)
  <span style="color: #e67128;">"octopress&#12502;&#12525;&#12464;&#12486;&#12531;&#12503;&#12524;&#12540;&#12488;&#12487;&#12451;&#12524;&#12463;&#12488;&#12522;"</span>)

(<span style="color: #ffad29; font-weight: bold;">defun</span> <span style="color: #00ede1; font-weight: bold;">org-octopress-preview</span> ()
  <span style="color: #e67128;">"preview octopress content by call external shell script."</span>
  (interactive)
  (message <span style="color: #e67128;">"preview octopress content ...."</span>)
  (<span style="color: #ffad29; font-weight: bold;">lexical-let*</span> ((default-directory org-octopress-top)
                 (preview-url <span style="color: #e67128;">"http://localhost:4000"</span>))
    (deferred:$
      (deferred:process-shell <span style="color: #e67128;">"blog_preview.sh"</span> org-octopress-top)
      (deferred:nextc it
        (<span style="color: #ffad29; font-weight: bold;">lambda</span> (x)
          (message <span style="color: #e67128;">"*** preview blog ***"</span>)
          (message x)
          (message <span style="color: #e67128;">"launch preview url %s"</span> preview-url)
          (browse-url preview-url))))))
</pre>
</div>

<p>
<code>blog_preview.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #74af68;">#</span><span style="color: #74af68;">!/bin/</span><span style="color: #ffad29; font-weight: bold;">sh</span>
<span style="color: #74af68;">## </span><span style="color: #74af68;">Usage: blog_preview.sh</span>
<span style="color: #74af68;">##</span>
<span style="color: #74af68;">## </span><span style="color: #74af68;">Options: $1 octopress&#12487;&#12451;&#12524;&#12463;&#12488;&#12522;&#12398;&#20301;&#32622;</span>
<span style="color: #74af68;">##</span>
<span style="color: #74af68;">## </span><span style="color: #74af68;">Comment: octopress&#37197;&#19979;&#12395;blog&#38745;&#30340;</span>
<span style="color: #74af68;">##          </span><span style="color: #74af68;">&#12467;&#12531;&#12486;&#12531;&#12484;&#12398;&#29983;&#25104;&#12392;&#12503;&#12524;&#12499;&#12517;&#12540;</span>
<span style="color: #74af68;">##################################################################### </span>

<span style="color: #dbdb95;">RUBY_VER</span>=<span style="color: #e67128;">"1.9.3-p0"</span>
<span style="color: #dbdb95;">OCTOPRESS_DIR</span>=$<span style="color: #dbdb95;">1</span>

which rbenv
<span style="color: #ffad29; font-weight: bold;">if</span> [ $<span style="color: #dbdb95;">?</span> = 0 ]; <span style="color: #ffad29; font-weight: bold;">then</span>
    <span style="color: #74af68;"># </span><span style="color: #74af68;">ruby &#12496;&#12540;&#12472;&#12519;&#12531;&#20999;&#12426;&#26367;&#12360;&#20966;&#29702;</span>
    rbenv global $<span style="color: #dbdb95;">RUBY_VER</span>
    rbenv rehash
    <span style="color: #dbdb95;">global_ver</span>=<span style="color: #fa8072;">`rbenv global`</span>
    <span style="color: #ffad29; font-weight: bold;">if</span> [ $<span style="color: #dbdb95;">global_ver</span> = $<span style="color: #dbdb95;">RUBY_VER</span> ]; <span style="color: #ffad29; font-weight: bold;">then</span>
        <span style="color: #74af68;"># </span><span style="color: #74af68;">blog&#12467;&#12531;&#12486;&#12531;&#12484;&#29983;&#25104;&#12392;&#12487;&#12503;&#12525;&#12452;</span>
        <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"run rake with `ruby --version`"</span>
        <span style="color: #23d7d7;">pushd</span> $<span style="color: #dbdb95;">OCTOPRESS_DIR</span>
        rake generate
        <span style="color: #ffad29; font-weight: bold;">if</span> [ -z <span style="color: #e67128;">"`netstat -nutl | grep 4000`"</span> ] ; <span style="color: #ffad29; font-weight: bold;">then</span>
            <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"&gt;&gt;&gt; Startup Preview"</span>
            rake preview &amp;
            sleep 2
        <span style="color: #ffad29; font-weight: bold;">fi</span>
        <span style="color: #23d7d7;">popd</span>
    <span style="color: #ffad29; font-weight: bold;">fi</span>
<span style="color: #ffad29; font-weight: bold;">fi</span>
</pre>
</div>

<p>
コンテンツをgithubへ自動同期化elispとshell script
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #ffad29; font-weight: bold;">defun</span> <span style="color: #00ede1; font-weight: bold;">org-octopress-deploy</span> ()
  <span style="color: #e67128;">"deploy octopress content to github page service."</span>
  (interactive)
  (message <span style="color: #e67128;">"deploy octopress content ...."</span>)
  (<span style="color: #ffad29; font-weight: bold;">lexical-let*</span> ((default-directory org-octopress-top))
    (deferred:$
      (deferred:process-shell <span style="color: #e67128;">"blog_deploy.sh"</span> org-octopress-top)
      (deferred:nextc it
        (<span style="color: #ffad29; font-weight: bold;">lambda</span> (x)
          (message <span style="color: #e67128;">"*** deploy blog ***"</span>)
          (message x))))))
</pre>
</div>

<p>
<code>blog_deploy.sh</code>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #74af68;">#</span><span style="color: #74af68;">!/bin/</span><span style="color: #ffad29; font-weight: bold;">sh</span>
<span style="color: #74af68;">#</span><span style="color: #74af68;">!/bin/sh</span>
<span style="color: #74af68;">## </span><span style="color: #74af68;">Usage: blog_deploy.sh</span>
<span style="color: #74af68;">##</span>
<span style="color: #74af68;">## </span><span style="color: #74af68;">Options: $1 octopress&#12487;&#12451;&#12524;&#12463;&#12488;&#12522;&#12398;&#20301;&#32622;</span>
<span style="color: #74af68;">##   </span>
<span style="color: #74af68;">## </span><span style="color: #74af68;">Comment: octopress&#37197;&#19979;&#12395;blog&#38745;&#30340;</span>
<span style="color: #74af68;">##          </span><span style="color: #74af68;">&#12467;&#12531;&#12486;&#12531;&#12484;&#12398;&#29983;&#25104;&#12392;&#12487;&#12503;&#12525;&#12452;</span>
<span style="color: #74af68;">##################################################################### </span>

<span style="color: #dbdb95;">RUBY_VER</span>=<span style="color: #e67128;">"1.9.3-p0"</span>
<span style="color: #dbdb95;">OCTOPRESS_DIR</span>=$<span style="color: #dbdb95;">1</span>

which rbenv
<span style="color: #ffad29; font-weight: bold;">if</span> [ $<span style="color: #dbdb95;">?</span> = 0 ]; <span style="color: #ffad29; font-weight: bold;">then</span>
    <span style="color: #74af68;"># </span><span style="color: #74af68;">ruby &#12496;&#12540;&#12472;&#12519;&#12531;&#20999;&#12426;&#26367;&#12360;&#20966;&#29702;</span>
    rbenv global $<span style="color: #dbdb95;">RUBY_VER</span>
    rbenv rehash
    <span style="color: #dbdb95;">global_ver</span>=<span style="color: #fa8072;">`rbenv global`</span>
    <span style="color: #ffad29; font-weight: bold;">if</span> [ $<span style="color: #dbdb95;">global_ver</span> = $<span style="color: #dbdb95;">RUBY_VER</span> ]; <span style="color: #ffad29; font-weight: bold;">then</span>
        <span style="color: #74af68;"># </span><span style="color: #74af68;">blog&#12467;&#12531;&#12486;&#12531;&#12484;&#29983;&#25104;&#12392;&#12487;&#12503;&#12525;&#12452;</span>
        <span style="color: #23d7d7;">echo</span> <span style="color: #e67128;">"run rake with `ruby --version`"</span>
        <span style="color: #23d7d7;">pushd</span> $<span style="color: #dbdb95;">OCTOPRESS_DIR</span>
        rake generate
        rake deploy
        <span style="color: #23d7d7;">popd</span>
    <span style="color: #ffad29; font-weight: bold;">fi</span>
<span style="color: #ffad29; font-weight: bold;">fi</span>
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
