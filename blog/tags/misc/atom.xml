<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Misc | Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/blog/tags/misc/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2015-10-10T19:50:40+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[まとめ]Linuxシステム時刻について]]></title>
    <link href="http://luozengbin.github.io/blog/2015-06-27-%5B%E3%81%BE%E3%81%A8%E3%82%81%5Dlinux%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%99%82%E5%88%BB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html"/>
    <updated>2015-06-27T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[まとめ]linuxシステム時刻について</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. ハードウェアクロック／システムクロックの違い</a></li>
<li><a href="#sec-2">2. 時刻の表示仕様</a></li>
<li><a href="#sec-3">3. 時刻表示／調整関連コマンド</a>
<ul>
<li><a href="#sec-3-1">3.1. NTP時刻同期化を自動化する</a></li>
<li><a href="#sec-3-2">3.2. タイムゾーンの変更</a></li>
<li><a href="#sec-3-3">3.3. ハードウェアクロックとの同期化</a></li>
</ul>
</li>
<li><a href="#sec-4">4. 時刻関連ファイル</a></li>
<li><a href="#sec-5">5. デュアルブートの注意点</a></li>
<li><a href="#sec-6">6. NTPサーバの構築</a></li>
<li><a href="#sec-7">7. システムコール</a></li>
<li><a href="#sec-8">8. カーネルの実装について</a></li>
<li><a href="#sec-9">9. 参考</a></li>
</ul>
</div>
</div>


<p>
Linuxシステム時刻に関わる知識やリソースのまとめです。
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> ハードウェアクロック／システムクロックの違い</h2>
<div class="outline-text-2" id="text-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">クロック種別</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">ハードウェアクロック</td>
<td class="left">* マザーボード上のICによって提供される時計です。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 通常は電池でバックアップして駆動されるので、電源をお落としても時計が進みます。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* RTC（Real Time Clock）、BIOS、CMOSクロックとも呼ばれる。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">システムクロック</td>
<td class="left">* Linux カーネルの内部に存在している時計で、 タイマ割り込みによって駆動されている</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* Linux システムは起動時に一度だけハードウェア・クロックを参照し、 システム・クロックを設定する。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 精度の高いクロック、1GHz以上のCPUの場合1クロックは1ナノ秒のなります。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">* 時刻は1970/01/01T00:00:00からの経過時間を秒単位／ナノ秒単位で保持される。</td>
</tr>
</tbody>
</table>

<p>
ハードウェアクロック持っていないボードも存在する。RaspberryPiボードはその一つです、
RTCが必要な場合、別途RTCモジュールを導入しなければいけません。<a href="#fn2">2</a>
</p>

<p>
RaspberryPiで <code>hwclock</code> コマンドでハードウェアクロックを参照すると <code>/dev/rtc</code> デバイ
スがない旨のメッセージが表示された。
</p>
<pre class="example">
$ sudo hwclock --debug
hwclock from util-linux 2.26.2
hwclock: cannot open /dev/rtc: No such file or directory
No usable clock interface found.
hwclock: Cannot access the Hardware Clock via any known method.
</pre>

<p>
RaspberryPiはNTPサーバから時刻同期のし掛けが必要です。そしないとシステムクロックが
POSIXにおける紀元時刻(Epoch; 1970-01-01 00:00:00 +0000 (UTC))に設定されてしまう。
</p>

<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 時刻の表示仕様</h2>
<div class="outline-text-2" id="text-2">
<p>
systemdに導入された <code>timdatectl</code> コマンドでシステム時刻の各種表示形式を確認する。
</p>
<pre class="example">
$ timedatectl
      Local time: 土 2015-06-27 23:55:12 JST
  Universal time: 土 2015-06-27 14:55:12 UTC
        RTC time: 土 2015-06-27 14:55:12
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
各時刻項目について
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">正式名称</th>
<th scope="col" class="left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Universal time</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E5%8D%94%E5%AE%9A%E4%B8%96%E7%95%8C%E6%99%82">協定世界時</a> (UTC)</td>
<td class="left">UTC は GMT (グリニッジ標準時, Greenwich Mean Time) とも言われます</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">協定世界時は、国際度量衡局 (BIPM) が維持する時刻系であり、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">協定された標準周波数と報時信号発射の基礎になっている。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Local time</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E6%99%82">標準時</a></td>
<td class="left">ある国または広い地域が共通で使う地方時、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">世界各地の標準時は協定世界時 (UTC) を基準として決めている。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">例えば、日本標準時 (JST) は協定世界時より9時間進んでおり、</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">「+0900 (JST)」のように表示する。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">DST</td>
<td class="left"><a href="https://ja.wikipedia.org/wiki/%E5%A4%8F%E6%99%82%E9%96%93">夏時間</a></td>
<td class="left">daylight saving time</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">1年のうち夏を中心とした期間に、太陽の出ている時間帯を有効に利用する目</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">的で、標準時を1時間進める制度、またはその進められた時刻のこと。</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">緯度が高く夏の日照時間が長い欧米諸国などで多く導入されている。<a href="#fn10">10</a></td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">Linuxシステムにタイムゾーンを指定すれば自動的にDST時間を表示してくれる。</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">RTC time</td>
<td class="left">リアルタイムクロック</td>
<td class="left">前述のハードウェアクロックです。</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 時刻表示／調整関連コマンド</h2>
<div class="outline-text-2" id="text-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">コマンド名</th>
<th scope="col" class="left">概要</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">date</td>
<td class="left">システムクロックの表示／変更</td>
</tr>

<tr>
<td class="left">hwclock</td>
<td class="left">ハードウェアクロックの表示／変更</td>
</tr>

<tr>
<td class="left">ntpdate</td>
<td class="left">NTPサーバから時刻を同期化するクライアントツール</td>
</tr>

<tr>
<td class="left">timedatectl</td>
<td class="left">上記機能全て統括的に行えるツール</td>
</tr>

<tr>
<td class="left">adjtimex</td>
<td class="left">Displays or sets the kernel time variable</td>
</tr>
</tbody>
</table>

<p>
時刻の表示／調整／同期化などは <code>timedatectl</code> で全て出来る。
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> NTP時刻同期化を自動化する</h3>
<div class="outline-text-3" id="text-3-1">
<pre class="example">
★set-ntpオプションで有効／無効を切り替える
$ sudo timedatectl set-ntp true

★状態確認
$ sudo timedatectl status
      Local time: 日 2015-06-28 00:19:26 JST
  Universal time: 土 2015-06-27 15:19:26 UTC
        RTC time: 土 2015-06-27 15:19:26
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes                      ★NTP時刻同期化有効の状態
NTP synchronized: yes                      ★NTP時刻同期化済み
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
上記コマンドより <code>systemd-timesyncd.service</code> が有効化される。
<code>/usr/lib/systemd/systemd-timesyncd</code> デーモンプロセスがNTPクライアントとして動作し定
期的にNTPサーバから時刻を同期化する。
</p>
<pre class="example">
$ systemctl status systemd-timesyncd.service
● systemd-timesyncd.service - Network Time Synchronization
   Loaded: loaded (/usr/lib/systemd/system/systemd-timesyncd.service; enabled; vendor preset: enabled)
   Active: active (running) since 土 2015-06-27 19:29:29 JST; 4h 57min ago
     Docs: man:systemd-timesyncd.service(8)
 Main PID: 8787 (systemd-timesyn)
   Status: "Using Time Server 213.239.154.12:123 (0.arch.pool.ntp.org)."
   CGroup: /system.slice/systemd-timesyncd.service
           └─8787 /usr/lib/systemd/systemd-timesyncd

 6月 27 19:29:29 mimi systemd[1]: Starting Network Time Synchronization...
 6月 27 19:29:29 mimi systemd[1]: Started Network Time Synchronization.
 6月 27 20:45:20 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 202.234.64.222:123 (0.arch.pool.ntp.org).
 6月 27 20:45:30 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 157.7.153.56:123 (0.arch.pool.ntp.org).
 6月 27 20:45:40 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 108.61.223.189:123 (0.arch.pool.ntp.org).
 6月 27 20:45:51 mimi systemd-timesyncd[8787]: Timed out waiting for reply from 133.100.11.8:123 (0.arch.pool.ntp.org).
</pre>

<p>
NTPサーバは <code>/etc/systemd/timesyncd.conf</code> にて指定出来る。
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> タイムゾーンの変更</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Asia/Tokyoタイムゾーンの指定
</p>
<pre class="example">
★利用可能なゾーンの表示
$ timedatectl list-timezones
Africa/Abidjan
Africa/Accra
Africa/Addis_Ababa
Africa/Algiers
Africa/Asmara
Africa/Bamako
Africa/Bangui
Africa/Banjul
Africa/Bissau
Africa/Blantyre
（中略）

★タイムゾーンの指定、/etc/localtimeのリンク先が変わる
$ timedatectl set-timezone Asia/Tokyo

★タイムゾーンの確認
$ timedatectl status
      Local time: 日 2015-06-28 17:57:04 JST
  Universal time: 日 2015-06-28 08:57:04 UTC
        RTC time: 日 2015-06-28 08:57:04
       Time zone: Asia/Tokyo (JST, +0900)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a
</pre>

<p>
America/Los_Angelesタイムゾーンの指定、「＊」部分は夏時間です。
</p>
<pre class="example">
  |$ timedatectl  set-timezone America/Los_Angeles
  |[akira@mimi ~]$ timedatectl status
  |      Local time: 日 2015-06-28 01:54:09 PDT
  |  Universal time: 日 2015-06-28 08:54:09 UTC
  |        RTC time: 日 2015-06-28 08:54:09
  |       Time zone: America/Los_Angeles (PDT, -0700)
  |     NTP enabled: yes
  |NTP synchronized: yes
  | RTC in local TZ: no
＊|      DST active: yes
＊| Last DST change: DST began at
＊|                  日 2015-03-08 01:59:59 PST
＊|                  日 2015-03-08 03:00:00 PDT
＊| Next DST change: DST ends (the clock jumps one hour backwards) at
＊|                  日 2015-11-01 01:59:59 PDT
＊|                  日 2015-11-01 01:00:00 PST
</pre>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> ハードウェアクロックとの同期化</h3>
<div class="outline-text-3" id="text-3-3">
<p>
ハードウェアクロックの時刻をUTCとして扱うように <code>/etc/adjtime</code> ファイルを更新する。
また、システムクロック時刻をハードウェアクロックに書き戻す。
</p>
<pre class="example">
$ timedatectl set-local-rtc false
</pre>


<p>
<code>/etc/adjtime</code> ファイルの３行目がUTCでマークされた。
</p>
<pre class="example">
$ cat /etc/adjtime
0.000000 0 0.000000
0
UTC                                ★ハードウェアクロックがUTC時刻として扱う
</pre>

<p>
RTC が localtime だった場合予期せぬバグを引き起こす可能性があるため、最近のカーネルは
<code>/etc/adjtime</code> ファイルに設定値がない場合 RTC を UTC としてみなします。 <code>hwclock</code> コ
マンドに&#x2013;debugオプションを付けるとハードウェアクロックがどうのように扱われるかを確認
することが出来ます。
</p>

<p>
ハードウェアクロックの値をUTC時刻として扱い、表示時に <code>/etc/localtime</code> に持っている
タイムゾーン情報を元にローカル時刻で表示する。
</p>
<pre class="example">
$ hwclock --show --debug
hwclock from util-linux 2.26.2
クロックの /dev インターフェイス を使用中。
ハードウェアの時刻が UTC に設定されているものと仮定します。
クロックティックを待っています...
...クロックティックを取得しました
ハードウェアの時計から読み込んだ時刻: 2015/06/27 15:44:18
ハードウェアの時刻値 : 2015/06/27 15:44:18 = 1969 年から 1435419858 秒経過
Time since last adjustment is 1435419858 seconds
Calculated Hardware Clock drift is 0.000000 seconds
2015年06月28日 00時44分17秒  .665140 秒
</pre>

<p>
以下 <code>/etc/adjtime=</code> の設定値を明示された場合 <code>hwclock</code> の出力です。「*」部分が差分で
す。
</p>
<pre class="example">
 |$ hwclock -r --debug
 |hwclock from util-linux 2.26.2
 |クロックの /dev インターフェイス を使用中。
*|直前のズレの修正は、 1969 年から 0 秒経過した時点で行なわれました
*|直前の調整は 1969 年から 0 秒経過した時点で行なわれました
*|ハードウェアの時刻は UTC です
 |ハードウェアの時刻が UTC に設定されているものと仮定します。
 |クロックティックを待っています...
 |...クロックティックを取得しました
 |ハードウェアの時計から読み込んだ時刻: 2015/06/27 16:05:20
 |ハードウェアの時刻値 : 2015/06/27 16:05:20 = 1969 年から 1435421120 秒経過
 |Time since last adjustment is 1435421120 seconds
 |Calculated Hardware Clock drift is 0.000000 seconds
 |2015年06月28日 01時05分19秒  .432450 秒
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 時刻関連ファイル</h2>
<div class="outline-text-2" id="text-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">ファイル</th>
<th scope="col" class="left">役割</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">/etc/localtime</td>
<td class="left">ローカル時刻（標準時）に適用するタイムゾーン情報</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">/etc/adjtime</td>
<td class="left">ハードウェアクロック情報を保持するファイル、詳細について</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">man hwclockのThe Adjust Functionセクションにて確認出来る</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">/dev/rtc</td>
<td class="left">ハードウェアクロックデバイスファイル</td>
</tr>

<tr>
<td class="left">/dev/rtc0</td>
<td class="left">同上</td>
</tr>

<tr>
<td class="left">/dev/misc/rtc</td>
<td class="left">同上</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> デュアルブートの注意点</h2>
<div class="outline-text-2" id="text-5">
<p>
以下 からの抜粋
</p>
<pre class="example">
windows はハードウェア クロックのタイムゾーンを、暗黙裡にローカル タイムであると認識
します。 Linux のようにタイムゾーンを選択(UTC or ローカルタイム)できる機能はありませ
ん。

そのため windows を含むマルチ ブート環境では、ハードウェア クロックのタイムゾーンを
UTCとすることは不可能(ローカルタイム固定)で、他のOSが windows の作法に合わせる必要が
あります。
</pre>

<p>
日本の場合、システムをWindowsモードで起動したとして、次回Linux起動した後のシステム時
刻がローカル時刻より９時間早まる。
</p>

<p>
回避方法: <a href="https://archlinuxjp.kusakata.com/wiki/%25E6%2599%2582%25E5%2588%25BB#Windows_.E3.81.A7_UTC_.E3.82.92.E4.BD.BF.E3.81.86">Windows で UTC を使う</a>
</p>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> NTPサーバの構築</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><a href="https://archlinuxjp.kusakata.com/wiki/Network_Time_Protocol_daemon">Network Time Protocol daemon</a>
</li>
<li><a href="http://qiita.com/yunano/items/7883cf295f91f4ef716b">新しいNTPクライアント＆サーバ、chrony</a>
</li>
<li><a href="http://jp.fujitsu.com/platform/server/sparc/manual/notes/pdf/ntpguide.pdf">NTP運用ガイド for Oracle Solaris</a>
</li>
<li><a href="http://nayamibito.hatenablog.com/entry/2013/12/31/161027">Linux学習記　その3　NTPについて学んでみる。</a>
</li>
<li><a href="http://d.hatena.ne.jp/incarose86/touch/20110505/1312522379">NTP設定</a>
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> システムコール</h2>
<div class="outline-text-2" id="text-7">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">関数名</th>
<th scope="col" class="left">機能概要</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/gettimeofday.2.html">gettimeofday</a></td>
<td class="left">システム時刻を取得する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/gettimeofday.2.html">settimeofday</a></td>
<td class="left">システム時刻を設定する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">time</td>
<td class="left">秒単位の時間を得る</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man3/strftime.3.html">strftime</a></td>
<td class="left">日付および時刻の文字列への変換</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man2/adjtimex.2.html">adjtimex</a></td>
<td class="left">カーネルの時計を調整する</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man3/clock.3.html">clock</a></td>
<td class="left">プログラムの使用したプロセッサ時間の近似値を返す</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">asctime</td>
<td class="left">日付と時刻を要素別の時刻や ASCII に変換する</td>
</tr>

<tr>
<td class="left">ctime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">gmtime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">localtime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">mktime</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">asctime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">ctime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">gmtime_r</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">localtime_r</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>




<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> カーネルの実装について</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li><a href="http://enakai00.hatenablog.com/entry/20111117/1321508379">Ticklessカーネルとクロックソースに関するお話</a>
</li>
<li><a href="http://www.valinux.co.jp/technologylibrary/document/linuxkernel/timer0002/#n1">カーネルにおけるタイマー事情 ～第2回 カーネル内の時刻/時間関連サブシステム～</a>
</li>
<li><a href="https://www.ujiya.net/linux/067">jiffies更新を追いかける</a>
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> 参考</h2>
<div class="outline-text-2" id="text-9">
</div><ol class="org-ol"><li><a id="fn1" name="fn1"></a><a id="sec-9-0-0-1" name="sec-9-0-0-1"></a><a href="http://www.atmarkit.co.jp/ait/articles/0812/26/news120.html">Linux時刻管理の仕組みと設定</a><br  /><div class="outline-text-5" id="text-fn1">
</div>
</li>
<li><a id="fn2" name="fn2"></a><a id="sec-9-0-0-2" name="sec-9-0-0-2"></a><a href="http://qiita.com/key/items/06c2915de55d6155aa54">RaspberryPiにRTCモジュールを搭載して、ハードウェア起動時に時刻を合わせる</a><br  /><div class="outline-text-5" id="text-fn2">
</div>
</li>
<li><a id="sec-9-0-0-3" name="sec-9-0-0-3"></a><a href="http://hs-it-notes.blogspot.jp/2014/01/raspberry-pi.html">Raspberry Piにリアルタイムクロックをインストールする</a><br  /></li>
<li><a id="sec-9-0-0-4" name="sec-9-0-0-4"></a><a href="http://linuxjm.osdn.jp/html/util-linux/man8/hwclock.8.html">HWCLOCK 日本語MAN ページ</a><br  /></li>
<li><a id="sec-9-0-0-5" name="sec-9-0-0-5"></a><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man4/rtc.4.html">RTC 日本語MAN ページ</a><br  /></li>
<li><a id="sec-9-0-0-6" name="sec-9-0-0-6"></a><a href="https://www.kernel.org/doc/Documentation/rtc.txt">Kernel Document - rtx.txt</a><br  /></li>
<li><a id="sec-9-0-0-7" name="sec-9-0-0-7"></a><a href="http://archive.linux.or.jp/JF/JFdocs/Clock/time-tracking.html">Linux はどのように時間を計っているのか</a><br  /></li>
<li><a id="sec-9-0-0-8" name="sec-9-0-0-8"></a><a href="https://wiki.archlinux.org/index.php/Time">Archlinu - Time</a><br  /></li>
<li><a id="sec-9-0-0-9" name="sec-9-0-0-9"></a><a href="http://park12.wakwak.com/~eslab/pcmemo/clock/clock3.html">パソコンの時計　ハードウェア クロックとシステム クロック</a><br  /></li>
<li><a id="fn10" name="fn10"></a><a id="sec-9-0-0-10" name="sec-9-0-0-10"></a><a href="http://www.time-j.net/uc/dst/">世界の国のサマータイムの導入状況について</a><br  /><div class="outline-text-5" id="text-fn10">
</div>
</li></ol>
</div>

]]></content>
  </entry>
  
</feed>
