<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Socket | Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/blog/tags/socket/atom.xml" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2015-07-02T19:17:14+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[調査]JBossAS7のソケット操作タイムアウト値について]]></title>
    <link href="http://luozengbin.github.io/blog/2014-10-08-%5B%E8%AA%BF%E6%9F%BB%5Djbossas7%E3%81%AE%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88%E6%93%8D%E4%BD%9C%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6.html"/>
    <updated>2014-10-08T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[調査]jbossas7のソケット操作タイムアウト値について</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. DEFAULT_CONNECTION_TIMEOUTオプションの役割</a></li>
<li><a href="#sec-2">2. JBossASの実装</a></li>
<li><a href="#sec-3">3. タイムアウト時の挙動</a>
<ul>
<li><a href="#sec-3-1">3.1. HTTPヘッダー受信途中タイムアウトの場合</a></li>
<li><a href="#sec-3-2">3.2. リクエスト本文受信途中タイムアウトの場合</a></li>
</ul>
</li>
<li><a href="#sec-4">4. 注意書き</a></li>
<li><a href="#sec-5">5. 参考リンク</a></li>
</ul>
</div>
</div>


<p>
JBossAS の起動オプション <code>org.apache.coyote.http11.DEFAULT_CONNECTION_TIMEOUT</code> につい
て誤解があったので、メモしておきます。
</p>




<p>
まず、ドキュメントの説明。デフォルトタイムアウト値が60秒ですね。
</p>


<pre class="example">
org.apache.coyote.http11.DEFAULT_CONNECTION_TIMEOUT
Default socket timeout. The default value is 60000 ms.
</pre>


<p>
説明だけでよく分からない、最初はサーバサイトワーカスレッドの処理時間タイムアウト値
と理解しました。
</p>




<p>
テストアプリでタイムアウト時の動作を確認する。
</p>


<pre class="example">
+----------+            +----------------+
| SoapUI   +------------+  テストアプリ  |
+----------+            |                |
                        +----------------+
                        |  JBossAS 7.x   |
                        +----------------+
</pre>


<p>
SoapUIのリードタイムアウトを120秒に変更する、テストアプリに <code>Thread.sleep(70 * 1000)</code>
コードを仕込んで処理時間を長くする。これでタイムアウトになると考えたのですが、結果的に
タイムアウトせず、正常なレスポンスでした。これで、 <code>DEFAULT_CONNECTION_TIMEOUT</code> はワー
カスレッドのタイムアウト値ではないことが分かりました。
</p>




<p>
説明文にソケットのタイムアウト値であることが書かれたので <code>telnet</code> でソケット通信の各
stepの処理時間をあえて長くして動作状況を観測してみました。
</p>




<ol class="org-ol">
<li>telnetでコネクションを貼る
</li>
<li>ヘッダを途中まで送信する
</li>
<li>60秒待つこと
</li>
</ol>




<pre class="example">
$ telnet localhost 8080
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
POST http://localhost:8080/testapp/HelloWorld HTTP/1.1
Connection: close
Accept-Encoding: gzip,deflate
Content-Type: text/xml;charset=UTF-8
SOAPAction: "sayHello"
Content-Length: 318
Host: localhost:8080
★ここで60秒を待つ
Connection closed by foreign host.
</pre>




<p>
step3のところで60秒後、サーバからfinパケットが送出されてコネクションが切れた。
<code>DEFAULT_CONNECTION_TIMEOUT</code> パラメータの意味が少し掴みました。
</p>




<p>
少し掘り下げて見たいので、コードリーディングして実装の概要を以下に紹介します。
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> DEFAULT_CONNECTION_TIMEOUTオプションの役割</h2>
<div class="outline-text-2" id="text-1">
<p>
JBossASのJava起動オプションで指定する
<code>-Dorg.apache.coyote.http11.DEFAULT_CONNECTION_TIMEOUT=xxxxx</code> オプションの値は最終的に
ソケット操作のブロックタイムアウト値 <code>java.net.ServerSocket.setSoTimeout(xx)</code> に反映さ
れる。
</p>

<p>
サーバ側で以下のソケット操作でブロックされる時間が指定時間より超えるとタイムアウトさせ
る機能です。
</p>
<pre class="example">
ServerSocket.accept();
SocketInputStream.read();
DatagramSocket.receive();
</pre>

<p>
例えば、HTTPヘッダ受信途中クライアント側がストール状態になり、
<code>SocketInputStream.read()</code> 処理がずっと待ち続けるには行けないので（FDのリソース枯渇に
なるかも知らない）、タイムアウトさせる必要があります。
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> JBossASの実装</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>org.apache.coyote.http11.Constants</code> にデフォルト値が60秒で定義されている。
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #b4fa70;">public</span> <span style="color: #b4fa70;">final</span> <span style="color: #b4fa70;">class</span> <span style="color: #8cc4ff;">Constants</span> {
    ...............
    <span style="color: #73d216;">//</span><span style="color: #73d216;">&#9733;&#12371;&#12371;&#12391;Java&#12458;&#12503;&#12471;&#12519;&#12531;&#12363;&#12425;&#20516;&#12434;&#21442;&#29031;&#12375;&#12390;&#12356;&#12427;</span>
    <span style="color: #b4fa70;">public</span> <span style="color: #b4fa70;">static</span> <span style="color: #b4fa70;">final</span> <span style="color: #8cc4ff;">int</span> DEFAULT_CONNECTION_TIMEOUT =
            Integer.valueOf(System.getProperty(<span style="color: #e9b96e;">"org.apache.coyote.http11.DEFAULT_CONNECTION_TIMEOUT"</span>, <span style="color: #e9b96e;">"60000"</span>)).intValue();
    .............
</pre>
</div>

<p>
この値は以下の流れで、 <code>JIoEndpoint</code> クラスの <code>soTimeout</code> 属性に反映される。
</p>
<pre class="example">
1.org.jboss.as.web.WebConnectorService.start()
2.  org.apache.catalina.connector.Connectorのコンストラクタ処理
3.    apache.coyote.http11.Http11Protocolのコンストラクタ処理
4.      org.apache.tomcat.util.net.JIoEndpoint.setSoTimeout(xx)
</pre>

<p>
<code>acceptor</code> スレッドで新規コネクションをacceptしワーカスレッドに渡した後にワーカスレッ
ドの <code>run</code> 関数内 <code>java.net.ServerSocket.setSoTimeout(xx)</code> 関数を呼び出し、値を設定す
る。具体的な流れは以下となります。
</p>

<pre class="example">
1. org.apache.tomcat.util.net.JIoEndpoint.Acceptor.run()
2.   org.apache.tomcat.util.net.JIoEndpoint.processSocket(socket)
3.     ★ここで分岐がある、別途検証する
4.     org.apache.tomcat.util.net.JIoEndpoint.Workerが起動される
5.       org.apache.tomcat.util.net.JIoEndpoint.Worker.run()
6.         org.apache.tomcat.util.net.JIoEndpoint.setSocketOptions(socket)
7.           socket.setSoTimeout(soTimeout);
</pre>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> タイムアウト時の挙動</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> HTTPヘッダー受信途中タイムアウトの場合</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Cookiesが大きいの場合、HTTPヘッダー電文が複数パケットに分割する可能性が高い。
ネットワーク障害でHTTPヘッダー受信途中でタイムアウトが起きた場合サーバからFINパケット
よりコネクションが切断される。
</p>

<p>
以下はHTTPヘッダー受信処理のコードの抜粋です。タイムアウトが起きた場合★３の部分が実
行される。 エラーログを吐かずに処理が終了してしまう。
</p>

<p>
<a href="http://anonsvn.jboss.org/repos/jbossweb/tags/JBOSSWEB_7_2_2_FINAL/src/main/java/org/apache/coyote/http11/Http11Processor.java">org.apache.coyote.http11.Http11Processor</a>
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #e9b96e;">/**</span>
<span style="color: #e9b96e;"> * Process pipelined HTTP requests on the specified socket.</span>
<span style="color: #e9b96e;"> *</span>
<span style="color: #e9b96e;"> * </span><span style="color: #e6a8df;">@param</span><span style="color: #e9b96e;"> socket Socket from which the HTTP requests will be read</span>
<span style="color: #e9b96e;"> *               and the HTTP responses will be written.</span>
<span style="color: #e9b96e;"> *</span>
<span style="color: #e9b96e;"> * </span><span style="color: #e6a8df;">@throws</span><span style="color: #e9b96e;"> IOException error during an I/O operation</span>
<span style="color: #e9b96e;"> */</span>
<span style="color: #b4fa70;">public</span> <span style="color: #8cc4ff;">SocketState</span> <span style="color: #fce94f;">process</span>(<span style="color: #8cc4ff;">Socket</span> <span style="color: #fcaf3e;">socket</span>)
    <span style="color: #b4fa70;">throws</span> <span style="color: #8cc4ff;">IOException</span> {
    <span style="color: #8cc4ff;">RequestInfo</span> <span style="color: #fcaf3e;">rp</span> = request.getRequestProcessor();
    rp.setStage(<span style="color: #e6a8df;">org</span>.<span style="color: #e6a8df;">apache</span>.<span style="color: #e6a8df;">coyote</span>.<span style="color: #e6a8df;">Constants</span>.STAGE_PARSE);

    <span style="color: #73d216;">//</span><span style="color: #73d216;">&#9733;&#9733;&#9733;&#65296; &#12356;&#12429;&#12356;&#12429;&#30465;&#30053;&#12377;&#12427;</span>

    <span style="color: #b4fa70;">while</span> (!error &amp;&amp; keepAlive &amp;&amp; !event) {

        <span style="color: #73d216;">// </span><span style="color: #73d216;">Parsing the request header</span>
        <span style="color: #b4fa70;">try</span> {
            <span style="color: #b4fa70;">if</span> (!disableUploadTimeout &amp;&amp; keptAlive) {
                <span style="color: #b4fa70;">if</span> (keepAliveTimeout &gt; 0) {
                    socket.setSoTimeout(keepAliveTimeout);
                }
                <span style="color: #b4fa70;">else</span> <span style="color: #b4fa70;">if</span> (soTimeout &gt; 0) {
                    socket.setSoTimeout(soTimeout);
                }
            }

            <span style="color: #73d216;">//</span><span style="color: #73d216;">&#9733;&#9733;&#9733;&#65297; HTTP&#12504;&#12483;&#12480;&#12540;&#65297;&#34892;&#30446;&#12398;&#21463;&#20449;&#20966;&#29702;</span>
            inputBuffer.parseRequestLine();
            request.setStartTime(System.currentTimeMillis());
            keptAlive = <span style="color: #e6a8df;">true</span>;
            <span style="color: #b4fa70;">if</span> (!disableUploadTimeout) {
                socket.setSoTimeout(timeout);
            }

            <span style="color: #73d216;">//</span><span style="color: #73d216;">&#9733;&#9733;&#9733;&#65298; HTTP&#12504;&#12483;&#12480;&#12540;&#12398;&#21463;&#20449;&#20966;&#29702;</span>
            inputBuffer.parseHeaders();
        } <span style="color: #b4fa70;">catch</span> (<span style="color: #8cc4ff;">IOException</span> <span style="color: #fcaf3e;">e</span>) {

            <span style="color: #73d216;">//</span><span style="color: #73d216;">&#9733;&#9733;&#9733;&#65299; &#12493;&#12483;&#12488;&#12527;&#12540;&#12463;IO&#12456;&#12521;&#12540;&#26178;&#12289;&#20966;&#29702;&#12434;&#27490;&#12417;&#12427;</span>
            error = <span style="color: #e6a8df;">true</span>;
            <span style="color: #b4fa70;">break</span>;
        } <span style="color: #b4fa70;">catch</span> (<span style="color: #8cc4ff;">Throwable</span> <span style="color: #fcaf3e;">t</span>) {
            <span style="color: #e6a8df;">CoyoteLogger</span>.HTTP_LOGGER.errorParsingHeader(t);
            <span style="color: #73d216;">// </span><span style="color: #73d216;">400 - Bad Request</span>
            response.setStatus(400);
            error = <span style="color: #e6a8df;">true</span>;
        }
</pre>
</div>

<p>
★３の部分にエラー出力処理を追加しらた、タイムアウト時下記のエラートレースが出力され
た。
</p>
<pre class="example">
19:23:49,020 ERROR [stderr] (http-/0.0.0.0:8080-1) java.net.SocketTimeoutException: Read timed out
19:23:49,020 ERROR [stderr] (http-/0.0.0.0:8080-1)  at java.net.SocketInputStream.socketRead0(Native Method)
19:23:49,021 ERROR [stderr] (http-/0.0.0.0:8080-1)  at java.net.SocketInputStream.read(SocketInputStream.java:152)
19:23:49,021 ERROR [stderr] (http-/0.0.0.0:8080-1)  at java.net.SocketInputStream.read(SocketInputStream.java:122)
19:23:49,027 ERROR [stderr] (http-/0.0.0.0:8080-1)  at org.apache.coyote.http11.InternalInputBuffer.fill(InternalInputBuffer.java:721)
19:23:49,028 ERROR [stderr] (http-/0.0.0.0:8080-1)  at org.apache.coyote.http11.InternalInputBuffer.parseHeader(InternalInputBuffer.java:660)
19:23:49,028 ERROR [stderr] (http-/0.0.0.0:8080-1)  at org.apache.coyote.http11.InternalInputBuffer.parseHeaders(InternalInputBuffer.java:516)
19:23:49,029 ERROR [stderr] (http-/0.0.0.0:8080-1)  at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:828)
19:23:49,032 ERROR [stderr] (http-/0.0.0.0:8080-1)  at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:653)
19:23:49,033 ERROR [stderr] (http-/0.0.0.0:8080-1)  at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:920)
19:23:49,034 ERROR [stderr] (http-/0.0.0.0:8080-1)  at java.lang.Thread.run(Thread.java:745)
</pre>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> リクエスト本文受信途中タイムアウトの場合</h3>
<div class="outline-text-3" id="text-3-2">
<p>
以下、HTTP本文読み取り処理(HTTP POST)でブロックタイムアウトが起きた時のサーバログです。
</p>
<pre class="example">
Caused by: java.net.SocketTimeoutException: Read timed out
    at java.net.SocketInputStream.socketRead0(Native Method) [rt.jar:1.7.0_65]
    at java.net.SocketInputStream.read(SocketInputStream.java:152) [rt.jar:1.7.0_65]
    at java.net.SocketInputStream.read(SocketInputStream.java:122) [rt.jar:1.7.0_65]
    at org.apache.coyote.http11.InternalInputBuffer.fill(InternalInputBuffer.java:737) [jbossweb-7.2.2.Final-redhat-1.jar:7.2.2.Final-redhat-1]
    at org.apache.coyote.http11.InternalInputBuffer$InputStreamInputBuffer.doRead(InternalInputBuffer.java:767) [jbossweb-7.2.2.Final-redhat-1.jar:7.2.2.Final-redhat-1]
    at org.apache.coyote.http11.filters.IdentityInputFilter.doRead(IdentityInputFilter.java:116) [jbossweb-7.2.2.Final-redhat-1.jar:7.2.2.Final-redhat-1]
    at org.apache.coyote.http11.InternalInputBuffer.doRead(InternalInputBuffer.java:697) [jbossweb-7.2.2.Final-redhat-1.jar:7.2.2.Final-redhat-1]
    at org.apache.coyote.Request.doRead(Request.java:438) [jbossweb-7.2.2.Final-redhat-1.jar:7.2.2.Final-redhat-1]
    at org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:341) [jbossweb-7.2.2.Final-redhat-1.jar:7.2.2.Final-redhat-1]
    ... 47 more
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 注意書き</h2>
<div class="outline-text-2" id="text-4">
<p>
<code>org.apache.coyote.http11.DEFAULT_CONNECTION_TIMEOUT</code> が次のように誤解されることもあ
るので、要注意です。
</p>
<pre class="example">
ワーカスレッドの実行時間のタイムアウト値
</pre>

<p>
あくまでもソケットのブロックタイムアウト値なので、アプリのロジック処理時と関係ないで
す。主にHTTPヘッダとHTTP本文の読み取り処理のブロック時間を監視するために使われる。
</p>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考リンク</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="https://docs.jboss.org/jbossweb/7.0.x/sysprops.html">JBossWeb System Properties</a>
</li>
<li><a href="http://docs.oracle.com/javase/jp/1.4/api/java/net/Socket.html#getSoTimeout%2528%2529">Java API Doc クラス Socket</a>
</li>
<li><a href="http://docs.oracle.com/javase/jp/6/api/java/net/SocketOptions.html#SO_TIMEOUT">Java API Doc - インタフェース SocketOptions</a>
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
</feed>
