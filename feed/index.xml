<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Akira's Tech Notes]]></title>
  <link href="http://luozengbin.github.io/feed" rel="self"/>
  <link href="http://luozengbin.github.io/"/>
  <updated>2014-06-16T15:28:36+09:00</updated>
  <id>http://luozengbin.github.io/</id>
  <author>
    <name><![CDATA[luozengbin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[検証]firewalldを遊んでみた]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-16-%5B%E6%A4%9C%E8%A8%BC%5Dfirewalld%E3%82%92%E9%81%8A%E3%82%93%E3%81%A7%E3%81%BF%E3%81%9F.html"/>
    <updated>2014-06-16T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]firewalldを遊んでみた</id>
    <content type="html"><![CDATA[<p>
自宅の <code>Raspberry Pi</code> にfirewalldを入れて遊んで見ました。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">firewalld情報収集から始まる</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>iptablesが土台となります、firewalldの設定はipatbles設定へ変化される
</li>
<li>アプリケーションはAD-BUSのAPI経由で設定可能
</li>
<li>受送信ルールはゾーンファイルにて定義する
</li>
<li>受送信サービスタイプ（サービス名＋ポートより識別する）による通信制限する
</li>
<li>受送信ICMPタイプによる通信制限する
</li>
<li>通信元のIPサブネットによる通信制限する
</li>
<li>NICポートごとにゾーンファイルを適用することが可能
（複数同時適用可能かは未確定）
</li>
</ul>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">検証環境</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Archlinux : <a href="https://www.archlinux.org/">https://www.archlinux.org/</a>
</li>
<li>firewalld-0.3.10-1 : <a href="https://www.archlinux.org/packages/community/any/firewalld/">https://www.archlinux.org/packages/community/any/firewalld/</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">firewalldのパッケージ構成</h2>
<div class="outline-text-2" id="text-3">
<pre class="example">
/etc/
/etc/conf.d/
/etc/conf.d/firewalld           ★firewalldサービス起動パラメータの定義
/etc/dbus-1/
/etc/dbus-1/system.d/
/etc/dbus-1/system.d/FirewallD.conf
/etc/firewalld/
/etc/firewalld/firewalld.conf
/etc/firewalld/icmptypes/      ★独自ICMPタイプの定義はここに追加
/etc/firewalld/lockdown-whitelist.xml
/etc/firewalld/services/       ★独自サービス定義はここに追加
/etc/firewalld/zones/          ★独自のゾーンファイルはここに追加
/etc/xdg/
/etc/xdg/autostart/
/etc/xdg/autostart/firewall-applet.desktop
/usr/
/usr/bin/
/usr/bin/firewall-applet       ★GUIツール
/usr/bin/firewall-cmd
/usr/bin/firewall-config
/usr/bin/firewall-offline-cmd
/usr/bin/firewalld
/usr/lib/
/usr/lib/firewalld/
/usr/lib/firewalld/icmptypes/  ★ICMPタイプの定義
/usr/lib/firewalld/icmptypes/destination-unreachable.xml
/usr/lib/firewalld/icmptypes/echo-reply.xml
/usr/lib/firewalld/icmptypes/echo-request.xml
/usr/lib/firewalld/icmptypes/parameter-problem.xml
/usr/lib/firewalld/icmptypes/redirect.xml
/usr/lib/firewalld/icmptypes/router-advertisement.xml
/usr/lib/firewalld/icmptypes/router-solicitation.xml
/usr/lib/firewalld/icmptypes/source-quench.xml
/usr/lib/firewalld/icmptypes/time-exceeded.xml
/usr/lib/firewalld/services/  ★サービス定義
/usr/lib/firewalld/services/amanda-client.xml
/usr/lib/firewalld/services/amanda-k5-client.xml
/usr/lib/firewalld/services/bacula-client.xml
/usr/lib/firewalld/services/bacula.xml
/usr/lib/firewalld/services/dhcp.xml
/usr/lib/firewalld/services/dhcpv6-client.xml
/usr/lib/firewalld/services/dhcpv6.xml
/usr/lib/firewalld/services/dns.xml
/usr/lib/firewalld/services/freeipa-ldap.xml
/usr/lib/firewalld/services/freeipa-ldaps.xml
/usr/lib/firewalld/services/freeipa-replication.xml
/usr/lib/firewalld/services/ftp.xml
/usr/lib/firewalld/services/high-availability.xml
/usr/lib/firewalld/services/http.xml
/usr/lib/firewalld/services/https.xml
/usr/lib/firewalld/services/imaps.xml
/usr/lib/firewalld/services/ipp-client.xml
/usr/lib/firewalld/services/ipp.xml
/usr/lib/firewalld/services/ipsec.xml
/usr/lib/firewalld/services/kerberos.xml
/usr/lib/firewalld/services/kpasswd.xml
/usr/lib/firewalld/services/ldap.xml
/usr/lib/firewalld/services/ldaps.xml
/usr/lib/firewalld/services/libvirt-tls.xml
/usr/lib/firewalld/services/libvirt.xml
/usr/lib/firewalld/services/mdns.xml
/usr/lib/firewalld/services/mountd.xml
/usr/lib/firewalld/services/ms-wbt.xml
/usr/lib/firewalld/services/mysql.xml
/usr/lib/firewalld/services/nfs.xml
/usr/lib/firewalld/services/ntp.xml
/usr/lib/firewalld/services/openvpn.xml
/usr/lib/firewalld/services/pmcd.xml
/usr/lib/firewalld/services/pmproxy.xml
/usr/lib/firewalld/services/pmwebapi.xml
/usr/lib/firewalld/services/pmwebapis.xml
/usr/lib/firewalld/services/pop3s.xml
/usr/lib/firewalld/services/postgresql.xml
/usr/lib/firewalld/services/privoxy.xml
/usr/lib/firewalld/services/proxy-dhcp.xml
/usr/lib/firewalld/services/puppetmaster.xml
/usr/lib/firewalld/services/radius.xml
/usr/lib/firewalld/services/rpc-bind.xml
/usr/lib/firewalld/services/samba-client.xml
/usr/lib/firewalld/services/samba.xml
/usr/lib/firewalld/services/sane.xml
/usr/lib/firewalld/services/smtp.xml
/usr/lib/firewalld/services/ssh.xml
/usr/lib/firewalld/services/synergy.xml
/usr/lib/firewalld/services/telnet.xml
/usr/lib/firewalld/services/tftp-client.xml
/usr/lib/firewalld/services/tftp.xml
/usr/lib/firewalld/services/tor-socks.xml
/usr/lib/firewalld/services/transmission-client.xml
/usr/lib/firewalld/services/vnc-server.xml
/usr/lib/firewalld/services/wbem-https.xml
/usr/lib/firewalld/services/xmpp-bosh.xml
/usr/lib/firewalld/services/xmpp-client.xml
/usr/lib/firewalld/services/xmpp-local.xml
/usr/lib/firewalld/services/xmpp-server.xml
/usr/lib/firewalld/zones/                          ★デフォルトで用意されたゾーンの定義ファイル
/usr/lib/firewalld/zones/block.xml
/usr/lib/firewalld/zones/dmz.xml
/usr/lib/firewalld/zones/drop.xml
/usr/lib/firewalld/zones/external.xml
/usr/lib/firewalld/zones/home.xml
/usr/lib/firewalld/zones/internal.xml
/usr/lib/firewalld/zones/public.xml                ★デフォルトはこちらのゾーンが適用される
/usr/lib/firewalld/zones/trusted.xml
/usr/lib/firewalld/zones/work.xml
/usr/lib/python3.4/
/usr/lib/python3.4/site-packages/
/usr/lib/python3.4/site-packages/firewall/
/usr/lib/python3.4/site-packages/firewall/__init__.py
/usr/lib/python3.4/site-packages/firewall/client.py
/usr/lib/python3.4/site-packages/firewall/config/
/usr/lib/python3.4/site-packages/firewall/config/__init__.py
/usr/lib/python3.4/site-packages/firewall/config/dbus.py
/usr/lib/python3.4/site-packages/firewall/core/
/usr/lib/python3.4/site-packages/firewall/core/__init__.py
/usr/lib/python3.4/site-packages/firewall/core/base.py
/usr/lib/python3.4/site-packages/firewall/core/ebtables.py
/usr/lib/python3.4/site-packages/firewall/core/fw.py
/usr/lib/python3.4/site-packages/firewall/core/fw_config.py
/usr/lib/python3.4/site-packages/firewall/core/fw_direct.py
/usr/lib/python3.4/site-packages/firewall/core/fw_icmptype.py
/usr/lib/python3.4/site-packages/firewall/core/fw_policies.py
/usr/lib/python3.4/site-packages/firewall/core/fw_service.py
/usr/lib/python3.4/site-packages/firewall/core/fw_test.py
/usr/lib/python3.4/site-packages/firewall/core/fw_zone.py
/usr/lib/python3.4/site-packages/firewall/core/io/
/usr/lib/python3.4/site-packages/firewall/core/io/__init__.py
/usr/lib/python3.4/site-packages/firewall/core/io/direct.py
/usr/lib/python3.4/site-packages/firewall/core/io/firewalld_conf.py
/usr/lib/python3.4/site-packages/firewall/core/io/icmptype.py
/usr/lib/python3.4/site-packages/firewall/core/io/io_object.py
/usr/lib/python3.4/site-packages/firewall/core/io/lockdown_whitelist.py
/usr/lib/python3.4/site-packages/firewall/core/io/service.py
/usr/lib/python3.4/site-packages/firewall/core/io/zone.py
/usr/lib/python3.4/site-packages/firewall/core/ipXtables.py
/usr/lib/python3.4/site-packages/firewall/core/logger.py
/usr/lib/python3.4/site-packages/firewall/core/modules.py
/usr/lib/python3.4/site-packages/firewall/core/prog.py
/usr/lib/python3.4/site-packages/firewall/core/rich.py
/usr/lib/python3.4/site-packages/firewall/core/watcher.py
/usr/lib/python3.4/site-packages/firewall/dbus_utils.py
/usr/lib/python3.4/site-packages/firewall/errors.py
/usr/lib/python3.4/site-packages/firewall/functions.py
/usr/lib/python3.4/site-packages/firewall/fw_types.py
/usr/lib/python3.4/site-packages/firewall/server/
/usr/lib/python3.4/site-packages/firewall/server/__init__.py
/usr/lib/python3.4/site-packages/firewall/server/config.py
/usr/lib/python3.4/site-packages/firewall/server/config_icmptype.py
/usr/lib/python3.4/site-packages/firewall/server/config_service.py
/usr/lib/python3.4/site-packages/firewall/server/config_zone.py
/usr/lib/python3.4/site-packages/firewall/server/decorators.py
/usr/lib/python3.4/site-packages/firewall/server/firewalld.py
/usr/lib/python3.4/site-packages/firewall/server/server.py
/usr/lib/systemd/
/usr/lib/systemd/system/
/usr/lib/systemd/system/firewalld.service     ★systemdサービス定義ファイル
/usr/share/
/usr/share/appdata/
/usr/share/appdata/firewall-config.appdata.xml
/usr/share/applications/
/usr/share/applications/firewall-config.desktop
/usr/share/bash-completion/
/usr/share/bash-completion/completions/
/usr/share/bash-completion/completions/firewall-cmd
/usr/share/firewalld/
/usr/share/firewalld/firewall-config.glade
/usr/share/firewalld/gtk3_chooserbutton.py
/usr/share/glib-2.0/
/usr/share/glib-2.0/schemas/
/usr/share/glib-2.0/schemas/org.fedoraproject.FirewallApplet.gschema.xml
/usr/share/glib-2.0/schemas/org.fedoraproject.FirewallConfig.gschema.xml
/usr/share/icons/(★iconディレクトリ配下は省略)
/usr/share/locale/(★localeディレクトリ配下は省略)
/usr/share/man/
/usr/share/man/man1/
/usr/share/man/man1/firewall-applet.1.gz
/usr/share/man/man1/firewall-cmd.1.gz
/usr/share/man/man1/firewall-config.1.gz
/usr/share/man/man1/firewall-offline-cmd.1.gz
/usr/share/man/man1/firewalld.1.gz
/usr/share/man/man5/
/usr/share/man/man5/firewalld.conf.5.gz
/usr/share/man/man5/firewalld.dbus.5.gz
/usr/share/man/man5/firewalld.direct.5.gz
/usr/share/man/man5/firewalld.icmptype.5.gz
/usr/share/man/man5/firewalld.lockdown-whitelist.5.gz
/usr/share/man/man5/firewalld.richlanguage.5.gz
/usr/share/man/man5/firewalld.service.5.gz
/usr/share/man/man5/firewalld.zone.5.gz
/usr/share/man/man5/firewalld.zones.5.gz
/usr/share/polkit-1/
/usr/share/polkit-1/actions/
/usr/share/polkit-1/actions/org.fedoraproject.FirewallD1.desktop.policy
/usr/share/polkit-1/actions/org.fedoraproject.FirewallD1.policy
/usr/share/polkit-1/actions/org.fedoraproject.FirewallD1.server.policy
</pre>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">定義ファイルの見本</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">publicゾーン定義ファイル</h3>
<div class="outline-text-3" id="text-4-1">
<pre class="example">
[akira@pipi ~]$ cat /usr/lib/firewalld/zones/public.xml 
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;zone&gt;
  &lt;short&gt;Public&lt;/short&gt;
  &lt;description&gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;
  &lt;service name="ssh"/&gt;
  &lt;service name="dhcpv6-client"/&gt;
&lt;/zone&gt;
[akira@pipi ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">SSHサービス定義ファイル</h3>
<div class="outline-text-3" id="text-4-2">
<p>
プロトコール名とポート番号で識別する。
</p>
<pre class="example">
[akira@pipi ~]$ cat /usr/lib/firewalld/services/ssh.xml 
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;service&gt;
  &lt;short&gt;SSH&lt;/short&gt;
  &lt;description&gt;Secure Shell (SSH) is a protocol for logging into and executing commands on remote machines. It provides secure encrypted communications. If you plan on accessing your machine remotely via SSH over a firewalled interface, enable this option. You need the openssh-server package installed for this option to be useful.&lt;/description&gt;
  &lt;port protocol="tcp" port="22"/&gt;
&lt;/service&gt;
[akira@pipi ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">ICMPタイプ定義ファイル</h3>
<div class="outline-text-3" id="text-4-3">
<p>
shortタグのICMPタイプ名で識別する。使用可能なタイプ名は <code>iptables -p icmp -h</code> で確認
できる。
</p>
<pre class="example">
[akira@pipi ~]$ cat /usr/lib/firewalld/icmptypes/destination-unreachable.xml 
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;icmptype&gt;
  &lt;short&gt;Destination Unreachable&lt;/short&gt;
  &lt;description&gt;This error message is generated by a host or gateway if the destination is not reachable.&lt;/description&gt;
&lt;/icmptype&gt;

★使用可能なICMPタイプ名の確認
[akira@pipi ~]$ iptables -p icmp -h
--省略--
Valid ICMP Types:
any
echo-reply (pong)
destination-unreachable
   network-unreachable
   host-unreachable
   protocol-unreachable
   port-unreachable
   fragmentation-needed
   source-route-failed
   network-unknown
   host-unknown
   network-prohibited
   host-prohibited
   TOS-network-unreachable
   TOS-host-unreachable
   communication-prohibited
   host-precedence-violation
   precedence-cutoff
source-quench
redirect
   network-redirect
   host-redirect
   TOS-network-redirect
   TOS-host-redirect
echo-request (ping)
router-advertisement
router-solicitation
time-exceeded (ttl-exceeded)
   ttl-zero-during-transit
   ttl-zero-during-reassembly
parameter-problem
   ip-header-bad
   required-option-missing
timestamp-request
timestamp-reply
address-mask-request
address-mask-reply
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">firewalldコマンドインタフェース</h2>
<div class="outline-text-2" id="text-5">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">firewall-cmd</td>
<td class="left">&#x2013;reload</td>
<td class="left">定義の変更を反映する</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;complete-reload</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;state</td>
<td class="left">ステータスの確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-all-zones</td>
<td class="left">ゾーン設定の確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;get-services</td>
<td class="left">定義済みサービス一覧の取得</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;get-icmptypes</td>
<td class="left">定義済みICMP応答一覧の取得</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;get-default-zone</td>
<td class="left">デフォルトゾーンの確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;set-default-zone=&lt;ゾーン名&gt;</td>
<td class="left">デフォルトゾーンの変更</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-interface=&lt;nic名&gt;</td>
<td class="left">対象nicの適用ゾーンを除去</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★サービスの許可設定</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-services &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">対象ゾーンに許可されたサービス</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-service=&lt;サービス名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">指定のサービスが許可されているか確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-service=&lt;サービス名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">許可するサービスを追加</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-service=&lt;サービス名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">許可するサービスを削除</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★ICMPタイプの拒否設定</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-icmp-blocks &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">禁止されているICMPタイプを表示</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-icmp-block=&lt;ICMPタイプ名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">ICMPタイプが禁止されているか確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-icmp-block=&lt;ICMPタイプ名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">拒否するICMPタイプの追加</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-icmp-block=&lt;ICMPタイプ名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">拒否するICMPタイプの除外</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★IPマスカレードのOn/Off設定</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-masquerade &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">現在の設定を確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-masquerade &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">IPマスカレードを有効化</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-masquerade &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">IPマスカレードを無効化</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★nicに適用する</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-interface=&lt;nic名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">対象nicにゾーンを適用</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-interface=eth1</td>
<td class="left">適用ゾーンを除去</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-interfaces &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">ゾーンが適用されるNICポートを表示</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;change-interface=&lt;nic名&gt; &#x2013;zone=&lt;ゾーン名&gt;</td>
<td class="left">nicに適用するゾーンを変更する</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-interface=interface=h1</td>
<td class="left">nicに対象ゾーンが適用されたかの確認</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★通信元のIPサブネットによる通信制限</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;list-sources &#x2013;zone=&lt;ゾーン&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;get-zone-of-source=&lt;サブネット&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;query-source=&lt;サブネット&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;add-source=&lt;サブネット&gt; &#x2013;zone=&lt;ゾーン&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;change-source=&lt;サブネット&gt; &#x2013;zone=&lt;ゾーン&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;remove-source=&lt;サブネット&gt;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">★システム保守時役立つコマンド</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;panic-on</td>
<td class="left">すべてのネットワーク通信が遮断する</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#x2013;panic-off</td>
<td class="left">パニックモードを止める</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">インストールとサービスの有効化</h2>
<div class="outline-text-2" id="text-6">
<p>
<code>pacman</code> コマンドでインストール
</p>
<pre class="example">
[akira@pipi ~]$ sudo pacman -S firewalld 
依存関係を解決しています...
相互衝突をチェックしています...

パッケージ (1): firewalld-0.3.10-1

Total Installed Size:   2.64 MiB

:: インストールを行いますか？ [Y/n] 
(1/1) キーリングのキーを確認                                                                                                 [############################################################################] 100%
(1/1) パッケージの整合性をチェック                                                                                           [############################################################################] 100%
(1/1) パッケージファイルのロード                                                                                             [############################################################################] 100%
(1/1) ファイルの衝突をチェック                                                                                               [############################################################################] 100%
(1/1) 空き容量を確認                                                                                                         [############################################################################] 100%
(1/1) インストール firewalld                                                                                                 [############################################################################] 100%
[akira@pipi ~]$
</pre>

<p>
<code>systemctl</code> コマンドでサービスの有効化、起動
</p>
<pre class="example">
★サービスの有効化
[akira@pipi ~]$ sudo systemctl enable firewalld.service
[sudo] password for akira: 
ln -s '/usr/lib/systemd/system/firewalld.service' '/etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service'
ln -s '/usr/lib/systemd/system/firewalld.service' '/etc/systemd/system/basic.target.wants/firewalld.service'

★サービスの起動
[akira@pipi ~]$ sudo systemctl start firewalld.service

★サービス起動時のログ
[akira@pipi ~]$ sudo tail -f /var/log/everything.log
Jun 16 10:15:29 pipi systemd[1]: Starting firewalld - dynamic firewall daemon...
Jun 16 10:15:29 pipi systemd[1]: Failed to reset devices.list on /system.slice: Invalid argument
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jun 16 10:15:31 pipi kernel: [ 6372.219681] nf_conntrack version 0.5.0 (16384 buckets, 65536 max)
Jun 16 10:15:31 pipi kernel: [ 6372.360695] ip6_tables: (C) 2000-2006 Netfilter Core Team
Jun 16 10:15:31 pipi kernel: [ 6372.486263] Ebtables v2.0 registered
Jun 16 10:15:31 pipi kernel: [ 6372.504222] Bridge firewalling registered
Jun 16 10:15:32 pipi systemd[1]: Started firewalld - dynamic firewall daemon.

★サービスステータスの確認
[akira@pipi ~]$ sudo systemctl status firewalld.service
● firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled)
   Active: active (running) since 月 2014-06-16 10:15:32 JST; 3min 22s ago
 Main PID: 8679 (firewalld)
   CGroup: /system.slice/firewalld.service
           └─8679 /usr/bin/python -Es /usr/bin/firewalld --nofork --nopid

 6月 16 10:15:32 pipi systemd[1]: Started firewalld - dynamic firewall daemon.
[akira@pipi ~]$ firewall-cmd --state
</pre>

<p>
<code>/usr/lib/systemd/system/firewalld.service</code> サービス起動ファイルの中身
</p>
<pre class="example">
[Unit]
Description=firewalld - dynamic firewall daemon
Before=network.target
Before=libvirtd.service
Before=NetworkManager.service
Conflicts=iptables.service ip6tables.service ebtables.service  ★iptables, ebtablesサービスとのコンフリクト定義

[Service]
EnvironmentFile=-/etc/conf.d/firewalld                         ★起動パラメータファイル
ExecStart=/usr/bin/firewalld --nofork --nopid $FIREWALLD_ARGS  ★起動コマンド
ExecReload=/bin/kill -HUP $MAINPID                             ★停止コマンド
# supress to log debug and error output also to /var/log/messages
StandardOutput=null
StandardError=null
Type=dbus
BusName=org.fedoraproject.FirewallD1

[Install]
WantedBy=basic.target
Alias=dbus-org.fedoraproject.FirewallD1.service
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">pingをブロックしてみた</h2>
<div class="outline-text-2" id="text-7">
<p>
<code>public</code> ゾーンデフォルト状態ではすべてのICMPタイプを許可する。ここではpingをブロック
するようにしてみた。
</p>
<pre class="example">
★echo-requestをブロックする
[akira@pipi ~]$ sudo firewall-cmd --add-icmp-block=echo-request --zone=public
success
★設定の確認
[akira@pipi ~]$ sudo firewall-cmd --list-icmp-blocks --zone=public
echo-request

★iptablesにて設定を確認する
[akira@pipi ~]$ sudo iptables-save
~~省略~~
-A IN_public_deny -p icmp -m icmp --icmp-type 8 -j REJECT --reject-with icmp-host-prohibited ★タイプコードが8のicmpパケットを拒否するようにする
COMMIT
# Completed on Mon Jun 16 11:13:17 2014
</pre>

<p>
windows端末から確認して見る、見事にブロックができた。
</p>
<pre class="example">
C:\Users\akira&gt;ping 192.168.100.4

192.168.100.4 に ping を送信しています 32 バイトのデータ:
192.168.100.4 からの応答: 宛先ホストに到達できません。
192.168.100.4 からの応答: 宛先ホストに到達できません。
192.168.100.4 からの応答: 宛先ホストに到達できません。
192.168.100.4 からの応答: 宛先ホストに到達できません。

192.168.100.4 の ping 統計:
    パケット数: 送信 = 4、受信 = 4、損失 = 0 (0% の損失)、

C:\Users\akira&gt;
</pre>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">sambaサービスを許可してみた</h2>
<div class="outline-text-2" id="text-8">
<pre class="example">
[akira@pipi ~]$ sudo firewall-cmd --add-service=samba --zone=public
success
[akira@pipi ~]$ sudo iptables-save
~~省略~~~
-A IN_public_allow -p udp -m udp --dport 137 -m conntrack --ctstate NEW -j ACCEPT
-A IN_public_allow -p udp -m udp --dport 138 -m conntrack --ctstate NEW -j ACCEPT
-A IN_public_allow -p tcp -m tcp --dport 139 -m conntrack --ctstate NEW -j ACCEPT
-A IN_public_allow -p tcp -m tcp --dport 445 -m conntrack --ctstate NEW -j ACCEPT
~~省略~~~
</pre>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">独自ルールで通信履歴をロギングしてみた</h2>
<div class="outline-text-2" id="text-9">
<p>
<code>Rich Language</code> を用いて、特定のクライアントからhttpサービスを利用時にロギングする。
</p>
<pre class="example">
★ルール追加
[akira@pipi ~]$ sudo firewall-cmd --add-rich-rule='rule family="ipv4" source address="192.168.100.3" port port="80" protocol="tcp" log prefix="http connection" level="info" accept' --zone=pipi
success

★iptablesの確認
[akira@pipi ~]$ sudo iptables-save
# Generated by iptables-save v1.4.21 on Mon Jun 16 13:54:04 2014
~~省略~~
-A IN_pipi_log -s 192.168.100.3/32 -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW -j LOG --log-prefix "http connection" --log-level 6
COMMIT

★Apacheサーバの起動
[akira@pipi ~]$ sudo systemctl start httpd

★ログ確認
[akira@pipi ~]$ sudo tail -f /var/log/everything.log
Jun 16 14:12:25 pipi systemd[1]: Starting Apache Web Server...
Jun 16 14:12:26 pipi systemd[1]: PID file /run/httpd/httpd.pid not readable (yet?) after start.
Jun 16 14:12:26 pipi systemd[1]: Started Apache Web Server.
Jun 16 14:13:00 pipi kernel: [ 2076.795011] http connectionIN=eth0 OUT= MAC=8c:89:a5:45:1d:ef:00:21:85:a9:65:7b:08:00 SRC=192.168.100.3 DST=192.168.100.4 LEN=52 TOS=0x00 PREC=0x00 TTL=128 ID=28405 DF PROTO=TCP SPT=53049 DPT=80 WINDOW=8192 RES=0x00 SYN URGP=0 
Jun 16 14:13:44 pipi kernel: [ 2120.509739] http connectionIN=eth0 OUT= MAC=8c:89:a5:45:1d:ef:00:21:85:a9:65:7b:08:00 SRC=192.168.100.3 DST=192.168.100.4 LEN=52 TOS=0x00 PREC=0x00 TTL=128 ID=28755 DF PROTO=TCP SPT=53059 DPT=80 WINDOW=8192 RES=0x00 SYN URGP=
</pre>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">独自のゾーンファイルにしてみた</h2>
<div class="outline-text-2" id="text-10">
<p>
<code>/etc/firewalld/zones/</code> 配下に独自のゾーンファイルを作成する。
</p>
<pre class="example">
[akira@pipi ~]$ sudo touch /etc/firewalld/zones/pipi.xml
[akira@pipi ~]$ cat /etc/firewalld/zones/pipi.xml
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;zone&gt;
  &lt;short&gt;Pipi&lt;/short&gt;
  &lt;description&gt;For use in pipi areas.&lt;/description&gt;
  &lt;service name="ssh"/&gt;
  &lt;service name="samba"/&gt;
  &lt;!-- &lt;service name="samba-client"/&gt; --&gt;
  &lt;service name="dhcpv6-client"/&gt;
&lt;/zone&gt;
[akira@pipi ~]$
</pre>

<p>
<code>/etc/firewalld/firewalld.conf</code> ファイルにDefaultZoneを独自ゾーン名(ファイル名)に変更える。
</p>
<pre class="example">
# firewalld config file

# default zone
# The default zone used if an empty zone string is used.
# Default: public
DefaultZone=pipi  ★ここです
~~省略~~
</pre>

<p>
サービスを再起動する
</p>
<pre class="example">
[akira@pipi ~]$ sudo systemctl stop firewalld   ★サービス停止
[akira@pipi ~]$ sudo iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[akira@pipi ~]$ sudo systemctl start firewalld  ★サービス起動
[akira@pipi ~]$ sudo iptables-save 
~~省略~~
-A IN_pipi -j IN_pipi_allow
-A IN_pipi_allow -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT
-A IN_pipi_allow -p udp -m udp --dport 137 -m conntrack --ctstate NEW -j ACCEPT
-A IN_pipi_allow -p udp -m udp --dport 138 -m conntrack --ctstate NEW -j ACCEPT
-A IN_pipi_allow -p tcp -m tcp --dport 139 -m conntrack --ctstate NEW -j ACCEPT
-A IN_pipi_allow -p tcp -m tcp --dport 445 -m conntrack --ctstate NEW -j ACCEPT
COMMIT
# Completed on Mon Jun 16 13:31:04 2014
[akira@pipi ~]$
</pre>

<p>
<code>firewall-cmd --permanent</code> を用いて、pingのブロック設定を永続化させる。
</p>
<pre class="example">
[akira@pipi ~]$ sudo firewall-cmd --permanent --zone=pipi --add-icmp-block=echo-request
success
[akira@pipi ~]$ sudo systemctl restart firewalld
★ icmp-blockタグが自動的にゾーン定義ファイルに反映される。
[akira@pipi ~]$ sudo cat /etc/firewalld/zones/pipi.xml
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;zone&gt;
  &lt;short&gt;Pipi&lt;/short&gt;
  &lt;description&gt;For use in pipi areas.&lt;/description&gt;
  &lt;service name="ssh"/&gt;
  &lt;service name="dhcpv6-client"/&gt;
  &lt;service name="samba"/&gt;
  &lt;icmp-block name="echo-request"/&gt;
&lt;/zone&gt;
[akira@pipi ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">NICポートにゾーンの適用</h2>
<div class="outline-text-2" id="text-11">
<p>
起動した状態で <code>--remove-interface</code> で適用ゾーンをクリアしようとすると
<code>UNKNOWN_INTERFACE</code> で怒られた。一度 <code>--add-interface</code> してから使えるようになる。
</p>
<pre class="example">
[akira@hakusai ~]$ sudo firewall-cmd --remove-interface=eth0
Error: UNKNOWN_INTERFACE: eth0
[akira@hakusai ~]$ sudo firewall-cmd --add-interface=eth0 --zone=home
success
[akira@hakusai ~]$ sudo firewall-cmd --remove-interface=eth0
</pre>
</div>
</div>

<div id="outline-container-sec-12" class="outline-2">
<h2 id="sec-12">GUIツールを使って見た</h2>
<div class="outline-text-2" id="text-12">
<p>
firewalldのGUIインタフェースツール <code>/usr/bin/firewall-applet</code> として提供されている。
<code>/etc/xdg/autostart/firewall-applet.desktop</code> がインストルされた場合、OSがGUIモードで
起動するとfirewall-appletが自動起動される。システムトレイにアイコンが表示される。
<img src="img/firewalld-applet-01.png" alt="firewalld-applet-01.png" />
</p>

<p>
ゾーン設定変種画面
<img src="img/firewalld-applet-02.png" alt="firewalld-applet-02.png" />
</p>
<p>
サービス定義画面
<img src="img/firewalld-applet-03.png" alt="firewalld-applet-03.png" />
</p>
</div>
</div>

<div id="outline-container-sec-13" class="outline-2">
<h2 id="sec-13">参考した資料</h2>
<div class="outline-text-2" id="text-13">
<p>
Linux女子部　firewalld徹底入門！
<a href="http://www.slideshare.net/enakai/firewalld-study-v10">http://www.slideshare.net/enakai/firewalld-study-v10</a>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]Otcopressコンテンツ投稿自動化]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-15-%5B%E3%83%A1%E3%83%A2%5Dotcopress%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E6%8A%95%E7%A8%BF%E8%87%AA%E5%8B%95%E5%8C%96.html"/>
    <updated>2014-06-15T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[メモ]otcopressコンテンツ投稿自動化</id>
    <content type="html"><![CDATA[<p>
emacsからblog投稿ツールいくつ試しました、最近以下のツール組み合わせで落ち着いた。
</p>
<ul class="org-ul">
<li>静的コンテンツ生成エンジン <code>Octopress</code> ： <a href="http://Octopress.org/">http://Octopress.org/</a>
</li>
<li>コンテンツ公開サービス <code>Github Page</code> : <a href="https://pages.github.com/">https://pages.github.com/</a>
</li>
<li>org-modesでOctopress記事を書く： <a href="https://github.com/yoshinari-nomura/org-Octopress">https://github.com/yoshinari-nomura/org-Octopress</a>
</li>
<li>自動化スクリプト
</li>
</ul>

<p>

</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Octopress + Github Page でブログ環境を構築する</h2>
<div class="outline-text-2" id="text-1">
<p>
同じ環境で複数Rubyバージョンを利用できるようにするためRbenvを導入する。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Rbenvのインストール</h3>
<div class="outline-text-3" id="text-1-1">
<pre class="example">
$ cd ~
$ git clone git://github.com/sstephenson/rbenv.git .rbenv
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$ source ~/.bashrc
</pre>

<p>
rbenvでインストール可能なバージョンリストを確認する。 <code>rbenv install -l</code>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> RbenvによるRubyバージョンの切り替え</h3>
<div class="outline-text-3" id="text-1-2">
<pre class="example">
$ rbenv install 1.9.3-p0
$ rbenv global 1.9.3-p0
$ rbenv rehash
$ rbenv global
$ ruby --version
</pre>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> Octopressのインストール</h3>
<div class="outline-text-3" id="text-1-3">
<p>
GithubからOctopressをダウンロードする
</p>
<pre class="example">
$ git clone git://github.com/imathis/Octopress.git Octopress
$ cd Octopress
$ ruby --version  # ruby バージョン確認
</pre>

<p>
必要なrubyライブラリをインストールする
</p>
<pre class="example">
$ gem install bundler
$ rbenv rehash
$ bundle install
</pre>

<p>
Octopressテーマの初期化
</p>
<pre class="example">
$ rake install
</pre>

<p>
octostrap3 Themeへ変更
</p>
<pre class="example">
$ cd Octopress
$ git clone https://github.com/kAworu/octostrap3 .themes/octostrap3
$ rake 'install[octostrap3]'
</pre>

<p>
静的コンテンツの生成
</p>
<pre class="example">
$ rake generate
</pre>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> Github Pageサイトの準備</h3>
<div class="outline-text-3" id="text-1-4">
<p>
ここでは省略します。
</p>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> OctopressコンテンツをGithub Pageにコミットする</h3>
<div class="outline-text-3" id="text-1-5">
<pre class="example">
$rake setup_github_pages    # githubリポジトリのurlを入力する
$rake generate
$rake deploy
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> emacsから記事を書く道具の整備</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>elpa</code> を通して、=org-mode= で記事を書くための <code>org-ocotpress</code> をインストールする。
org-ocotpressは MELPAに登録してあるので、 <code>M-x package-install org-ocotpress</code> で
インストールする。 <code>org-ocotpress</code> から記事を管理するため、emacsの設定とOcotpress
のpermalink設定を以下のように変える。
</p>

<p>
<code>octopress/_config.yml</code>
</p>
<pre class="example">
permalink: /blog/:year-:month-:day-:title.html
</pre>

<p>
<code>emacs設定</code>
</p>
<pre class="example">
(require 'org-octopress)
(setq org-octopress-directory-top       (concat user-emacs-directory "blogs/octopress/source"))
(setq org-octopress-directory-posts     (concat user-emacs-directory "blogs/octopress/source/_posts"))
(setq org-octopress-directory-org-top   (concat user-emacs-directory "blogs/octopress/source"))
(setq org-octopress-directory-org-posts (concat user-emacs-directory "blogs/octopress/source/blog"))
(setq org-octopress-setup-file          (concat user-emacs-directory "blogs/octopress/setupfile.org"))
</pre>

<p>
<code>blogs/octopress/setupfile.org</code>
</p>
<pre class="example">
#+OPTIONS: H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:nil -:t f:nil *:t &lt;:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: author:nil
#+OPTIONS: email:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil
#+MACRO: more @@html:&lt;!-- more --&gt;@@
#+MACRO: twitter [[http://twitter.com/$1][@$1]]
#+MACRO: github [[https://github.com/$1/$2][$2]]
#+PROPERTY: cache yes
#+STARTUP: odd
#+STARTUP: content
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 自動化スクリプト</h2>
<div class="outline-text-2" id="text-3">
<p>
コンテンツプレビュー自動化elispとshell script
</p>
<pre class="example">
(defvar org-octopress-top
  (concat user-emacs-directory "blogs/octopress/")
  "octopressブログテンプレートディレクトリ")

(defun org-octopress-preview ()
  "preview octopress content by call external shell script."
  (interactive)
  (message "preview octopress content ....")
  (lexical-let* ((default-directory org-octopress-top)
                 (preview-url "http://localhost:4000"))
    (deferred:$
      (deferred:process-shell "blog_preview.sh" org-octopress-top)
      (deferred:nextc it
        (lambda (x)
          (message "*** preview blog ***")
          (message x)
          (message "launch preview url %s" preview-url)
          (browse-url preview-url))))))
</pre>

<p>
<code>blog_preview.sh</code>
</p>
<pre class="example">
#!/bin/sh
## Usage: blog_preview.sh
##
## Options: $1 octopressディレクトリの位置
##
## Comment: octopress配下にblog静的
##          コンテンツの生成とプレビュー
##################################################################### 

RUBY_VER="1.9.3-p0"
OCTOPRESS_DIR=$1

which rbenv
if [ $? = 0 ]; then
    # ruby バージョン切り替え処理
    rbenv global $RUBY_VER
    rbenv rehash
    global_ver=`rbenv global`
    if [ $global_ver = $RUBY_VER ]; then
        # blogコンテンツ生成とデプロイ
        echo "run rake with `ruby --version`"
        pushd $OCTOPRESS_DIR
        rake generate
        if [ -z "`netstat -nutl | grep 4000`" ] ; then
            echo "&gt;&gt;&gt; Startup Preview"
            rake preview &amp;
            sleep 2
        fi
        popd
    fi
fi
</pre>

<p>
コンテンツをgithubへ自動同期化elispとshell script
</p>
<pre class="example">
(defun org-octopress-deploy ()
  "deploy octopress content to github page service."
  (interactive)
  (message "deploy octopress content ....")
  (lexical-let* ((default-directory org-octopress-top))
    (deferred:$
      (deferred:process-shell "blog_deploy.sh" org-octopress-top)
      (deferred:nextc it
        (lambda (x)
          (message "*** deploy blog ***")
          (message x))))))
</pre>

<p>
<code>blog_deploy.sh</code>
</p>
<pre class="example">
#!/bin/sh
#!/bin/sh
## Usage: blog_deploy.sh
##
## Options: $1 octopressディレクトリの位置
##   
## Comment: octopress配下にblog静的
##          コンテンツの生成とデプロイ
##################################################################### 

RUBY_VER="1.9.3-p0"
OCTOPRESS_DIR=$1

which rbenv
if [ $? = 0 ]; then
    # ruby バージョン切り替え処理
    rbenv global $RUBY_VER
    rbenv rehash
    global_ver=`rbenv global`
    if [ $global_ver = $RUBY_VER ]; then
        # blogコンテンツ生成とデプロイ
        echo "run rake with `ruby --version`"
        pushd $OCTOPRESS_DIR
        rake generate
        rake deploy
        popd
    fi
fi
</pre>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[検証]SMTPプロトコール監視してみた]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-13-%5B%E6%A4%9C%E8%A8%BC%5Dsmtp%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%BC%E3%83%AB%E7%9B%A3%E8%A6%96%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F.html"/>
    <updated>2014-06-13T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/[検証]smtpプロトコール監視してみた</id>
    <content type="html"><![CDATA[<p>
自宅のPC環境にMTA(postfix)サーバを構築しました。
１周間ほど保持したので、telnet、nc、tcpdumpコマンドから
メール送信処理の中身を観測してみたいと思います。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">概要</h2>
<div class="outline-text-2" id="text-1">
<p>
VM環境を立てるのが面倒のため、loopbackインタフェースを通して
ローカル環境内で検証を行う。
</p>
<pre class="example">
+--------------+         +-------------+
|              |         |             |
| クライアント +-- lo ----+  MTAサーバ |
|              |         |             |
+--------------+         +-------------+
  127.0.0.1                127.0.0.1:25
</pre>

<p>
<!-- more -->
</p>

<p>
ドメイン、メール送受信情報
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">MTAサーバFQDN</td>
<td class="left">mail.home</td>
</tr>

<tr>
<td class="left">クライアントFQDN</td>
<td class="left">jizai.home</td>
</tr>

<tr>
<td class="left">送信者メール</td>
<td class="left">akira@mail.home</td>
</tr>

<tr>
<td class="left">受信者メール</td>
<td class="left">root@mail.home</td>
</tr>
</tbody>
</table>

<p>
tcpdumpコマンドでloopbackインタフェースのパケットを監視する。
</p>

<pre class="example">
[akira@jizai ~]$ sudo tcpdump -n  -i lo port 25
</pre>

<p>
telnetからメール送信レシピ、 <span class="underline">★</span> が付いている部分が手入力
</p>
<pre class="example">
[akira@jizai ~]$ telnet localhost 25     ★接続開始
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.home ESMTP unknown
HELO jizai.home                          ★メール送信開始宣言
250 mail.home
MAIL FROM: &lt;akira@mail.home&gt;             ★送信元を指定する
250 2.1.0 Ok
RCPT TO: &lt;root@mail.home&gt;                ★送信先を指定する
250 2.1.5 Ok
DATA                                     ★メール本文を開始する
354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
This is a Test mail from telnet
Hello root!
.                                        ★メール本文終了
250 2.0.0 Ok: queued as AB9BF8A107E
quit                                     ★接続終了
221 2.0.0 Bye
Connection closed by foreign host.
[akira@jizai ~]$
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">telnetからの接続開始</h2>
<div class="outline-text-2" id="text-2">
<p>
localhostの25番ポートへ接続する。
</p>
<pre class="example">
[akira@jizai ~]$ telnet localhost 25
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.home ESMTP unknown    ★ 説明：MTAサーバから準備完了応答メッセージ
</pre>

<p>
tcpdumpの出力にtcpの3ウェイ・ハンドシェイク処理(1-3行目)と
MTAサーバから最初の応答メッセージ(4-5行目)が表示される。
</p>
<pre class="example">
11:49:33.684755 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [S], seq 1483942186, win 43690, options [mss 65495,sackOK,TS val 2064872 ecr 0,nop,wscale 7], length 0
11:49:33.684770 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [S.], seq 2082428713, ack 1483942187, win 43690, options [mss 65495,sackOK,TS val 2064872 ecr 2064872,nop,wscale 7], length 0
11:49:33.684787 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 1, win 342, options [nop,nop,TS val 2064872 ecr 2064872], length 0
11:49:33.685184 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 1:30, ack 1, win 342, options [nop,nop,TS val 2064872 ecr 2064872], length 29
11:49:33.685214 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 30, win 342, options [nop,nop,TS val 2064872 ecr 2064872], length 0
</pre>
<p>
気になること、tcpdumpの出力に途中からシーケンス番号が1に変わった。調べてみた結果、
tcpdump がわかりやすく表示するためでした。 <code>-S</code> を付けることでオリジナルのシーケンス
番号をそのまま出力することができる。
</p>

<p>
MTAログにクライアントからの接続跡が記録された。
</p>
<pre class="example">
Jun 13 11:49:33 localhost postfix/smtpd[4873]: warning: hostname jizai does not resolve to address 192.168.100.3
Jun 13 11:49:33 localhost postfix/smtpd[4873]: connect from unknown[192.168.100.3]
</pre>
<p>
MTAサーバでHELOからの名前解決にまだ問題が残っているようです。
DNSサーバに名前登録したはずです。さあ、どうしよう！
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">メール送信の開始を宣言する</h2>
<div class="outline-text-2" id="text-3">
<p>
<code>HELO &lt;クライアントのホスト名&gt;</code> コマンドでメールサーバに
にてメール送信の開始を宣言する。
</p>
<pre class="example">
[akira@jizai ~]$ telnet localhost 25
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.home ESMTP unknown
HELO jizai.home        ★ HELOコマンド実行
250 mail.home          ★ サーバからの250応答
</pre>

<p>
tcpdumpの出力、クライアントのPUSH（１行目）とサーバのACK（２行目）、
そしてサーバから応答時のPUSHとクライアントの受信ACKで合計４通が表示された。
</p>
<pre class="example">
10:51:18.385531 IP 127.0.0.1.55748 &gt; 127.0.0.1.25: Flags [P.], seq 1:18, ack 30, win 342, options [nop,nop,TS val 1016282 ecr 1012424], length 17
10:51:18.385568 IP 127.0.0.1.25 &gt; 127.0.0.1.55748: Flags [.], ack 18, win 342, options [nop,nop,TS val 1016282 ecr 1016282], length 0
10:51:18.385682 IP 127.0.0.1.25 &gt; 127.0.0.1.55748: Flags [P.], seq 30:45, ack 18, win 342, options [nop,nop,TS val 1016282 ecr 1016282], length 15
10:51:18.385711 IP 127.0.0.1.55748 &gt; 127.0.0.1.25: Flags [.], ack 45, win 342, options [nop,nop,TS val 1016282 ecr 1016282], length 0
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">送信元を指定する</h2>
<div class="outline-text-2" id="text-4">
<p>
<code>MAIL FROM: &lt;送信元メール&gt;</code> コマンドにて送信元メールアドレスを設定する。
</p>
<pre class="example">
MAIL FROM: &lt;akira@mail.home&gt;
250 2.1.0 Ok       ★応答コード 250
</pre>

<p>
tcpdumpの出力、サーバからのACKと応答メッセージのPUSHが纏めて送信されたため
TCPやり取りが３通で表示された。
</p>
<pre class="example">
11:50:09.768768 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 18:48, ack 45, win 342, options [nop,nop,TS val 2075697 ecr 2070308], length 30
11:50:09.768944 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 45:59, ack 48, win 342, options [nop,nop,TS val 2075697 ecr 2075697], length 14
11:50:09.768976 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 59, win 342, options [nop,nop,TS val 2075697 ecr 2075697], length 0
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">送信先を指定する</h2>
<div class="outline-text-2" id="text-5">
<p>
<code>RCPT TO: &lt;送信先メール&gt;</code> コマンドにて送信先メールアドレスを設定する。
</p>
<pre class="example">
MAIL FROM: &lt;root@mail.home&gt;
250 2.1.5 Ok     ★応答コード 250
</pre>

<p>
tcpdumpの出力、サーバからのACKと応答メッセージのPUSHが纏めて送信されたため
TCPやり取りが３通で表示された。
</p>
<pre class="example">
11:50:22.696751 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 48:75, ack 59, win 342, options [nop,nop,TS val 2079575 ecr 2075697], length 27
11:50:22.703097 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 59:73, ack 75, win 342, options [nop,nop,TS val 2079577 ecr 2079575], length 14
11:50:22.703135 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 73, win 342, options [nop,nop,TS val 2079577 ecr 2079577], length 0
</pre>

<p>
また <code>RCPT TO</code> コマンドがMTAサーバに届くと、サーバ側のsmtpdプロセスでメール
キューイングIDの払出、送信先アドレスのチェック処理が実施される。以下はMTAログです。
</p>
<pre class="example">
Jun 13 11:50:22 localhost postfix/smtpd[4873]: AB9BF8A107E: client=unknown[192.168.100.3]
</pre>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">メール本文を開始する</h2>
<div class="outline-text-2" id="text-6">
<p>
<code>DATA</code> コマンドにてメール本文開始要求をサーバへ送信する。
</p>
<pre class="example">
DATA
354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;  ★応答コード 354
</pre>

<p>
tcpdumpの出力
</p>
<pre class="example">
11:50:44.461274 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 75:81, ack 73, win 342, options [nop,nop,TS val 2086105 ecr 2079577], length 6
11:50:44.461442 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 73:110, ack 81, win 342, options [nop,nop,TS val 2086105 ecr 2086105], length 37
11:50:44.461474 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 110, win 342, options [nop,nop,TS val 2086105 ecr 2086105], length 0
</pre>

<p>
<span class="underline">telnetターミナルからメール本文を入力する、観測結果から見ると改行が入力されるたびに</span>
<span class="underline">入力されたテキストがサーバへ送信される。</span>
</p>
<pre class="example">
This is a Test mail from telnet       ★改行１
Hello root!                           ★改行２
</pre>

<p>
tcpdumpの出力
</p>
<pre class="example">
★改行１
11:50:58.590306 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 81:114, ack 110, win 342, options [nop,nop,TS val 2090343 ecr 2086105], length 33
11:50:58.628041 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [.], ack 114, win 342, options [nop,nop,TS val 2090355 ecr 2090343], length 0

★改行２
11:51:09.655315 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 114:127, ack 110, win 342, options [nop,nop,TS val 2093663 ecr 2090355], length 13
11:51:09.655352 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [.], ack 127, win 342, options [nop,nop,TS val 2093663 ecr 2093663], length 0
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">メール本文終了</h2>
<div class="outline-text-2" id="text-7">
<p>
.（ピリオド）を入力して、メール本文終了要求をサーバへ送信する。
</p>
<pre class="example">
.
250 2.0.0 Ok: queued as AB9BF8A107E
</pre>

<p>
.（ピリオド）の送信とサーバからの250正常応答受信合計４通。
</p>
<pre class="example">
11:51:21.982567 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 127:130, ack 110, win 342, options [nop,nop,TS val 2097361 ecr 2093663], length 3
11:51:21.982599 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [.], ack 130, win 342, options [nop,nop,TS val 2097361 ecr 2097361], length 0
11:51:22.014030 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 110:147, ack 130, win 342, options [nop,nop,TS val 2097370 ecr 2097361], length 37
11:51:22.014070 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 147, win 342, options [nop,nop,TS val 2097370 ecr 2097370], length 0
</pre>

<p>
MTAログにメールのキューイング処理と転送処理の記録が出力された。
メールヘッダのmessage-id項目がこの時点で払いだされたようです。
</p>
<ul class="org-ul">
<li>形式： <code>yyyymmdd999999.キューイングID@ドメイン名</code>
</li>
</ul>
<pre class="example">
Jun 13 11:51:21 localhost postfix/cleanup[5028]: AB9BF8A107E: message-id=&lt;20140613025022.AB9BF8A107E@mail.home&gt;
Jun 13 11:51:22 localhost postfix/qmgr[920]: AB9BF8A107E: from=&lt;akira@mail.home&gt;, size=333, nrcpt=1 (queue active)
Jun 13 11:51:22 localhost postfix/local[5058]: AB9BF8A107E: to=&lt;akira@mail.home&gt;, orig_to=&lt;root@mail.home&gt;, relay=local, delay=72, delays=72/0.01/0/0.02, dsn=2.0.0, status=sent (delivered to maildir)
Jun 13 11:51:22 localhost postfix/qmgr[920]: AB9BF8A107E: removed
</pre>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">接続終了</h2>
<div class="outline-text-2" id="text-8">
<p>
<code>quit</code> コマンドにて接続切断する。
</p>
<pre class="example">
quit                 ★ 切断送信
221 2.0.0 Bye        ★ 211応答
Connection closed by foreign host.
</pre>

<pre class="example">
★ 切断送信
11:51:42.503665 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [P.], seq 130:136, ack 147, win 342, options [nop,nop,TS val 2103517 ecr 2097370], length 6

★ 211応答
11:51:42.503825 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [P.], seq 147:162, ack 136, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 15
11:51:42.503856 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [.], ack 162, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 0

★ tcpセッション終了
11:51:42.503867 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [F.], seq 162, ack 136, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 0
11:51:42.503969 IP 192.168.100.3.30760 &gt; 192.168.100.3.25: Flags [F.], seq 136, ack 163, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 0
11:51:42.503999 IP 192.168.100.3.25 &gt; 192.168.100.3.30760: Flags [.], ack 137, win 342, options [nop,nop,TS val 2103517 ecr 2103517], length 0
</pre>

<p>
MTAログにクライアント切断跡が残ります。
</p>
<pre class="example">
Jun 13 11:51:42 localhost postfix/smtpd[4873]: disconnect from unknown[192.168.100.3]
</pre>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">ncコマンドでファイルからメール送信テスト</h2>
<div class="outline-text-2" id="text-9">
<p>
telnetで入力した内容を <code>sendmail_test.txt</code> に保存し、ncに渡せばコマン１行
でメール送信することができた。
</p>

<p>
<code>sendmail_test.txt</code> の内容。
</p>
<pre class="example">
HELO jizai.home
MAIL FROM: &lt;akira@mail.home&gt;
RCPT TO: &lt;root@mail.home&gt;
DATA
This is a Test mail from nc
Hello root!
.
</pre>

<p>
メール送信したみた。
</p>
<pre class="example">
[akira@jizai temp]$ cat sendmail_test.txt | nc localhost 25
220 mail.home ESMTP unknown
250 mail.home
250 2.1.0 Ok
250 2.1.5 Ok
354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
250 2.0.0 Ok: queued as BE5B98A107E
[akira@jizai temp]$
</pre>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">習ったこと</h2>
<div class="outline-text-2" id="text-10">
<ul class="org-ul">
<li>tcpdumpのシーケンス番号の出力ルール
</li>
<li>DATAブロック内であっても、telnetターミナルで改行すると内容がサーバに送信される
</li>
<li>キューイングIDとメールメッセージIDの払出タイミング
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">参考</h2>
<div class="outline-text-2" id="text-11">
<ul class="org-ul">
<li><a href="http://www.atmarkit.co.jp/ait/articles/0304/22/news001.html">http://www.atmarkit.co.jp/ait/articles/0304/22/news001.html</a>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LPIC Lv2-201試験準備メモ１]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-12-lpic-lv2-201%E8%A9%A6%E9%A8%93%E6%BA%96%E5%82%99%E3%83%A1%E3%83%A2%EF%BC%91.html"/>
    <updated>2014-06-12T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/lpic-lv2-201試験準備メモ１</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">MBRパーティショニング</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>基本パテーション：MBR仕様の制限で基本パテーションは最大４つ
</li>
<li>拡張パテーション：一つ基本パテーションとして計算する
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">LVMスナップショート</h2>
<div class="outline-text-2" id="text-2">
<p>
スナップショートとはあるLVのカレント状態をバックアップする機能。
バックアップ方式としてファイルの増分内容を記録LV領域を作成しそのLV
領域にスナップショート作成時点からの変化履歴を記録する。
増分バックアップ方式であるため、初期作成時は容量消費しない。
対象LVに上ファイル変化があったたびにスナップショートLVに
変化内容が書き込まれるため、領域が消費される。
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">ARP (Address Resolution Protocol) コマンド</h2>
<div class="outline-text-2" id="text-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">arp -i eth0</td>
<td class="left">eth0インタフェースのarpキャッシュを表示する</td>
</tr>

<tr>
<td class="left">arp -a jizai.home</td>
<td class="left">対象ホストのmacアドレスを表示する</td>
</tr>

<tr>
<td class="left">arp -d jizai.home</td>
<td class="left">対象ホストのarpキャッシュを削除する</td>
</tr>

<tr>
<td class="left">arp -n</td>
<td class="left">逆引きを行わず、arpキャッシュを表示する</td>
</tr>

<tr>
<td class="left">arp -s 192.168.100.4 0a:c3:1c:e4:75:eb</td>
<td class="left">arpエントリレコードを追加する</td>
</tr>

<tr>
<td class="left">arp -f [/etc/ethers]</td>
<td class="left">ファイルからarpエントリレコードを追加する</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">ネットワーク設定ファイルのパス</h2>
<div class="outline-text-2" id="text-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">/etc/hostname</td>
<td class="left">ホスト名の設定</td>
</tr>

<tr>
<td class="left">/etc/hosts</td>
<td class="left">ホスト別名とIPのマッピング定義</td>
</tr>

<tr>
<td class="left">/etc/resolv.conf</td>
<td class="left">DNSサーバの指定</td>
</tr>

<tr>
<td class="left">/etc/nsswitch.conf</td>
<td class="left">名前解決方式のの優先順位指定</td>
</tr>

<tr>
<td class="left">/etc/networks</td>
<td class="left">ネットワーク名とネットワークアドレス</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">忘れがち知識</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>/etc/sysconfig/network ファイルにおいて IPv6 アドレス有効化こと項目：NETWORKING_IPV6
</li>
<li>無線 LAN のリンク品質や信号強度を確認できるコマンド
<ul class="org-ul">
<li>iwconfig
</li>
<li>iwlist
</li>
<li>iwspy
</li>
</ul>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Mission Controlメモ]]></title>
    <link href="http://luozengbin.github.io/blog/2014-06-12-java-mission-control%E3%83%A1%E3%83%A2.html"/>
    <updated>2014-06-12T00:00:00+09:00</updated>
    <id>http://luozengbin.github.io/blog/java-mission-controlメモ</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">利用可能なJavaバージョン</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Java SE Advanced （アドバンスド）
</li>
<li>Java SE Suite
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">ローカルJavaプロセスの監視</h2>
<div class="outline-text-2" id="text-2">
<p>
監視対象Javaプロセス起動時に以下のオプションを追加する。
</p>
<ul class="org-ul">
<li>+UnlockCommercialFeatures：商用オプションロックを解除する
</li>
<li>+FlightRecorder：フライドレコーダー機能を有効化する
</li>
</ul>

<pre class="example">
$ java -XX:+UnlockCommercialFeatures -XX:+FlightRecorder ......
</pre>

<p>
<!-- more -->
</p>

<p>
利用可能なコマンドを確認する、jcmdコマンドにプロセスIDを引数にして実行できる
コマンド一覧を表示する。
</p>
<pre class="example">
$ jcmd &lt;pid&gt; help
  7720:
  The following commands are available:
  JFR.stop    ★レコーディング停止
  JFR.start   ★レコーディング開始
  JFR.dump    ★レコーディング内容をダンプする
  JFR.check
  VM.native_memory
  VM.commercial_features
  ManagementAgent.stop
  ManagementAgent.start_local
  ManagementAgent.start
  Thread.print
  GC.class_histogram
  GC.heap_dump
  GC.run_finalization
  GC.run
  VM.uptime
  VM.flags
  VM.system_properties
  VM.command_line
  VM.version
  help
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.start</code> でレコーディング開始、サブコマンドのヘルプは
<code>jcmd &lt;pid&gt; help JFR.start</code> で見る。
</p>
<pre class="example">
$ ./jcmd 7720 JFR.start
 7720:
 Started recording 4. No limit (duration/maxsize/maxage) in use.
  
 Use JFR.dump recording=4 filename=FILEPATH to copy recording data to file.
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.dump</code> でレコーディングファイルを取得する
</p>
<pre class="example">
$ ./jcmd 7720 JFR.dump recording=4 filename=/tmp/7720_002.jfr
7720:
Dumped recording 4, 378.5 kB written to:

/tmp/7720_002.jfr
</pre>

<p>
<code>jcmd &lt;pid&gt; JFR.stop</code> でレコーディング終了
</p>
<pre class="example">
$ ./jcmd 7720 JFR.stop
7720:
Must provide either name or recording.
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">リモートJavaプロセスの監視</h2>
<div class="outline-text-2" id="text-3">
<p>
JMXポートを公開する、一番手軽な方法、jcmdコマンドを用いて、JMX remote port を臨時で空
けて接続する。
</p>
<pre class="example">
jcmd &lt;pid&gt; ManagementAgent.start jmxremote.port=7091 jmxremote.authenticate=false jmxremote.ssl=false
</pre>

<p>
クライアントマシンのJava Mission Control（GUI）からJMX接続して、記録を行う。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">有用なJavaオプション</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">-XX:StartFlightRecording</h3>
<div class="outline-text-3" id="text-4-1">
<p>
JRockit JVMで実行されるアプリケーションのフライト・レコーダ記録を開始するには、このオ
プションを起動時に指定します。このオプションは、フライト・レコーダを実行時に開始する
start_flightrecording診断コマンドと同等です。詳細は、Oracle JRockit JDKツールを参照し
てください。
</p>

<pre class="example">
java -XX:+FlightRecorder -XX:FlightRecorderOptions=disk=true,maxchunksize=10M -XX:StartFlightRecording=filename=test.jfr myApp
</pre>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">-XX:+PrintFlagsFinal</h3>
<div class="outline-text-3" id="text-4-2">
<p>
JVM終了時にXXパラメータの値を標準出力にダンプする。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">よく使うコマンド</h2>
<div class="outline-text-2" id="text-5">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">商用機能の有効化とステータス確認</td>
<td class="left">jcmd &lt;pid&gt; VM.commercial_features</td>
</tr>

<tr>
<td class="left">JMX Agent のリモート起動</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.start</td>
</tr>

<tr>
<td class="left">JMX Agent のローカル起動</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.start_local</td>
</tr>

<tr>
<td class="left">JMX Agent の停止</td>
<td class="left">jcmd &lt;pid&gt; ManagementAgent.stop</td>
</tr>

<tr>
<td class="left">スレッド一覧の出力</td>
<td class="left">Thread.print</td>
</tr>

<tr>
<td class="left">concurrent のlock に関するスレッド</td>
<td class="left">jcmd &lt;pid&gt; Thread.print -l</td>
</tr>

<tr>
<td class="left">JVM コマンドラインの表示</td>
<td class="left">VM.command_line</td>
</tr>

<tr>
<td class="left">System Properties の表示</td>
<td class="left">VM.system_properties</td>
</tr>

<tr>
<td class="left">該当VMに指定されたJVMオプションの表示 -all で全オプションと値の出力</td>
<td class="left">VM.flags</td>
</tr>

<tr>
<td class="left">GC.run</td>
<td class="left">System.gc() の実行</td>
</tr>

<tr>
<td class="left">ヒープダンプ出力（HPROF形式）-all を指定しない場合にはfull gc がリクエストされる</td>
<td class="left">GC.heap_dump</td>
</tr>
</tbody>
</table>
</div>
</div>
]]></content>
  </entry>
  
</feed>
